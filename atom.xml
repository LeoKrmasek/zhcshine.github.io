<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>饱读诗书</title>
  
  <subtitle>怕什么真理无穷，进一寸有一寸的欢喜。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zhuohc.com/"/>
  <updated>2019-08-02T11:09:17.542Z</updated>
  <id>http://www.zhuohc.com/</id>
  
  <author>
    <name>zhuohanchang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>django环境部署</title>
    <link href="http://www.zhuohc.com/2019/08/02/django%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.zhuohc.com/2019/08/02/django环境部署/</id>
    <published>2019-08-02T11:03:28.000Z</published>
    <updated>2019-08-02T11:09:17.542Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装supervisor服务"><a href="#安装supervisor服务" class="headerlink" title="安装supervisor服务"></a>安装supervisor服务</h4><p><a href="http://supervisord.org/" target="_blank" rel="noopener">地址</a></p><h4 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pip3 install service_identity</span><br><span class="line"><span class="meta">$</span> pip3 install channels</span><br><span class="line"><span class="meta">$</span> pip3 install channels_redis</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装supervisor服务&quot;&gt;&lt;a href=&quot;#安装supervisor服务&quot; class=&quot;headerlink&quot; title=&quot;安装supervisor服务&quot;&gt;&lt;/a&gt;安装supervisor服务&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://superv
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node入门基础</title>
    <link href="http://www.zhuohc.com/2019/07/26/node%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.zhuohc.com/2019/07/26/node入门基础/</id>
    <published>2019-07-26T07:48:00.000Z</published>
    <updated>2019-07-26T08:07:02.471Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><strong>开发环境</strong></p><p><a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">安装nvm</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>添加以下代码到~/.bashrc, ~/.profile, or ~/.zshrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR="$HOME/.nvm"</span><br><span class="line">[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh"  # This loads nvm</span><br><span class="line">[ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><p>nvm命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> nvm install 6.14.4  # 安装or 10.10.0, 8.9.1, etc</span><br><span class="line"><span class="meta">$</span> nvm ls 查看</span><br></pre></td></tr></table></figure><p>安装cnpm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm --registry=https://registry.npm.taobao.org install cnpm -g</span><br></pre></td></tr></table></figure><h4 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;开发环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nvm-sh/nvm&quot; t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux守护进程</title>
    <link href="http://www.zhuohc.com/2019/07/26/linux%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    <id>http://www.zhuohc.com/2019/07/26/linux守护进程/</id>
    <published>2019-07-26T05:43:45.000Z</published>
    <updated>2019-07-26T08:07:02.477Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是守护进程？"><a href="#什么是守护进程？" class="headerlink" title="什么是守护进程？"></a>什么是守护进程？</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B" target="_blank" rel="noopener">守护进程（Daemon Process）</a>，也就是通常说的 Daemon 进程（精灵进程），是 Linux 中的后台服务进程。它是一个生存期较长的进程，通常独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。</p><p>守护进程是个特殊的孤儿进程，这种进程脱离终端，为什么要脱离终端呢？之所以脱离于终端是为了避免进程被任何终端所产生的信息所打断，其在执行过程中的信息也不在任何终端上显示。由于在 Linux 中，每一个系统与用户进行交流的界面称为终端，每一个从此终端开始运行的进程都会依附于这个终端，这个终端就称为这些进程的控制终端，当控制终端被关闭时，相应的进程都会自动关闭。</p><p>Linux 的大多数服务器就是用守护进程实现的。</p><h4 id="守护进程的分类"><a href="#守护进程的分类" class="headerlink" title="守护进程的分类"></a>守护进程的分类</h4><p>根据守护进程的启动和管理方式，可以分为独立启动守护进程和超级守护进程两类</p><p><strong>独立启动（stand_alone)</strong>:该类进程启动后就常驻内存，所以会一直占用系统资源。其最大的优点就是它会一直启动，当外界有要求时相应速度较快，像httpd等进程；</p><p><strong>超级守护进程</strong>：系统启动时由一个统一的守护进程xinet来负责管理一些进程，当相应请求到来时需要通过xinet的转接才可以唤醒被xinet管理的进程。这种进程的优点时最初只有xinet这一守护进程占有系统资源，其他的内部服务并不一直占有系统资源，只有数据包到来时才会被xinet管理员来唤醒。并且我们还可以通过xinet来对它所管理的进程设置一些访问权限，相当于多了一层管理机制。<br>如果用两个比喻来形容两类守护进程的话一般会用银行的业务处理窗口来类比：</p><p><strong>独立启动</strong>：银行里有一种单服务的窗口，像取钱，存钱等窗口，这些窗口边上始终会坐着一个人，如果有人来取钱或存钱，可以直接到相应的窗口去办理，这个处理单一服务的始终存在的人就是独立启动的守护进程；</p><p><strong>超级守护进程</strong>：银行里还有一种窗口，提供综合服务，像汇款，转账，提款等业务；这种窗口附近也始终坐着一个人（xinet），她可能不提供具体的服务，提供具体服务的人在里面闲着聊天啊，喝茶啊，但是当有人来汇款时他会大声喊一句，小王，有人汇款啦，然后里面管汇款的小王会立马跑过来帮忙办完汇款业务。其他的人继续聊天，喝茶。这些负责具体业务的人我们就称之为超级守护进程。当然可能汇款人会有一些规则，可能不能往北京汇款，他就会提早告诉xinet，所以如果有人来汇款想汇往北京的话，管理员就直接告诉他这个我们这里办不到的，于是就根本不会去喊汇款员了，相当于提供了一层管理机制。针对这种窗口还存在多线程和单线程的区别：多线程：将所有用户的要求都提上来，里面的人都别闲着了，都一起干活吧；</p><p><strong>单线程</strong>：大家都排好队了，一个一个来，里面的人同一时间只有一个人在工作。</p><p>当然每个守护进程都会监听一个端口（银行窗口），一些常用守护进程的监听端口是固定的，像httpd监听80端口， sshd监听22端口等；我们可以将其理解为责任制，时候等待，有求必应。具体的端口信息可以通过cat /etc/services来查看。</p><h4 id="查看守护进程"><a href="#查看守护进程" class="headerlink" title="查看守护进程"></a>查看守护进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps axj</span><br></pre></td></tr></table></figure><blockquote><p>a 表示不仅列当前用户的进程，也列出所有其他用户的进程</p></blockquote><blockquote><p>x 表示不仅列有控制终端的进程，也列出所有无控制终端的进程</p></blockquote><blockquote><p>j 表示列出与作业控制相关的信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PPID   PID  PGID   SID TTY      TPGID STAT   UID   TIME COMMAND                                                                                                                                              </span><br><span class="line">   0     1     1     1 ?           -1 Ss       0  12:00 /sbin/init                                                                                                                                           </span><br><span class="line">   0     2     0     0 ?           -1 S        0   0:00 [kthreadd]                                                                                                                                           </span><br><span class="line">   2     3     0     0 ?           -1 I&lt;       0   0:00 [rcu_gp]                                                                                                                                             </span><br><span class="line">   2     4     0     0 ?           -1 I&lt;       0   0:00 [rcu_par_gp]                                                                                                                                         </span><br><span class="line">   2     6     0     0 ?           -1 I&lt;       0   0:00 [kworker/0:0H-kblockd]                                                                                                                               </span><br><span class="line">   2     8     0     0 ?           -1 I&lt;       0   0:00 [mm_percpu_wq]                                                                                                                                       </span><br><span class="line">   2     9     0     0 ?           -1 S        0   3:28 [ksoftirqd/0]                                                                                                                                        </span><br><span class="line">   2    10     0     0 ?           -1 I        0  40:58 [rcu_preempt]                                                                                                                                        </span><br><span class="line">   2    11     0     0 ?           -1 I        0   0:00 [rcu_sched]                                                                                                                                          </span><br><span class="line">   2    12     0     0 ?           -1 I        0   0:00 [rcu_bh]                                                                                                                                             </span><br><span class="line">   2    13     0     0 ?           -1 S        0   5:16 [rcuc/0]                                                                                                                                             </span><br><span class="line">   2    14     0     0 ?           -1 S        0   0:00 [rcub/0]</span><br></pre></td></tr></table></figure><p>从上图可以看出守护进行的一些特点：</p><blockquote><p>守护进程基本上都是以超级用户启动（ UID 为 0 ）</p></blockquote><blockquote><p>没有控制终端（ TTY 为 ？）</p></blockquote><blockquote><p>终端进程组 ID 为 -1 （ TPGID 表示终端进程组 ID）</p></blockquote><p>一般情况下，守护进程可以通过以下方式启动：</p><blockquote><p>在系统启动时由启动脚本启动，这些启动脚本通常放在 /etc/rc.d 目录下；</p></blockquote><blockquote><p>利用 inetd 超级服务器启动，如 telnet 等；</p></blockquote><blockquote><p>由 cron 定时启动以及在终端用 nohup 启动的进程也是守护进程。</p></blockquote><h4 id="编写守护进程"><a href="#编写守护进程" class="headerlink" title="编写守护进程"></a>编写守护进程</h4><p><strong>屏蔽一些控制终端操作的信号</strong></p><p>这是为了防止守护进行在没有运行起来前，控制终端受到干扰退出或挂起。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">signal(SIGTTOU,SIG_IGN);   </span><br><span class="line">signal(SIGTTIN,SIG_IGN);   </span><br><span class="line">signal(SIGTSTP,SIG_IGN);   </span><br><span class="line">signal(SIGHUP ,SIG_IGN);</span><br></pre></td></tr></table></figure><p><strong>在后台运行</strong></p><p>这是为避免挂起控制终端将守护进程放入后台执行。方法是在进程中调用 fork() 使父进程终止， 让守护进行在子进程中后台执行。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( pid = fork() )&#123; <span class="comment">// 父进程  </span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);        <span class="comment">//结束父进程，子进程继续  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>脱离控制终端、登录会话和进程组</strong></p><p>Linux 中的进程与控制终端，登录会话和进程组之间的关系：</p><p>进程属于一个进程组，进程组号（GID）就是进程组长的进程号（PID）。登录会话可以包含多个进程组。这些进程组共享一个控制终端。这个控制终端通常是创建进程的 shell 登录终端。 控制终端、登录会话和进程组通常是从父进程继承下来的。我们的目的就是要摆脱它们 ，使之不受它们的影响。因此需要调用 setsid() 使子进程成为新的会话组长，示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsid();</span><br></pre></td></tr></table></figure><p>setsid()调用成功后，进程成为新的会话组长和新的进程组长，并与原来的登录会话和进程组脱离。由于会话过程对控制终端的独占性，进程同时与控制终端脱离。 </p><p><strong>禁止进程重新打开控制终端</strong></p><p>现在，进程已经成为无终端的会话组长，但它可以重新申请打开一个控制终端。可以通过使进程不再成为会话组长来禁止进程重新打开控制终端，采用的方法是再次创建一个子进程，示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( pid=fork() )&#123; <span class="comment">// 父进程  </span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);      <span class="comment">// 结束第一子进程，第二子进程继续（第二子进程不再是会话组长）   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关闭打开的文件描述符</strong></p><p>进程从创建它的父进程那里继承了打开的文件描述符。如不关闭，将会浪费系统资源，造成进程所在的文件系统无法卸下以及引起无法预料的错误。按如下方法关闭它们：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NOFILE 为 &lt;sys/param.h&gt; 的宏定义  </span></span><br><span class="line"><span class="comment">// NOFILE 为文件描述符最大个数，不同系统有不同限制  </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; NOFILE; ++i)&#123;<span class="comment">// 关闭打开的文件描述符  </span></span><br><span class="line">    close(i);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改变当前工作目录</strong></p><p>进程活动时，其工作目录所在的文件系统不能卸下。一般需要将工作目录改变到根目录。对于需要转储核心，写运行日志的进程将工作目录改变到特定目录如 /tmp。示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chdir(<span class="string">"/"</span>);</span><br></pre></td></tr></table></figure><p><strong>重设文件创建掩模</strong></p><p>进程从创建它的父进程那里继承了文件创建掩模。它可能修改守护进程所创建的文件的存取权限。为防止这一点，将文件创建掩模清除：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umask(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>处理 SIGCHLD 信号</strong></p><p>但对于某些进程，特别是服务器进程往往在请求到来时生成子进程处理请求。如果父进程不等待子进程结束，子进程将成为僵尸进程（zombie）从而占用系统资源。如果父进程等待子进程结束，将增加父进程的负担，影响服务器进程的并发性能。在 Linux 下可以简单地将 SIGCHLD 信号的操作设为 SIG_IGN 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signal(SIGCHLD, SIG_IGN);</span><br></pre></td></tr></table></figure><p>这样，内核在子进程结束时不会产生僵尸进程。</p><p>代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/param.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_daemon</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1）屏蔽一些控制终端操作的信号  </span></span><br><span class="line">    signal(SIGTTOU, SIG_IGN);</span><br><span class="line">    signal(SIGTTIN, SIG_IGN);</span><br><span class="line">    signal(SIGTSTP, SIG_IGN);</span><br><span class="line">    signal(SIGHUP, SIG_IGN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2）在后台运行 </span></span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE); <span class="comment">// 进程创建失败</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);    <span class="comment">// 退出父进程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3）脱离控制终端、登录会话和进程组  </span></span><br><span class="line">    setsid();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4）禁止进程重新打开控制终端  </span></span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);  <span class="comment">// 结束第一子进程，第二子进程继续（第二子进程不再是会话组长） </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5）关闭打开的文件描述符  </span></span><br><span class="line">    <span class="comment">// NOFILE 为 &lt;sys/param.h&gt; 的宏定义  </span></span><br><span class="line">    <span class="comment">// NOFILE 为文件描述符最大个数，不同系统有不同限制  </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NOFILE; ++i)&#123;</span><br><span class="line">        close(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6）改变当前工作目录  </span></span><br><span class="line">    chdir(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7）重设文件创建掩模  </span></span><br><span class="line">    umask(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8）处理 SIGCHLD 信号  </span></span><br><span class="line">    signal(SIGCHLD,SIG_IGN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    init_daemon();</span><br><span class="line">    <span class="keyword">char</span> *msg = <span class="string">"I'm printlg process...\n"</span>;</span><br><span class="line">    <span class="keyword">int</span> msg_len = <span class="built_in">strlen</span>(msg);</span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">"/tmp/test_printlg.log"</span>, O_RDWR | O_CREAT | O_APPEND, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"open /tmp/test_printlg.log fail.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 每隔 3s 输出 msg 到 /tmp/test_printlg.log 文件中</span></span><br><span class="line">        write(fd, msg, msg_len);</span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gcc -o test1 main.c </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ./test1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps axj | grep test1</span></span><br><span class="line"> PPID   PID  PGID   SID TTY      TPGID STAT   UID   TIME COMMAND </span><br><span class="line">21591 31396 31395 31395 ?           -1 R        0   0:03 ./test1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看结果</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /tmp/test_printlg.log</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 杀死守护进程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo <span class="built_in">kill</span> -9 &lt;pid&gt;</span></span><br></pre></td></tr></table></figure><h4 id="守护进程开机自启动"><a href="#守护进程开机自启动" class="headerlink" title="守护进程开机自启动"></a>守护进程开机自启动</h4><p>linux系统启动的顺序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. BIOS</span><br><span class="line">2. MBR (boot loader)</span><br><span class="line">3. kernel loading</span><br><span class="line">4. init program</span><br><span class="line">5. initial script (/etc/rc.d/rc.sysinit)</span><br><span class="line">6. daemon start (/etc/rc.d/rc[0-6].d/*)</span><br><span class="line">7. local setting (/etc/rc.d/rc.local)</span><br></pre></td></tr></table></figure><p>每个系统启动级别的守护进程位置不一致，通常有以下位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc.d</span><br><span class="line">/etc/rc[N].d</span><br></pre></td></tr></table></figure><p>知道了守护进程的位置，就可以把 test1 放在 /etc/rc5.d/ 下，并且还要改名称，因为系统需要根据指定的名称来使用 for 循环来启动或者关闭每个程序，命名规则如下： </p><ol><li>S[num][name]：启动守护进程name，例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. K[num][name]：禁止启动守护进程name，例如：```K01test1</span><br></pre></td></tr></table></figure></li></ol><p>我们这里肯定要启动了，所以将 <figure class="highlight plain"><figcaption><span>命名为 ```S01test1```：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```shell</span><br><span class="line">mv test1 /etc/rc5.d/S01test1</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是守护进程？&quot;&gt;&lt;a href=&quot;#什么是守护进程？&quot; class=&quot;headerlink&quot; title=&quot;什么是守护进程？&quot;&gt;&lt;/a&gt;什么是守护进程？&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AE%
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.zhuohc.com/tags/linux/"/>
    
      <category term="运维" scheme="http://www.zhuohc.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>minicat-manjaro-18.0.4-dev</title>
    <link href="http://www.zhuohc.com/2019/07/24/minicat-manjaro-18-0-4-dev/"/>
    <id>http://www.zhuohc.com/2019/07/24/minicat-manjaro-18-0-4-dev/</id>
    <published>2019-07-24T06:11:44.000Z</published>
    <updated>2019-07-26T07:58:46.167Z</updated>
    
    <content type="html"><![CDATA[<h4 id="添加中科大源"><a href="#添加中科大源" class="headerlink" title="添加中科大源"></a>添加中科大源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo vi /etc/pacman.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在文件末尾添加</span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure><h4 id="导入GPG-Key"><a href="#导入GPG-Key" class="headerlink" title="导入GPG Key"></a>导入GPG Key</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h4 id="安装基本开发编译软件"><a href="#安装基本开发编译软件" class="headerlink" title="安装基本开发编译软件"></a>安装基本开发编译软件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S --needed base-devel</span><br></pre></td></tr></table></figure><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S git</span><br></pre></td></tr></table></figure><h4 id="安装chrome"><a href="#安装chrome" class="headerlink" title="安装chrome"></a>安装chrome</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S google-chrome</span><br></pre></td></tr></table></figure><h4 id="安装搜狗拼音输入法"><a href="#安装搜狗拼音输入法" class="headerlink" title="安装搜狗拼音输入法"></a>安装搜狗拼音输入法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S fcitx-im #默认全部安装</span><br><span class="line"><span class="meta">$</span> sudo pacman -S fcitx-configtool</span><br><span class="line"><span class="meta">$</span> sudo pacman -S fcitx-sogoupinyin</span><br></pre></td></tr></table></figure><h4 id="编辑输入法配置文件"><a href="#编辑输入法配置文件" class="headerlink" title="编辑输入法配置文件"></a>编辑输入法配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo nano ~/.xprofile</span><br><span class="line"></span><br><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS="@im=fcitx"</span><br><span class="line"><span class="meta">#</span> 重启后输入法就可以正常使用。</span><br></pre></td></tr></table></figure><h4 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S vim</span><br></pre></td></tr></table></figure><p>安装vim基础配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> curl https://raw.githubusercontent.com/wklken/vim-for-server/master/vimrc &gt; ~/.vimrc</span><br></pre></td></tr></table></figure><h4 id="安装tmux和-tmux"><a href="#安装tmux和-tmux" class="headerlink" title="安装tmux和.tmux"></a>安装tmux和.tmux</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S tmux</span><br><span class="line"><span class="meta">$</span> cd ~</span><br><span class="line"><span class="meta">$</span> git clone https://github.com/gpakosz/.tmux.git</span><br><span class="line"><span class="meta">$</span> ln -s -f .tmux/.tmux.conf</span><br><span class="line"><span class="meta">$</span> cp .tmux/.tmux.conf.local .</span><br></pre></td></tr></table></figure><h4 id="安装zsh和oh-my-zsh"><a href="#安装zsh和oh-my-zsh" class="headerlink" title="安装zsh和oh-my-zsh"></a>安装zsh和oh-my-zsh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S zsh</span><br><span class="line"><span class="meta">$</span> sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure><h4 id="安装yaourt"><a href="#安装yaourt" class="headerlink" title="安装yaourt"></a>安装yaourt</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S --needed base-devel git wget yajl</span><br><span class="line"><span class="meta">$</span> cd /tmp</span><br><span class="line"><span class="meta">$</span> git clone https://aur.archlinux.org/package-query.git</span><br><span class="line"><span class="meta">$</span> cd package-query/</span><br><span class="line"><span class="meta">$</span> makepkg -si &amp;&amp; cd /tmp/</span><br><span class="line"><span class="meta">$</span> git clone https://aur.archlinux.org/yaourt.git</span><br><span class="line"><span class="meta">$</span> cd yaourt/</span><br><span class="line"><span class="meta">$</span> makepkg -si</span><br></pre></td></tr></table></figure><h4 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://aur.archlinux.org/shadowsocks-qt5-git.git</span><br><span class="line"><span class="meta">$</span> cd shadowsocks-qt5-git</span><br><span class="line"><span class="meta">$</span> less PKGBUILD  # 查看</span><br><span class="line"><span class="meta">$</span> makepkg -si  # 安装</span><br></pre></td></tr></table></figure><h4 id="设置ssh连接不断开"><a href="#设置ssh连接不断开" class="headerlink" title="设置ssh连接不断开"></a>设置ssh连接不断开</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vim ~/.ssh/config</span><br><span class="line">Host *</span><br><span class="line">    ServerAliveInterval 60</span><br></pre></td></tr></table></figure><h4 id="安装jetbrain全家桶"><a href="#安装jetbrain全家桶" class="headerlink" title="安装jetbrain全家桶"></a>安装jetbrain全家桶</h4><p><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">jetbrain激活参考地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo vim /etc/hosts</span><br><span class="line"><span class="meta">#</span> 添加以下两行代码</span><br><span class="line">0.0.0.0 account.jetbrains.com</span><br><span class="line">0.0.0.0 www.jetbrains.com</span><br></pre></td></tr></table></figure><h4 id="安装python开发环境"><a href="#安装python开发环境" class="headerlink" title="安装python开发环境"></a>安装python开发环境</h4><a href="/2016/11/09/python入门基础/" title="python开发环境">python开发环境</a><h4 id="安装rabbitmq"><a href="#安装rabbitmq" class="headerlink" title="安装rabbitmq"></a>安装rabbitmq</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S rabbitmq rabbitmqadmin</span><br><span class="line"><span class="meta">$</span> sudo systemctl enable rabbitmq.service  # 开机启动</span><br><span class="line"><span class="meta">$</span> sudo systemctl start rabbitmq.service  # 启动</span><br><span class="line"><span class="meta">$</span> rabbitmq-plugins enable rabbitmq_management  # 开启web界面</span><br></pre></td></tr></table></figure><h4 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S redis</span><br><span class="line"><span class="meta">$</span> sudo systemctl enable redis.service  # 开机启动</span><br><span class="line"><span class="meta">$</span> sudo systemctl start redis.service  # 启动</span><br></pre></td></tr></table></figure><p>设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo vim /etc/redis.conf</span><br><span class="line">redispassword password</span><br></pre></td></tr></table></figure><h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><a href="/2019/07/26/node入门基础/" title="python开发环境">python开发环境</a><h4 id="其他软件清单"><a href="#其他软件清单" class="headerlink" title="其他软件清单"></a>其他软件清单</h4><blockquote><p>peek 录制gif软件</p></blockquote><blockquote><p>github desktop github客户端</p></blockquote><blockquote><p>postman</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;添加中科大源&quot;&gt;&lt;a href=&quot;#添加中科大源&quot; class=&quot;headerlink&quot; title=&quot;添加中科大源&quot;&gt;&lt;/a&gt;添加中科大源&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.zhuohc.com/tags/linux/"/>
    
      <category term="manjaro" scheme="http://www.zhuohc.com/tags/manjaro/"/>
    
  </entry>
  
  <entry>
    <title>c开发gtk+入门基础</title>
    <link href="http://www.zhuohc.com/2019/07/24/c%E5%BC%80%E5%8F%91gtk+-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.zhuohc.com/2019/07/24/c开发gtk+-入门基础/</id>
    <published>2019-07-24T05:58:51.000Z</published>
    <updated>2019-07-26T08:07:02.461Z</updated>
    
    <content type="html"><![CDATA[<h4 id="gdk-介绍"><a href="#gdk-介绍" class="headerlink" title="gdk+介绍"></a>gdk+介绍</h4><blockquote><p>gtk+是c语言编写的用于开发图形界面程序的函数库。gtk+来源于gimp（gnu image minipulation program），gtk+在gdk（gimp drawing kit）基础上创建，并进行封装。</p></blockquote><h4 id="linux安装"><a href="#linux安装" class="headerlink" title="linux安装"></a>linux安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> http://ftp.gnome.org/pub/gnome/sources/gtk+/3.24/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://ftp.gnome.org/pub/gnome/sources/gtk+/3.24/gtk+-3.24.10.tar.xz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xvfJ gtk+-3.24.10.tar.xz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/user/include/gtk3.24</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; sudo make install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ldconfig</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置LD_LIBRARY_PATH</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> LD_LIBRARY_PATH=<span class="string">"/opt/gtk/lib"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> PATH=<span class="string">"/opt/gtk/bin:<span class="variable">$PATH</span>"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> LD_LIBRARY_PATH PATH</span></span><br></pre></td></tr></table></figure><h4 id="简单的空白窗口"><a href="#简单的空白窗口" class="headerlink" title="简单的空白窗口"></a>简单的空白窗口</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    gtk_init(&amp;argc, &amp;argv);</span><br><span class="line">    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);</span><br><span class="line">    gtk_widget_show(window);</span><br><span class="line">    gtk_main();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc -o main main.c `pkg-config --libs -cflags gtk+-3.0`</span></span><br></pre></td></tr></table></figure><p>gtk_init (&amp;argc, &amp;argv); 所有 GTK应用程序都要调用该函数，而且必须在控件定义之前使用，它为我们设置一些缺省值( 例如视觉和颜色 )映射这个函数将函数库初始化，设置缺省的信号处理函数，并检查通过命令行传递给应用程序的参数，自动完成一些必要的初始化工作。</p><p>gtk_main()是在每个Gtk应用程序都要调用的函数。程序运行停在这里等待事件(如键盘事件或鼠标事件)的发生，等待用户来操作窗口</p><p>gtk_window_new()的功能创建一个窗口并返回这个窗口的控件指针。GTK_WINDOW_TOPLEVEL指明窗口的类型为最上层的主窗口，它最常用。接着创建一个GtkWidget *类型的window变量来接收。GtkWidget是GTK+控件类型，GtkWidget * 能指向任何控件的指针类型。</p><p>gtk_widget_show(window)；用来显示上一步创建的窗口控件。在这个简单例子里，所有事件都被忽略。用鼠标点击窗口右上角的“×”按钮也不能将窗口关闭。我们可以在终端敲 Ctrl + C 关闭程序。</p><h4 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h4><p>GTK中控件主要分为两类：容器控件，非容器控件。</p><p>容器控件：它可以容纳别的控件，我们可以理解为盒子，盒子拿来装东西。容器控件又分为两类，一类只能容纳一个控件，如窗口，按钮；另一类能容纳多个控件，如布局控件。</p><p>非容器控件：它不可以容纳别的控件，如标签、行编辑。</p><p>前面我们写的空白窗口是能容纳一个控件的控件，现在我们要做的是，给这个窗口添加一个按钮。</p><p>首先，我们需要创建一个按钮，然后需要把按钮添加到窗口，接着，显示按钮控件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// gtk初始化</span></span><br><span class="line">    gtk_init(&amp;argc, &amp;argv);</span><br><span class="line">    <span class="comment">// 创建一个顶层窗口</span></span><br><span class="line">    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);</span><br><span class="line">    <span class="comment">// 创建一个button容器</span></span><br><span class="line">    GtkWidget *button = gtk_button_new_with_label(<span class="string">"hello gtk"</span>);</span><br><span class="line">    <span class="comment">// 将button放入窗口中，</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(window), button);</span><br><span class="line">    <span class="comment">// 显示button</span></span><br><span class="line">    gtk_widget_show(button);</span><br><span class="line">    <span class="comment">// 显示window</span></span><br><span class="line">    gtk_widget_show(window);</span><br><span class="line">    gtk_main();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtk_container_add</span><span class="params">(GtkContainer *container, GtkWidget *widget)</span></span>;</span><br></pre></td></tr></table></figure><p>这里我们是把按钮添加到窗口容器里，widget为按钮指针(以上代码的button)，container为窗口指针(以上代码的window)，这里需要注意的是，我们创建的窗口(window)返回值为GtkWidget *类型，而gtk_container_add()的第一个参数为GtkContainer *类型，由于 GtkWidget *类型的变量为指向任何控件的万能指针，所以，在函数传参时，根据参数类型进行相应的转换，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gtk_container_add( (GtkContainer *)window, button);</span><br></pre></td></tr></table></figure><p>C语言里，我们常用这种方法转换。在GTK中，很多内部变量指针类型转换都定义了宏定义，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GTK_CONTAINER(x) (GtkContainer *)(x)</span></span><br></pre></td></tr></table></figure><p>所以，我们还可以这么写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gtk_container_add(GTK_CONTAINER(window), button);</span><br></pre></td></tr></table></figure><p>那么，我们如何知道，哪个类型对应哪个宏定义呢？把要转换类型名字全部变为大写，同时，单词和单词之间以下划线“_”连接，然后，这个名字就是哪个宏定义的名字，如，(GtkButton *)x用宏定义的方法为 GTK_BUTTON(x)。</p><p>上面的代码，我们是按钮和窗口都得通过gtk_widget_show()显示出来：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gtk_widget_show(button);<span class="comment">// 显示按钮</span></span><br><span class="line">gtk_widget_show(window);<span class="comment">// 显示窗口</span></span><br></pre></td></tr></table></figure><p>但是，假如，窗口里有100个控件，还是这样一个一个地显示出来会比较麻烦，这时候，我们可以通过gtk_widget_show_all()显示所有的控件，里面需要传的是容纳控件的那个容器(这里为窗口)。这样，容器上的控件也会跟着显示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gtk_widget_show_all()</span><br></pre></td></tr></table></figure><h4 id="布局容器-水平布局"><a href="#布局容器-水平布局" class="headerlink" title="布局容器-水平布局"></a>布局容器-水平布局</h4><p>如果我们希望窗口里多放添加几个控件，直接添加是不成功的，因为窗口只能容纳一个控件的容器。这时候，我们需要借助布局容器，我们先把布局容器添加到窗口里，然后再把所需要添加的控件放在布局容器里。</p><p>布局容器的主要分类：水平布局( GtkHBox)、垂直布局(GtkVBox )、表格布局(GtkTable)、固定布局(GtkFixed )。</p><p><strong>创建一个盒子布局</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// orientation参数: GTK_ORIENTATION_HORIZONTAL GTK_ORIENTATION_VERTICAL 两个可选值 spacing参数是单元格之间的间隙</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gtk_box_new</span><span class="params">(<span class="keyword">int</span> orientation, <span class="keyword">int</span> spacing)</span></span>;</span><br></pre></td></tr></table></figure><p>以下代码显示水平容器布局方式，垂直容器类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// gtk初始化</span></span><br><span class="line">    gtk_init(&amp;argc, &amp;argv);</span><br><span class="line">    <span class="comment">// 创建一个顶层窗口</span></span><br><span class="line">    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);</span><br><span class="line">    <span class="comment">// 创建水平容器</span></span><br><span class="line">    <span class="comment">// GtkWidget *hbox = gtk_hbox_new(TRUE, 10);  // gtk+2版本使用</span></span><br><span class="line">    GtkWidget *hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, <span class="number">10</span>);  <span class="comment">// gtk+3版本使用</span></span><br><span class="line">    <span class="comment">// 将水平容器添加到窗口</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(window), hbox);</span><br><span class="line">    <span class="comment">// 创建一个button容器</span></span><br><span class="line">    GtkWidget *button1 = gtk_button_new_with_label(<span class="string">"button1"</span>);</span><br><span class="line">    <span class="comment">// 将button放入水平容器中</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(hbox), button1);</span><br><span class="line">    <span class="comment">// 重复创建两个</span></span><br><span class="line">    GtkWidget *button2 = gtk_button_new_with_label(<span class="string">"button2"</span>);</span><br><span class="line">    GtkWidget *button3 = gtk_button_new_with_label(<span class="string">"button3"</span>);</span><br><span class="line">    gtk_container_add(GTK_CONTAINER(hbox), button2);</span><br><span class="line">    gtk_container_add(GTK_CONTAINER(hbox), button3);</span><br><span class="line">    <span class="comment">// 显示全部窗口</span></span><br><span class="line">    gtk_widget_show_all(window);</span><br><span class="line">    gtk_main();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="布局容器-表格布局"><a href="#布局容器-表格布局" class="headerlink" title="布局容器-表格布局"></a>布局容器-表格布局</h4><p><strong>添加表格布局容器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rows: 行数, coumns: 列数, homogeneous：容器内表格的大小是否相等, 返回值：表格布局容器指针</span></span><br><span class="line"><span class="function">GtkWidget *<span class="title">gtk_table_new</span><span class="params">(guint rows, guint columns, gboolean homogeneous)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>布局容器添加控件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// table: 容纳控件的容器, widget: 要添加的控件, 后四个参数为控件摆放的坐标，规则如下：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtk_table_attach_defaults</span><span class="params">(GtkTable *table, GtkWidget *widget, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="https://zhuohc-com.oss-cn-hangzhou.aliyuncs.com/gtk%E8%A1%A8%E6%A0%BC%E5%B8%83%E5%B1%80%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="示意图"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// gtk初始化</span></span><br><span class="line">    gtk_init(&amp;argc, &amp;argv);</span><br><span class="line">    <span class="comment">// 创建一个顶层窗口</span></span><br><span class="line">    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);</span><br><span class="line">    <span class="comment">// 创建一个表格容器</span></span><br><span class="line">    GtkWidget *table = gtk_table_new(<span class="number">2</span>, <span class="number">2</span>, TRUE); <span class="comment">// gtk+2版本</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(window), table);</span><br><span class="line">    <span class="comment">// 创建button1， button2, button3</span></span><br><span class="line">    GtkWidget *button1 = gtk_button_new_with_label(<span class="string">"button1"</span>);</span><br><span class="line">    GtkWidget *button2 = gtk_button_new_with_label(<span class="string">"button2"</span>);</span><br><span class="line">    GtkWidget *button3 = gtk_button_new_with_label(<span class="string">"button3"</span>);</span><br><span class="line">    <span class="comment">// 将button放入table中</span></span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button1, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button2, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button3, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 显示所有窗口</span></span><br><span class="line">    gtk_widget_show_all(window);</span><br><span class="line">    gtk_main();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="布局容器-固定布局"><a href="#布局容器-固定布局" class="headerlink" title="布局容器-固定布局"></a>布局容器-固定布局</h4><p>水平、垂直和表格布局容器，控件会跟着容器大小的变化进行自动适应，而固定布局容器里的控件则不会跟着变化( 则固定不变 )。</p><p><strong>固定布局的创建</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">GtkWidget *<span class="title">gtk_fixed_new</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>添加控件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fixed：容纳控件的容器, widget：要添加的控件, x, y：控件摆放位置的起点坐标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtk_fixed_put</span><span class="params">(GtkFixed *fixed, GtkWidget *widget, gint x, gint y )</span></span>;</span><br></pre></td></tr></table></figure><p><strong>设置控件的大小( 宽和高 )</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// widget：需要设置的控件, width：宽度, height：高度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtk_widget_set_size_request</span><span class="params">(GtkWidget *widget, gint width, gint height)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>移动固定布局里控件的位置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fixed：固定布局容器, widget：需要移动的控件, x, y: 移动的位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtk_fixed_move</span><span class="params">(GtkFixed *fixed, GtkWidget *widget, gint x, gint y)</span></span>;</span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// gtk初始化</span></span><br><span class="line">    gtk_init(&amp;argc, &amp;argv);</span><br><span class="line">    <span class="comment">// 创建一个顶层窗口</span></span><br><span class="line">    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);</span><br><span class="line">    <span class="comment">// 创建一个固定布局容器</span></span><br><span class="line">    GtkWidget *fixed = gtk_fixed_new();</span><br><span class="line">    <span class="comment">// 将fixed添加到window中</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(window), fixed);</span><br><span class="line">    <span class="comment">// 创建button</span></span><br><span class="line">    GtkWidget *button1 = gtk_button_new_with_label(<span class="string">"button1"</span>);</span><br><span class="line">    GtkWidget *button2 = gtk_button_new_with_label(<span class="string">"button2"</span>);</span><br><span class="line">    <span class="comment">// 将button添加到fixed</span></span><br><span class="line">    gtk_fixed_put(GTK_FIXED(fixed), button1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    gtk_fixed_put(GTK_FIXED(fixed), button2, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 移动button位置</span></span><br><span class="line">    gtk_fixed_move(GTK_FIXED(fixed), button2, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">    <span class="comment">// 设置button大小</span></span><br><span class="line">    gtk_widget_set_size_request(button2, <span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="comment">// 显示所有窗口</span></span><br><span class="line">    gtk_widget_show_all(window);</span><br><span class="line">    gtk_main();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="容器布局练习-计算器"><a href="#容器布局练习-计算器" class="headerlink" title="容器布局练习-计算器"></a>容器布局练习-计算器</h4><p><strong>编辑控件( GtkEntry )</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="function">GtkWidget * <span class="title">gtk_entry_new</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">// 编辑</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtk_entry_set_text</span> <span class="params">(GtkEntry *entry,<span class="keyword">const</span> gchar *text)</span></span>;</span><br><span class="line"><span class="comment">// 设置行编辑是否允许编辑</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtk_editable_set_editable</span><span class="params">(GtkEditable *editable, gboolean is_editable)</span></span>;</span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    gtk_init(&amp;argc, &amp;argv);</span><br><span class="line">    <span class="comment">// 创建窗口</span></span><br><span class="line">    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);</span><br><span class="line">    <span class="comment">// 创建5行4列的表格容器</span></span><br><span class="line">    GtkWidget *table = gtk_table_new(<span class="number">5</span>, <span class="number">4</span>, TRUE);</span><br><span class="line">    <span class="comment">// 将table放入到容器中</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(window), table);</span><br><span class="line">    <span class="comment">// 创建一个行编辑</span></span><br><span class="line">    GtkWidget *entry = gtk_entry_new();</span><br><span class="line">    <span class="comment">// 设置行编辑的内容</span></span><br><span class="line">    gtk_entry_set_text(GTK_ENTRY(entry), <span class="string">"2+2=4"</span>);</span><br><span class="line">    <span class="comment">// 设置行编辑不允许编辑</span></span><br><span class="line">    gtk_editable_set_editable(GTK_EDITABLE(entry), FALSE);</span><br><span class="line">    <span class="comment">// 创建0-9数字按钮，+-×/=c功能按钮</span></span><br><span class="line">    GtkWidget *button_0 = gtk_button_new_with_label(<span class="string">"0"</span>);</span><br><span class="line">    GtkWidget *button_1 = gtk_button_new_with_label(<span class="string">"1"</span>);</span><br><span class="line">    GtkWidget *button_2 = gtk_button_new_with_label(<span class="string">"2"</span>);</span><br><span class="line">    GtkWidget *button_3 = gtk_button_new_with_label(<span class="string">"3"</span>);</span><br><span class="line">    GtkWidget *button_4 = gtk_button_new_with_label(<span class="string">"4"</span>);</span><br><span class="line">    GtkWidget *button_5 = gtk_button_new_with_label(<span class="string">"5"</span>);</span><br><span class="line">    GtkWidget *button_6 = gtk_button_new_with_label(<span class="string">"6"</span>);</span><br><span class="line">    GtkWidget *button_7 = gtk_button_new_with_label(<span class="string">"7"</span>);</span><br><span class="line">    GtkWidget *button_8 = gtk_button_new_with_label(<span class="string">"8"</span>);</span><br><span class="line">    GtkWidget *button_9 = gtk_button_new_with_label(<span class="string">"9"</span>);</span><br><span class="line">    GtkWidget *button_add = gtk_button_new_with_label(<span class="string">"+"</span>);</span><br><span class="line">    GtkWidget *button_minus = gtk_button_new_with_label(<span class="string">"-"</span>);</span><br><span class="line">    GtkWidget *button_mul = gtk_button_new_with_label(<span class="string">"*"</span>);</span><br><span class="line">    GtkWidget *button_div = gtk_button_new_with_label(<span class="string">"/"</span>);</span><br><span class="line">    GtkWidget *button_equal = gtk_button_new_with_label(<span class="string">"="</span>);</span><br><span class="line">    GtkWidget *button_delete = gtk_button_new_with_label(<span class="string">"c"</span>);</span><br><span class="line">    <span class="comment">// 将table放入表格布局中</span></span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), entry, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_0, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_1, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_2, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_3, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_4, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_5, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_6, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_7, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_8, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_9, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_add, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_minus, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_mul , <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_div, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_equal, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_delete, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 显示</span></span><br><span class="line">    gtk_widget_show_all(window);</span><br><span class="line">    <span class="comment">// 循环</span></span><br><span class="line">    gtk_main();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o main main.c `pkg-config --libs -cflags gtk+-3.0`</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://zhuohc-com.oss-cn-hangzhou.aliyuncs.com/gtk%E5%AE%B9%E5%99%A8%E5%B8%83%E5%B1%80-%E8%AE%A1%E7%AE%97%E5%99%A81.png" alt="计算器"></p><h4 id="信号与回调函数"><a href="#信号与回调函数" class="headerlink" title="信号与回调函数"></a>信号与回调函数</h4><p>GTK采用了信号与回调函数来处理窗口外部传来的事件、消息或信号。当信号发生时，程序自动调用为信号连接的回调函数。</p><p>GTK中的“信号”实际上是一种软件中断。“中断”在我们生活中经常遇到，譬如，我正在房间里打游戏，突然送快递的来了，把正在玩游戏的我给“中断”了，我去签收快递( 处理中断 )，处理完成后，再继续玩我的游戏。GTK中的“信号”就是属于这么一种“中断”，当用户按下按钮的时候，就产生一个“中断”，相当于产生一个信号，接着就会处理这么一个“中断任务”(程序里体验为调用一个函数)。</p><p>“信号”在GTK中可以认为一种中断的标志，如按下按钮的标志为”pressed”,释放按钮的标志为”released”，这些标志就相当于 C语言的关键字一样，我们使用的时候必须完全按照它的名字来写。需要注意的是，每个控件的信号标志不一定都一样，如按钮（GtkButton）里有”pressed”信号，窗口(GtkWindow)里就没这个信号，每个控件具体有哪个信号，应该查看帮助文档来确定。</p><p>按钮的常用信号：</p><blockquote><p>“clicked” : 单击按钮时触发</p></blockquote><blockquote><p>“pressed” : 按下按钮时触发</p></blockquote><blockquote><p>“released” : 释放按钮时触发</p></blockquote><p><strong>信号注册函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// instance：信号发出者，可以认为我们操作的控件，如按下按钮，这个就为按钮指针</span></span><br><span class="line"><span class="comment">// detailed_signal：信号标志，如"pressed"</span></span><br><span class="line"><span class="comment">// c_handler：回调函数的名称，需要用G_CALLBACK()进行转换</span></span><br><span class="line"><span class="comment">// data：给回调函数传的参数，gpointer 相当于C语言的 void *</span></span><br><span class="line"><span class="comment">// 返回值：注册函数的标志</span></span><br><span class="line"><span class="function">gulong <span class="title">g_signal_connect</span><span class="params">(gpointer instance, <span class="keyword">const</span> gchar *detailed_signal, GCallback c_handler, gpointer data)</span></span>;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g_signal_connect(button, <span class="string">"pressed"</span>,G_CALLBACK(callback), <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>当按下button按钮时，就会自动调用回调函数callback(相当于处理中断任务)，回调函数callback可以是任意函数，函数名字我们根据需要自行命名，如果不是库函数，我们还得定义这个回调函数，这里需要注意的是，回调函数的写法(返回值，参数)，不是我们想怎么写就怎么写，帮助文档里已经规定好了回调函数应该如何写，如果不按规定来写，可能产生意想不到的错误。</p><p><a href="https://developer.gnome.org/gtk3/stable/GtkWidget.html" target="_blank" rel="noopener">文档地址</a></p><p>回调函数的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callback</span><span class="params">(GtkButton *button,gpointer data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal_pressed</span><span class="params">(GtkButton *button, gpointer user_data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *text = gtk_button_get_label(button);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s----%s\n"</span>, (<span class="keyword">char</span> *) user_data, text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    gtk_init(&amp;argc, &amp;argv);</span><br><span class="line">    <span class="comment">// 创建窗口</span></span><br><span class="line">    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);</span><br><span class="line">    <span class="comment">// 设置窗口边框与内部控件的间隔为15</span></span><br><span class="line">    gtk_container_set_border_width(GTK_CONTAINER(window), <span class="number">15</span>);</span><br><span class="line">    <span class="comment">// 创建一个button</span></span><br><span class="line">    GtkWidget *button = gtk_button_new_with_label(<span class="string">"button1"</span>);</span><br><span class="line">    <span class="comment">// 将button添加到window中</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(window), button);</span><br><span class="line">    <span class="comment">// 创建一个按钮信号</span></span><br><span class="line">    g_signal_connect(button, <span class="string">"pressed"</span>, G_CALLBACK(deal_pressed), <span class="string">"hello, world"</span>);</span><br><span class="line">    <span class="comment">// 显示控件</span></span><br><span class="line">    gtk_widget_show_all(window);</span><br><span class="line">    gtk_main();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完成计算器计算功能"><a href="#完成计算器计算功能" class="headerlink" title="完成计算器计算功能"></a>完成计算器计算功能</h4><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">50</span>] = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal_num</span><span class="params">(GtkButton *button, gpointer data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *text = gtk_button_get_label(button);</span><br><span class="line">    <span class="comment">// 如果是退格键</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(<span class="string">"c"</span>, text)) &#123;</span><br><span class="line">        buf[<span class="built_in">strlen</span>(buf) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="comment">// 连接buf和新传入的字符串</span></span><br><span class="line">        <span class="built_in">strcat</span>(buf, text);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(<span class="string">"="</span>, text)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"text=====##%s##\n"</span>, text);</span><br><span class="line">            <span class="comment">// 从一个字符串中读进与指定格式相符的数据</span></span><br><span class="line">            <span class="built_in">sscanf</span>(buf, <span class="string">"%d%c%d"</span>, &amp;a, &amp;c, &amp;b);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"---------001-----%c--\n"</span>, c);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'+'</span> == c) &#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(buf, <span class="string">"%d"</span>, a + b);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'-'</span> == c) &#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(buf, <span class="string">"%d"</span>, a - b);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'*'</span> == c) &#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(buf, <span class="string">"%d"</span>, a * b);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'/'</span> == c) &#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(buf, <span class="string">"%d"</span>, a / b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    gtk_entry_set_text(GTK_ENTRY(data), buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    gtk_init(&amp;argc, &amp;argv);</span><br><span class="line">    <span class="comment">// 创建窗口</span></span><br><span class="line">    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);</span><br><span class="line">    <span class="comment">// 创建5行4列的表格容器</span></span><br><span class="line">    GtkWidget *table = gtk_table_new(<span class="number">5</span>, <span class="number">4</span>, TRUE);</span><br><span class="line">    <span class="comment">// 将table放入到容器中</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(window), table);</span><br><span class="line">    <span class="comment">// 创建一个行编辑</span></span><br><span class="line">    GtkWidget *entry = gtk_entry_new();</span><br><span class="line">    <span class="comment">// 设置行编辑的内容</span></span><br><span class="line">    gtk_entry_set_text(GTK_ENTRY(entry), <span class="string">"2+2=4"</span>);</span><br><span class="line">    <span class="comment">// 设置行编辑不允许编辑</span></span><br><span class="line">    gtk_editable_set_editable(GTK_EDITABLE(entry), FALSE);</span><br><span class="line">    <span class="comment">// 创建0-9数字按钮，+-×/=c功能按钮</span></span><br><span class="line">    GtkWidget *button_0 = gtk_button_new_with_label(<span class="string">"0"</span>);</span><br><span class="line">    GtkWidget *button_1 = gtk_button_new_with_label(<span class="string">"1"</span>);</span><br><span class="line">    GtkWidget *button_2 = gtk_button_new_with_label(<span class="string">"2"</span>);</span><br><span class="line">    GtkWidget *button_3 = gtk_button_new_with_label(<span class="string">"3"</span>);</span><br><span class="line">    GtkWidget *button_4 = gtk_button_new_with_label(<span class="string">"4"</span>);</span><br><span class="line">    GtkWidget *button_5 = gtk_button_new_with_label(<span class="string">"5"</span>);</span><br><span class="line">    GtkWidget *button_6 = gtk_button_new_with_label(<span class="string">"6"</span>);</span><br><span class="line">    GtkWidget *button_7 = gtk_button_new_with_label(<span class="string">"7"</span>);</span><br><span class="line">    GtkWidget *button_8 = gtk_button_new_with_label(<span class="string">"8"</span>);</span><br><span class="line">    GtkWidget *button_9 = gtk_button_new_with_label(<span class="string">"9"</span>);</span><br><span class="line">    GtkWidget *button_add = gtk_button_new_with_label(<span class="string">"+"</span>);</span><br><span class="line">    GtkWidget *button_minus = gtk_button_new_with_label(<span class="string">"-"</span>);</span><br><span class="line">    GtkWidget *button_mul = gtk_button_new_with_label(<span class="string">"*"</span>);</span><br><span class="line">    GtkWidget *button_div = gtk_button_new_with_label(<span class="string">"/"</span>);</span><br><span class="line">    GtkWidget *button_equal = gtk_button_new_with_label(<span class="string">"="</span>);</span><br><span class="line">    GtkWidget *button_delete = gtk_button_new_with_label(<span class="string">"c"</span>);</span><br><span class="line">    <span class="comment">// 将table放入表格布局中</span></span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), entry, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_0, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_1, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_2, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_3, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_4, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_5, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_6, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_7, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_8, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_9, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_add, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_minus, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_mul, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_div, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_equal, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    gtk_table_attach_defaults(GTK_TABLE(table), button_delete, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.注册信号函数，把entry传给回调函数deal_num()</span></span><br><span class="line">    g_signal_connect(button_0, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_1, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_2, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_3, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_4, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_5, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_6, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_7, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_8, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_9, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line"></span><br><span class="line">    g_signal_connect(button_add, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_mul, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_div, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_minus, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line">    g_signal_connect(button_equal, <span class="string">"pressed"</span>, G_CALLBACK(deal_num), entry);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示</span></span><br><span class="line">    gtk_widget_show_all(window);</span><br><span class="line">    <span class="comment">// 循环</span></span><br><span class="line">    gtk_main();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果(并不完美)</p><p><img src="https://zhuohc-com.oss-cn-hangzhou.aliyuncs.com/gtk-%E8%AE%A1%E7%AE%97%E5%99%A8.gif" alt="计算器"></p><h4 id="glade"><a href="#glade" class="headerlink" title="glade"></a>glade</h4><p>glade是GTK＋的界面辅助设计工具，可以通过拖放控件的方式快速设计出用户界面，这样的优势在于在设计的同时能直观地看到界面上的控件，并且可以随时调整界面上的设计。</p><p>用glade设计的图形用户界面是以XML格式的文件保存，它描述了控件的结构、每个控件的属性。用户可以动态加载这个界面文件。而且，界面和程序逻辑是完全分离，用户修改了界面，也不需要重新编译程序。</p><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ubuntu </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install glade libglade2-dev</span></span><br></pre></td></tr></table></figure><p>笔者是在软件中心直接下载安装的</p><p><strong>代码引入</strong></p><p>glade文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Generated with glade 3.22.1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interface</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">requires</span> <span class="attr">lib</span>=<span class="string">"gtk+"</span> <span class="attr">version</span>=<span class="string">"3.20"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">"GtkWindow"</span> <span class="attr">id</span>=<span class="string">"window1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>window1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"can_focus"</span>&gt;</span>False<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">translatable</span>=<span class="string">"yes"</span>&gt;</span>第一个顶层窗口<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">type</span>=<span class="string">"titlebar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">placeholder</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">"GtkLayout"</span> <span class="attr">id</span>=<span class="string">"layout1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>layout1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"visible"</span>&gt;</span>True<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"can_focus"</span>&gt;</span>False<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">"GtkEntry"</span> <span class="attr">id</span>=<span class="string">"entry1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>search_input<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"width_request"</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"height_request"</span>&gt;</span>40<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"visible"</span>&gt;</span>True<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"can_focus"</span>&gt;</span>True<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">translatable</span>=<span class="string">"yes"</span>&gt;</span>search_input<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"primary_icon_tooltip_text"</span> <span class="attr">translatable</span>=<span class="string">"yes"</span>&gt;</span>search_input<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">packing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"x"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"y"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">packing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">"GtkButton"</span> <span class="attr">id</span>=<span class="string">"button1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"label"</span> <span class="attr">translatable</span>=<span class="string">"yes"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>search_button<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"width_request"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"height_request"</span>&gt;</span>40<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"visible"</span>&gt;</span>True<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"can_focus"</span>&gt;</span>True<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"receives_default"</span>&gt;</span>True<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">packing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"x"</span>&gt;</span>220<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"y"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">packing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">"GtkButton"</span> <span class="attr">id</span>=<span class="string">"button2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"label"</span> <span class="attr">translatable</span>=<span class="string">"yes"</span>&gt;</span>查看<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>show_button<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"width_request"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"height_request"</span>&gt;</span>40<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"visible"</span>&gt;</span>True<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"can_focus"</span>&gt;</span>True<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"receives_default"</span>&gt;</span>True<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">packing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"x"</span>&gt;</span>350<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"y"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">packing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    gtk_init(&amp;argc, &amp;argv);</span><br><span class="line">    <span class="comment">// 创建GtkBuilder对象</span></span><br><span class="line">    GtkBuilder *builder = gtk_builder_new();</span><br><span class="line">    <span class="comment">// 读取glade文件</span></span><br><span class="line">    <span class="keyword">if</span>(!gtk_builder_add_from_file(builder, <span class="string">"../1.glade"</span>, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"无法打开文件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取窗口指针</span></span><br><span class="line">    GtkWidget *window1 = GTK_WIDGET(gtk_builder_get_object(builder, <span class="string">"window1"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示</span></span><br><span class="line">    gtk_widget_show_all(window1);</span><br><span class="line">    <span class="comment">// 循环</span></span><br><span class="line">    gtk_main();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图片控件"><a href="#图片控件" class="headerlink" title="图片控件"></a>图片控件</h4><p>图片控件的创建：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename：图片的名字，带路径的话需要加上路径( 相对或绝对 )</span></span><br><span class="line"><span class="function">GtkWidget *<span class="title">gtk_image_new_from_file</span><span class="params">( <span class="keyword">const</span> gchar *filename )</span></span>;</span><br></pre></td></tr></table></figure><p>通过上面方法创建的图片控件，以图片默认大小来显示，不能修改其大小。如果要改变图片的大小，我们要借助图片资源对象GdkPixbuf，需要注意的是，GdkPixbuf不属于控件类，它以 Gdk 开头。</p><p>图片资源对象pixbuf的创建：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename：图片的名字，带路径的话需要加上路径( 相对或绝对 )</span></span><br><span class="line"><span class="comment">// error：储存错误的指针</span></span><br><span class="line"><span class="comment">// 返回值：pixbuf指针</span></span><br><span class="line"><span class="function">GdkPixbuf *<span class="title">gdk_pixbuf_new_from_file</span><span class="params">(<span class="keyword">const</span> gchar *filename, GError **error)</span></span>;</span><br></pre></td></tr></table></figure><p>设置图片的大小：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src：gdk_pixbuf_new_from_file()的返回值</span></span><br><span class="line"><span class="comment">// dest_width：图片的宽度</span></span><br><span class="line"><span class="comment">// dest_height：图片的高度</span></span><br><span class="line"><span class="comment">// interp_type：是一个枚举变量，标志图片的加载速度和质量，常用GDK_INTERP_BILINEAR</span></span><br><span class="line"><span class="comment">// 返回值：指定大小好的pixbuf指针</span></span><br><span class="line"><span class="function">GdkPixbuf *<span class="title">gdk_pixbuf_scale_simple</span><span class="params">(<span class="keyword">const</span> GdkPixbuf *src, <span class="keyword">int</span> dest_width, <span class="keyword">int</span> dest_height, GdkInterpType interp_type)</span></span>;</span><br></pre></td></tr></table></figure><p>通过gdk_pixbuf_new_from_file(), gdk_pixbuf_scale_simple()创建的pixbuf，它会动态分配空间，占用资源，用完后，需要人为释放资源。</p><p>释放资源：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_object_unref</span><span class="params">(GtkObject *object)</span></span>;</span><br></pre></td></tr></table></figure><p>通过pixbuf来创建图片控件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pixbuf：指定好大小的pixbuf</span></span><br><span class="line"><span class="comment">// 返回值：图片控件指针</span></span><br><span class="line"><span class="function">GtkWidget *<span class="title">gtk_image_new_from_pixbuf</span><span class="params">(GdkPixbuf *pixbuf )</span></span>;</span><br></pre></td></tr></table></figure><p>图片控件重新设置一张图片(pixbuf)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// image：图片控件指针</span></span><br><span class="line"><span class="comment">// pixbuf：指定好大小的pixbuf</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtk_image_set_from_pixbuf</span><span class="params">(GtkImage *image, GdkPixbuf *pixbuf )</span></span>;</span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    gtk_init(&amp;argc, &amp;argv);</span><br><span class="line">    <span class="comment">// 创建一个window</span></span><br><span class="line">    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);</span><br><span class="line">    <span class="comment">// 创建水平容器</span></span><br><span class="line">    GtkWidget *hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 添加到window</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(window), hbox);</span><br><span class="line">    <span class="comment">// 创建图片控件</span></span><br><span class="line">    GtkWidget *image1 = gtk_image_new_from_file(<span class="string">"../img/1.png"</span>);</span><br><span class="line">    <span class="comment">// 将image添加到box</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(hbox), image1);</span><br><span class="line">    <span class="comment">// 创建pixbuf</span></span><br><span class="line">    GdkPixbuf *src = gdk_pixbuf_new_from_file(<span class="string">"../img/1.png"</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 修改图片大小</span></span><br><span class="line">    GdkPixbuf *dst = gdk_pixbuf_scale_simple(src, <span class="number">100</span>, <span class="number">100</span>, GDK_INTERP_BILINEAR);</span><br><span class="line">    GtkWidget *image2 = gtk_image_new_from_pixbuf(dst);</span><br><span class="line">    <span class="comment">// 释放pxibuf资源</span></span><br><span class="line">    g_object_unref(src);</span><br><span class="line">    g_object_unref(dst);</span><br><span class="line">    <span class="comment">// 将image2添加到box</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(hbox), image2);</span><br><span class="line">    <span class="comment">// 获取控件里的pixbuf</span></span><br><span class="line">    GdkPixbuf *tmp = gtk_image_get_pixbuf(GTK_IMAGE(image2));</span><br><span class="line">    GtkWidget *image3 = gtk_image_new_from_pixbuf(tmp);</span><br><span class="line">    g_object_unref(tmp);</span><br><span class="line">    gtk_container_add(GTK_CONTAINER(hbox), image3);</span><br><span class="line">    <span class="comment">// 给创建的图片控件重新设置图片</span></span><br><span class="line">    GtkWidget *image4 = gtk_image_new_from_file(<span class="string">"../img/1.png"</span>);</span><br><span class="line">    gtk_container_add(GTK_CONTAINER(hbox), image4);</span><br><span class="line">    src = gdk_pixbuf_new_from_file(<span class="string">"../img/2.png"</span>, <span class="literal">NULL</span>);</span><br><span class="line">    dst = gdk_pixbuf_scale_simple(src, <span class="number">200</span>, <span class="number">200</span>, GDK_INTERP_BILINEAR);</span><br><span class="line">    gtk_image_set_from_pixbuf(GTK_IMAGE(image4), dst);</span><br><span class="line">    g_object_unref(src);</span><br><span class="line">    g_object_unref(dst);</span><br><span class="line">    <span class="comment">// 显示所有控件</span></span><br><span class="line">    gtk_widget_show_all(window);</span><br><span class="line">    <span class="comment">// 循环</span></span><br><span class="line">    gtk_main();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进度条控件"><a href="#进度条控件" class="headerlink" title="进度条控件"></a>进度条控件</h4><p><a href="https://developer.gnome.org/gtk3/stable/GtkProgressBar.html#gtk-progress-bar-get-fraction" target="_blank" rel="noopener">文档</a></p><p>进度条的创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回值：进度条指针</span></span><br><span class="line"><span class="function">GtkWidget *<span class="title">gtk_progress_bar_new</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>设置进度条显示的进度比例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pbar：需要操作的进度条</span></span><br><span class="line"><span class="comment">// fraction：0.0到1.0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtk_progress_bar_set_fraction</span><span class="params">(GtkProgressBar *pbar, gdouble fraction)</span></span>;</span><br></pre></td></tr></table></figure><p>获取进度条显示的进度比例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pbar：需要操作的进度条</span></span><br><span class="line"><span class="comment">// 返回值：进度比例</span></span><br><span class="line"><span class="function">gdouble  <span class="title">gtk_progress_bar_get_fraction</span> <span class="params">(GtkProgressBar *pbar)</span></span>;</span><br></pre></td></tr></table></figure><p>设置滑槽上的文本显示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pbar：需要操作的进度条</span></span><br><span class="line"><span class="comment">// text：设置的文本内容</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtk_progress_bar_set_text</span><span class="params">(GtkProgressBar *pbar, gchar *text)</span></span>;</span><br></pre></td></tr></table></figure><p>设置进度条的移动方向gtk+-2版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pbar：需要操作的进度条</span></span><br><span class="line"><span class="comment">// orientation：移动方向，它是一个枚举变量</span></span><br><span class="line"><span class="comment">// GTK_PROGRESS_LEFT_TO_RIGHT：从左向右 </span></span><br><span class="line"><span class="comment">// GTK_PROGRESS_RIGHT_TO_LEFT：从右向左 </span></span><br><span class="line"><span class="comment">// GTK_PROGRESS_BOTTOM_TO_TOP：从下向上 </span></span><br><span class="line"><span class="comment">// GTK_PROGRESS_TOP_TO_BOTTOM：从上向下</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtk_progress_bar_set_orientation</span><span class="params">(GtkProgressBar *pbar, GtkProgressBarOrientation orientation)</span></span>;</span><br></pre></td></tr></table></figure><p>获取进度条的方向gtk+-2版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pbar：需要操作的进度条</span></span><br><span class="line"><span class="comment">// 返回值：进度条的方向，它是一个枚举类型</span></span><br><span class="line">GtkProgressBarOrientationgtk_progress_bar_get_orientation(GtkProgressBar *pbar);</span><br></pre></td></tr></table></figure><p>设置进度条的移动方向gtk+-3版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtk_progress_bar_set_inverted</span> <span class="params">(GtkProgressBar *pbar, gboolean inverted)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gboolean <span class="title">gtk_progress_bar_get_inverted</span> <span class="params">(GtkProgressBar *pbar)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数，切换进度条的移动方向</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toggle_orientation</span><span class="params">(GtkWidget *widget, gpointer data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (gtk_progress_bar_get_inverted(GTK_PROGRESS_BAR(data)) ) &#123;</span><br><span class="line">        <span class="keyword">case</span> TRUE:</span><br><span class="line">            gtk_progress_bar_set_inverted(GTK_PROGRESS_BAR(data), FALSE);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FALSE:</span><br><span class="line">            gtk_progress_bar_set_inverted(GTK_PROGRESS_BAR(data), TRUE);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数，更新进度条，这样可以看到进度条的移动</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callback</span><span class="params">(GtkWidget *widget, gpointer data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gdouble new_val = gtk_progress_bar_get_fraction(GTK_PROGRESS_BAR(data)) +<span class="number">0.05</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (new_val &gt; <span class="number">1.0</span>) &#123;</span><br><span class="line">        new_val = <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置进度条新值</span></span><br><span class="line">    gtk_progress_bar_set_fraction(GTK_PROGRESS_BAR(data), new_val);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.gtk环境的初始化</span></span><br><span class="line">    gtk_init(&amp;argc, &amp;argv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建一个窗口</span></span><br><span class="line">    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);</span><br><span class="line">    <span class="comment">//设置窗口的标题</span></span><br><span class="line">    gtk_window_set_title(GTK_WINDOW(window), <span class="string">"gtk_progress_bar"</span>);</span><br><span class="line">    <span class="comment">//设置窗口边框宽度</span></span><br><span class="line">    gtk_container_set_border_width(GTK_CONTAINER(window), <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.设置窗口的最小大小</span></span><br><span class="line">    gtk_widget_set_size_request(window, <span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.窗口关联destroy信号到gtk_main_quit</span></span><br><span class="line">    g_signal_connect(window, <span class="string">"destroy"</span>, G_CALLBACK(gtk_main_quit), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建一个垂直容器</span></span><br><span class="line">    GtkWidget *vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">//将vbox添加到window中</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(window), vbox);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.创建一个进度条</span></span><br><span class="line">    GtkWidget *progress = gtk_progress_bar_new();</span><br><span class="line">    <span class="comment">//将progress添加到vbox中</span></span><br><span class="line">    gtk_container_add(GTK_CONTAINER(vbox), progress);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.设置进度条的百分比为50%</span></span><br><span class="line">    gtk_progress_bar_set_fraction(GTK_PROGRESS_BAR(progress), <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.设置进度条上显示的文字</span></span><br><span class="line">    gtk_progress_bar_set_text(GTK_PROGRESS_BAR(progress), <span class="string">"some text"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//9.添加一个button1按钮,切换方向</span></span><br><span class="line">    GtkWidget *button1 = gtk_button_new_with_label(<span class="string">"right to lift"</span>);</span><br><span class="line">    gtk_container_add(GTK_CONTAINER(vbox), button1);</span><br><span class="line">    g_signal_connect(button1, <span class="string">"clicked"</span>, G_CALLBACK(    toggle_orientation   ), progress);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//10.添加一个button2，移动进度条</span></span><br><span class="line">    GtkWidget *button2 = gtk_button_new_with_label(<span class="string">"add"</span>);</span><br><span class="line">    gtk_container_add(GTK_CONTAINER(vbox), button2);</span><br><span class="line">    g_signal_connect(button2, <span class="string">"clicked"</span>, G_CALLBACK(callback), progress);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//11.显示所欲窗口</span></span><br><span class="line">    gtk_widget_show_all(window);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//12.主事件循环</span></span><br><span class="line">    gtk_main();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;gdk-介绍&quot;&gt;&lt;a href=&quot;#gdk-介绍&quot; class=&quot;headerlink&quot; title=&quot;gdk+介绍&quot;&gt;&lt;/a&gt;gdk+介绍&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;gtk+是c语言编写的用于开发图形界面程序的函数库。gtk+来源于gimp（gnu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ffmpeg录制基础</title>
    <link href="http://www.zhuohc.com/2019/07/24/ffmpeg%E5%BD%95%E5%88%B6%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.zhuohc.com/2019/07/24/ffmpeg录制基础/</id>
    <published>2019-07-24T01:21:02.000Z</published>
    <updated>2019-07-24T01:55:00.296Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ffmpeg录制功能"><a href="#ffmpeg录制功能" class="headerlink" title="ffmpeg录制功能"></a>ffmpeg录制功能</h4><blockquote><p>ffmpeg第一步：录制音视频</p></blockquote><h4 id="录制设备查询"><a href="#录制设备查询" class="headerlink" title="录制设备查询"></a>录制设备查询</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  $ ffmpeg -hide_banner -devices</span><br><span class="line">Devices:</span><br><span class="line"> D. = Demuxing supported</span><br><span class="line"> .E = Muxing supported</span><br><span class="line"> --</span><br><span class="line"> DE alsa            ALSA audio output</span><br><span class="line"> DE fbdev           Linux framebuffer</span><br><span class="line"> D  iec61883        libiec61883 (new DV1394) A/V input device</span><br><span class="line"> D  jack            JACK Audio Connection Kit</span><br><span class="line"> D  kmsgrab         KMS screen capture</span><br><span class="line"> D  lavfi           Libavfilter virtual input device</span><br><span class="line"> DE oss             OSS (Open Sound System) playback</span><br><span class="line"> DE pulse           Pulse audio output</span><br><span class="line">  E sdl,sdl2        SDL2 output device</span><br><span class="line"> DE video4linux2,v4l2 Video4Linux2 output device</span><br><span class="line"> D  x11grab         X11 screen capture, using XCB</span><br><span class="line">  E xv              XV (XVideo) output device</span><br></pre></td></tr></table></figure><p>D：输入设备</p><p>E：输出设备 </p><p><a href="https://ffmpeg.org/ffmpeg-devices.html#Input-Devices" target="_blank" rel="noopener">ffmpeg输入设备列表</a></p><blockquote><p>alsa</p><blockquote><p>音频</p><p>ALSA是Advanced Linux Sound Architecture的缩写，高级Linux声音架构的简称,它在Linux操作系统上提供了音频和MIDI（Musical Instrument Digital Interface，音乐设备数字化接口）的支持，需要安装libasound库</p></blockquote><p>android_camera</p><blockquote><p>音视频</p><p>Android相机输入设备。 此输入设备使用Android Camera2 NDK API，该API可在API级别为24+的设备上使用。在配置期间自动检测android_camera的可用性。 该设备允许从Android设备上的所有摄像头进行捕获，这些摄像头集成在Camera2 NDK API中。 可用的摄像机在内部枚举，可以使用camera_index参数进行选择。输入文件字符串被丢弃。 通常，后置摄像头的索引为0，而前置摄像头的索引为1。</p></blockquote><p>avfoundation</p><blockquote><p>音视频</p><p>苹果设备</p></blockquote><p>bktr</p><blockquote><p>BSD 视频输入设备</p></blockquote><p>decklink</p><blockquote><p>BlackMagic Decklink是一款影像采集编辑产品，接口类型PCI-33/66、PCI-X 133&amp;100MHz 。</p></blockquote><p>dshow</p><blockquote><p>Windows DirectShow input device.</p></blockquote><p>fbdev</p><blockquote><p>Linux framebuffer（Linux帧缓冲）输入设备，只能录制终端的视频</p><p>Linux framebuffer是一种独立于硬件的图像抽象层，它用于在计算机屏幕上显示图像,通常是在控制台（环境）。它可以通过一个文件设备节点访问，通常为：<code>/dev/fb0</code></p></blockquote><p>gdigrab</p><blockquote><p>Win32 GDI 屏幕截取设备</p><p>这个设备允许你截取显示在Windows（系统）上的屏幕区域。</p></blockquote><p>iec61883</p><blockquote><p>使用<code>iec61883</code>的FireWire（火线） DV/HDV输入设备。</p><p>要允许这个输入设备，需要<code>libiec61883</code>, <code>libraw1394</code> 和 <code>libavc1394</code>被安装到系统中。此外还要在编译时配置<code>--enable-libiec61883</code>以支持。</p></blockquote><p>jack</p><blockquote><p>JACK输入设备。</p><p>为了能使用JACK设备，需要系统上存在<code>libjack</code></p></blockquote><p>kmsgrab</p><p>lavfi</p><blockquote><p><code>Libavfilter</code>输入虚拟设备</p><p>这个输入设备可以从<code>libavfilter</code>滤镜链图的一个开放输出端口读取数据。</p><p>对于每个滤镜链图开放输出端口，这个输入设备将创建一个对应的流映射到这个端口进行输出。当前只支持视频数据。滤镜链图是通过选项<code>graph</code>描述的。</p></blockquote><p>libcdio</p><blockquote><p>基于<code>libcdio</code>的音乐CD输入设备。</p><p>需要系统中有<code>libcdio</code>才能启用，且编译时需要用<code>--enable-libcdio</code>配置选项允许。</p></blockquote><p>libdc1394</p><blockquote><p>IIDC1394输入设备，其基于<code>libdc1394</code>和<code>libraw1394</code></p><p>编译允许需要配置<code>--enable-libdc1394</code></p></blockquote><p>openal</p><blockquote><p>这个OpenAL输入设备支持在所有实现了<code>OpenAL 1.1</code>的系统上进行音频捕获。</p><p>要编译使用它需要系统包含<code>OpenAL</code>头和<code>libraries</code>库，并且设置编译选项<code>--enable-openal</code></p></blockquote><p>oss</p><p>pulse</p><blockquote><p>PulseAudio（脉冲音频）输入设备</p><p>要使用须编译配置设置<code>--enable-libpulse</code></p></blockquote><p>sndio</p><blockquote><p>sndio输入设备。</p><p>要使用它需要系统安装并配置有<code>libsndio</code>库</p></blockquote><p>video4linux2, v4l2</p><blockquote><p>Video4Linux2 输入视频设备</p><p>“v4l2”是”video4linux2”的别名</p><p>编译需要<code>v4l-utiles</code>支持（<code>--enable-libv4l2</code>编译选项被配置），也可用于<code>-use_libv4l2</code>输入设备选项。</p><p>捕获的设备名是一个文件设备节点，通常Linux系统在设备（例如USB摄像头）插入到系统时自动创建这样的节点，会被命名为<code>/dev/videoN</code>，<code>N</code>是设备索引序号</p><p>Video4Linux设备通常只支持有限的分辨率（<code>width x height</code>）和帧率,通过<code>-list_formats all</code>选项来获取支持情况。一些设备，例如电视卡可以支持1个或者多个标准，它支持的标准可以通过<code>-list_standards all</code>来了解。</p><p>时间戳时基单位为1microsecond。根据内核版本和配置，时间戳可以基于实时间（real time clock——绝对时间，一种起源于Unix的表示方式）或者单调时钟（monotonic clock——通常源自启动时间，不受NTP或者手动改变）。<code>-timestamps abs</code>或者<code>-ts abs</code>选择启用实时间。</p></blockquote><p>vfwcap</p><blockquote><p>vfw（Video for Windows）捕获输入端</p><p>文件名必须是捕获设备索引，范围0-9可以用<code>list</code>作为文件名，将输出一个设备列表。任何数字外其它文件名被视作设备索引0。</p></blockquote><p>x11grab</p><blockquote><p>X11 视频输入设备</p><p>使用需要<code>libxcb</code>库，它会在编译时自动检测。</p></blockquote></blockquote><h5 id="fbdev：-linux终端录制设备"><a href="#fbdev：-linux终端录制设备" class="headerlink" title="fbdev： linux终端录制设备"></a>fbdev： linux终端录制设备</h5><p>查看使用指定采集设备参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ffmpeg -hide_banner -h demuxer=fbdev</span><br><span class="line">Demuxer fbdev [Linux framebuffer]:</span><br><span class="line">fbdev indev AVOptions:</span><br><span class="line">  -framerate         &lt;video_rate&gt; .D.......  (default "25")</span><br><span class="line"><span class="meta">#</span> framerate 帧数 默认25帧</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo ffmpeg -framerate 30  -f fbdev -i /dev/fb0 output.mp4</span><br></pre></td></tr></table></figure><h5 id="v412：linux摄像头录制设备"><a href="#v412：linux摄像头录制设备" class="headerlink" title="v412：linux摄像头录制设备"></a>v412：linux摄像头录制设备</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ffmpeg -hide_banner -h demuxer=Video4Linux2</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>-standard</td><td>字符串</td><td>设置tv标准</td></tr><tr><td>-channel</td><td>整数</td><td>设置tv通道</td></tr><tr><td>-video_size</td><td>图像大小</td><td>设置采集视频频帧大小</td></tr><tr><td>-pixel_format</td><td>字符串</td><td>设置采集视频的分辨率</td></tr><tr><td>-input_format</td><td>字符串</td><td>设置采集视频的分辨率</td></tr><tr><td>-framerate</td><td>字符串</td><td>设置采集视频帧率</td></tr><tr><td>-list_formats</td><td>整数</td><td>列举输入视频信号的信息</td></tr><tr><td>-list_standards</td><td>整数</td><td>列举标准信息</td></tr><tr><td>-timestamps</td><td>整数</td><td>设置时间戳</td></tr><tr><td>-ts</td><td>整数</td><td>设置模拟器分析帧使用的时间戳</td></tr><tr><td>-use_libv4l2</td><td>布尔</td><td>使用第三方库libv412选项</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ffmpeg -hide_banner -f Video4Linux2 -list_formats all -i /dev/video0</span><br><span class="line"><span class="meta">#</span> /dev/video0根据自己的摄像头来设置</span><br></pre></td></tr></table></figure><h5 id="x11grab：linux桌面录制设备"><a href="#x11grab：linux桌面录制设备" class="headerlink" title="x11grab：linux桌面录制设备"></a>x11grab：linux桌面录制设备</h5><p><a href="https://trac.ffmpeg.org/wiki/Capture/Desktop" target="_blank" rel="noopener">桌面录制方法</a></p><p>linux环境下如果此方法报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cannot open display :0.0, error 1.</span><br><span class="line">:0.0: Input/output error</span><br></pre></td></tr></table></figure><p>则需要查看$DISPLAY， 在Linux/Unix类操作系统上, DISPLAY用来设置将图形显示到何处. 直接登陆图形界面或者登陆命令行界面后使用startx启动图形, DISPLAY环境变量将自动设置为:0:0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> echo $DISPLAY</span><br><span class="line">:1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :1+100,200 output.mp4</span><br></pre></td></tr></table></figure><blockquote><p>video_size 字符串 输入采集视频的分辨率</p><p>framerate 字符串 输入采集的视频帧率</p><p>-f 指定输入设备</p><p>-i 指定输入内容（此处为显示器）+100, 200 代表从100, 200处位移<br>使用pulse录制音频</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pactl list sources  # 查看全部输入设备</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ffmpeg -f pulse -i default pulse.wav</span><br></pre></td></tr></table></figure><p>同时录制视频和音频</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ffmpeg -video_size 1366x768 -framerate 25 -f x11grab -i :1 -f pulse -ac 2 -i 1 output.mkv</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :1+100,200 -f alsa -ac 2 -i hw:0 output.mkv</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;ffmpeg录制功能&quot;&gt;&lt;a href=&quot;#ffmpeg录制功能&quot; class=&quot;headerlink&quot; title=&quot;ffmpeg录制功能&quot;&gt;&lt;/a&gt;ffmpeg录制功能&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;ffmpeg第一步：录制音视频&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
    
      <category term="ffmpeg" scheme="http://www.zhuohc.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg封装与解封装基础</title>
    <link href="http://www.zhuohc.com/2019/07/24/ffmpeg%E5%B0%81%E8%A3%85%E4%B8%8E%E8%A7%A3%E5%B0%81%E8%A3%85%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.zhuohc.com/2019/07/24/ffmpeg封装与解封装基础/</id>
    <published>2019-07-24T01:20:23.000Z</published>
    <updated>2019-07-24T01:20:47.723Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ffmpeg封装与解封装"><a href="#ffmpeg封装与解封装" class="headerlink" title="ffmpeg封装与解封装"></a>ffmpeg封装与解封装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i input.mkv -vcodec copy -acodec copy output.mp4</span><br></pre></td></tr></table></figure><blockquote><p>-i 输入文件</p><p>-vcodec copy 视频编码处理方式</p><p>-acodec copy 音频编码处理方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i input.mp4 -vn -acodec copy output.aac  # 抽出音频</span><br><span class="line">$ ffmpeg -i input.mp4 -vcodec copy -an output.h264  # 抽出视频</span><br></pre></td></tr></table></figure><h5 id="提取YUV数据"><a href="#提取YUV数据" class="headerlink" title="提取YUV数据"></a>提取YUV数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ffmpeg -i input.mp4 -an -c:v rawvideo -pix_fmt yuv420p out.yuv</span><br></pre></td></tr></table></figure><blockquote><p>-i 输入设备</p><p>-an 不需要音频</p><p>-c:v 使用rawvideo对视频进行编码</p><p>-pix_fmt 像素格式</p></blockquote><p>播放源文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -video_size 1366x768 out.yuv</span><br></pre></td></tr></table></figure><blockquote><p>-video_size 指定像素</p></blockquote><h5 id="提取PCM数据"><a href="#提取PCM数据" class="headerlink" title="提取PCM数据"></a>提取PCM数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i input.mp4 -vn -ar 44100 -ac 2 -f s16le out.pcm</span><br></pre></td></tr></table></figure><blockquote><p>-i 输入设备</p><p>-vn 不需要视频</p><p>-ar 44100 -a 音频 read 音频采样率44.1k</p><p>-ac 2 -a 音频 c2 channel 2 双声道</p><p>-f 数据存储格式 s16le   s: 有符号的 </p></blockquote><p>播放源文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffplay -ar 44100 -ac 2 -f s16le out.pcm</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;ffmpeg封装与解封装&quot;&gt;&lt;a href=&quot;#ffmpeg封装与解封装&quot; class=&quot;headerlink&quot; title=&quot;ffmpeg封装与解封装&quot;&gt;&lt;/a&gt;ffmpeg封装与解封装&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="ffmpeg" scheme="http://www.zhuohc.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg直播基础</title>
    <link href="http://www.zhuohc.com/2019/07/24/ffmpeg%E7%9B%B4%E6%92%AD%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.zhuohc.com/2019/07/24/ffmpeg直播基础/</id>
    <published>2019-07-24T01:19:22.000Z</published>
    <updated>2019-07-24T01:19:56.380Z</updated>
    
    <content type="html"><![CDATA[<h5 id="直播推流"><a href="#直播推流" class="headerlink" title="直播推流"></a>直播推流</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -re -i out.mp4 -c copy -f flv rtmp://server/live/streamName</span><br></pre></td></tr></table></figure><blockquote><p>-re 保持本地视频和流媒体服务器帧率一致</p><p>-c 不做操作，直接复制</p><p>-f 格式</p></blockquote><h5 id="直播拉流"><a href="#直播拉流" class="headerlink" title="直播拉流"></a>直播拉流</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i rmtp://server/live/streamName -c copy dump.flv</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;直播推流&quot;&gt;&lt;a href=&quot;#直播推流&quot; class=&quot;headerlink&quot; title=&quot;直播推流&quot;&gt;&lt;/a&gt;直播推流&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="ffmpeg" scheme="http://www.zhuohc.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg滤镜基础</title>
    <link href="http://www.zhuohc.com/2019/07/24/ffmpeg%E6%BB%A4%E9%95%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.zhuohc.com/2019/07/24/ffmpeg滤镜基础/</id>
    <published>2019-07-24T01:18:29.000Z</published>
    <updated>2019-07-24T01:19:04.270Z</updated>
    
    <content type="html"><![CDATA[<h5 id="裁剪滤镜"><a href="#裁剪滤镜" class="headerlink" title="裁剪滤镜"></a>裁剪滤镜</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i output.mkv -vf crop=in_w-400:in_h-200 -c:v libx264 -c:a copy output.mp4</span><br></pre></td></tr></table></figure><blockquote><p>-i 输入</p><p>-vf -v 视频 f 滤镜 crop 裁剪滤镜</p><p>-c:v</p><p>-c:a copy 音频直接复制</p></blockquote><h5 id="视频裁剪"><a href="#视频裁剪" class="headerlink" title="视频裁剪"></a>视频裁剪</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i output.mkv -ss 00:00:00 -t 10 output.mp4</span><br></pre></td></tr></table></figure><blockquote><p>-ss 开始时间(时:分:秒)</p><p>-t 时常(秒)</p></blockquote><h5 id="视频合并"><a href="#视频合并" class="headerlink" title="视频合并"></a>视频合并</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -f concat -i inputs.txt output.mp4</span><br></pre></td></tr></table></figure><blockquote><p>-f  concat 拼接</p><p>-i 输入文件 inputs.txt 记录全部等待拼接的文件</p><p>inputs.txt每一行为“file filename”</p><pre><code>&gt; file &apos;out1.mp4&apos;&gt;&gt; file &apos;out2.mp4&apos;</code></pre><p>output.mp4 输出文件</p></blockquote><h5 id="视频转图片"><a href="#视频转图片" class="headerlink" title="视频转图片"></a>视频转图片</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i output.mp4 -r 1 -f image2 image-%3d.jpeg</span><br></pre></td></tr></table></figure><blockquote><p>-i 输入文件</p><p>-r 1, r 帧率， 1 每秒一张图片</p><p>-f image2, 转成image2格式</p><p>image-%3d.jpeg 输出文件</p></blockquote><h5 id="图片转视频"><a href="#图片转视频" class="headerlink" title="图片转视频"></a>图片转视频</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i image-%3d.jpeg output.mp4</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;裁剪滤镜&quot;&gt;&lt;a href=&quot;#裁剪滤镜&quot; class=&quot;headerlink&quot; title=&quot;裁剪滤镜&quot;&gt;&lt;/a&gt;裁剪滤镜&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ffmpeg命令基础</title>
    <link href="http://www.zhuohc.com/2019/07/24/ffmpeg%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.zhuohc.com/2019/07/24/ffmpeg命令基础/</id>
    <published>2019-07-24T01:16:46.000Z</published>
    <updated>2019-07-24T01:19:04.256Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ffmpeg基本流程"><a href="#ffmpeg基本流程" class="headerlink" title="ffmpeg基本流程"></a>ffmpeg基本流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">文件-&gt;音视频流: demuxer解封装</span><br><span class="line">音视频流-&gt;数据包: decoder解码</span><br><span class="line">数据包-&gt;音视频流: encoder编码</span><br><span class="line">音视频流-&gt;文件: muxer封装</span><br></pre></td></tr></table></figure><h4 id="ffmpeg基本定义"><a href="#ffmpeg基本定义" class="headerlink" title="ffmpeg基本定义"></a>ffmpeg基本定义</h4><ol><li>文件：也叫容器Container，比如mp4文件、flv文件等，容器的类型决定了信息被存放在文件中的位置。</li><li>音视频流： </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;ffmpeg基本流程&quot;&gt;&lt;a href=&quot;#ffmpeg基本流程&quot; class=&quot;headerlink&quot; title=&quot;ffmpeg基本流程&quot;&gt;&lt;/a&gt;ffmpeg基本流程&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="ffmpeg" scheme="http://www.zhuohc.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg视频基础</title>
    <link href="http://www.zhuohc.com/2019/07/24/ffmpeg%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.zhuohc.com/2019/07/24/ffmpeg视频基础/</id>
    <published>2019-07-24T01:15:39.000Z</published>
    <updated>2019-07-24T01:16:41.880Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>H264基本概念</p><blockquote><p>I帧： 关键帧、采用帧内压缩技术<br>P帧：向前参考帧，采用帧内压缩技术<br>B帧：双向参考帧，采用帧内压缩技术</p></blockquote><p>GOF:</p><blockquote><p>一组帧group of frame</p></blockquote><p>SPS:</p><blockquote><p>Sequence parameter set: 序列参数集：存放一组帧的存放帧数，参考帧数目，解码图像尺寸等</p></blockquote><p>PPS：</p><blockquote><p>picture parameter set: 图像参数集：存放熵编码模式选择标识、片组数目等</p></blockquote><h4 id="视频编解码器"><a href="#视频编解码器" class="headerlink" title="视频编解码器"></a>视频编解码器</h4><blockquote><p>x264：最流行的<br>x265：耗性能<br>openH264：支持svc视频技术<br>vp8: x264<br>vp9: x265</p></blockquote><h4 id="H264压缩技术"><a href="#H264压缩技术" class="headerlink" title="H264压缩技术"></a>H264压缩技术</h4><blockquote><p>帧内压缩：解决空域数据冗余技术</p><p>帧间压缩：解决时域数据冗余技术</p><p>整数离散余弦变换(DCT)：将空间上的相关性变为频域上无关的数据然后进行量化</p><p>CABAC压缩</p></blockquote><p><img src="https://zhuohc-com.oss-cn-hangzhou.aliyuncs.com/H264%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="H264结构图"></p><h4 id="H264编码分层"><a href="#H264编码分层" class="headerlink" title="H264编码分层"></a>H264编码分层</h4><blockquote><p>NAL层：network abstraction layer 视频数据网络抽象层<br>VCL层：video coding layer 视频数据编码层</p></blockquote><h4 id="码流"><a href="#码流" class="headerlink" title="码流"></a>码流</h4><p>SODB</p><blockquote><p>string of data bits 原始数据比特流，它是由vcl层产生的</p></blockquote><p>RBSP</p><blockquote><p>在SODB最后一位补1，不按字节对其则补0</p></blockquote><p>EBSP</p><blockquote></blockquote><p>NALU</p><blockquote><p>NAL HEADER + EBSP</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h4&gt;&lt;p&gt;H264基本概念&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I帧： 关键帧、采用帧内压缩技术&lt;br&gt;P帧：向前参考帧，采用帧内
      
    
    </summary>
    
    
      <category term="ffmpeg" scheme="http://www.zhuohc.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg音频基础</title>
    <link href="http://www.zhuohc.com/2019/07/24/ffmpeg%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.zhuohc.com/2019/07/24/ffmpeg音频基础/</id>
    <published>2019-07-24T01:11:21.000Z</published>
    <updated>2019-07-24T01:15:09.376Z</updated>
    
    <content type="html"><![CDATA[<p>2# 音频知识（未完工）</p><h4 id="声音的本质"><a href="#声音的本质" class="headerlink" title="声音的本质"></a>声音的本质</h4><blockquote><p>声音其实是一种能量波，因此也有频率和振幅的特征，频率对应于时间轴线，振幅对应于电平轴线。波是无限光滑的，弦线可以看成由无数点组成，由于存储空间是相对有限的，数字编码过程中，必须对弦线的点进行采样。</p></blockquote><h4 id="声音三要素"><a href="#声音三要素" class="headerlink" title="声音三要素"></a><a href="https://baike.baidu.com/item/%E5%A3%B0%E9%9F%B3%E5%90%AC%E8%A7%89" target="_blank" rel="noopener">声音三要素</a></h4><ol><li><p>音高/音调/音频： 客观上音高大小主要取决于声波基频的高低，频率高则音调高，反之则低，单位用赫兹(Hz）表示。儿童(高音区)-&gt;女生(高音区)-&gt;男生（低音区）</p></li><li><p>音量/响度/声强：常说的声音大小，主要取决于声波振幅的大小。</p></li><li><p>音色/音品：和材质相关（比如钢琴等），本质是谐波。</p></li></ol><p><img src="https://zhuohc-com.oss-cn-hangzhou.aliyuncs.com/%E9%9F%B3%E9%87%8F%E5%92%8C%E5%A3%B0%E8%B0%83.png" alt="音量和声调"></p><p>心理声学</p><blockquote><p>人类的听觉范围：20Hz-20kHz</p></blockquote><h4 id="音频量化过程"><a href="#音频量化过程" class="headerlink" title="音频量化过程"></a>音频量化过程</h4><p><img src="https://zhuohc-com.oss-cn-hangzhou.aliyuncs.com/%E9%9F%B3%E9%A2%91%E9%87%8F%E5%8C%96%E8%BF%87%E7%A8%8B.png" alt="音频量化过程"></p><ol><li>按横轴时间进行切割</li><li>按纵轴振幅(决定音量)进行切割</li><li>编码转成数字信号</li></ol><blockquote><p>采样大小：一个采样用多个bit存放，常用16位(2<sup>16</sup>=65535)，振幅<br>采样率：采样频率8k、16k、32k、44.1k、48k等 <a href="https://baike.baidu.com/item/音频采样率" target="_blank" rel="noopener">采样率概念</a><br>声道数：单声道、双声道、多声道</p></blockquote><p>码率计算</p><blockquote><p>音频流的码率=采样率×采样大小×声道数<br>例如：采样率44.1kHz、采样大小为16bit、双声道的pcm编码wav文件，码率=44.1k×16×2=1411.2kb/s</p></blockquote><h4 id="音频压缩技术"><a href="#音频压缩技术" class="headerlink" title="音频压缩技术"></a>音频压缩技术</h4><ol><li>消除音频冗余数据</li></ol><blockquote><p>删除人耳听觉范围外的音频信号：</p><blockquote><p>20Hz-20kHz</p></blockquote><p>被掩避掉的音频信号： </p><blockquote><p>频域遮蔽：</p><p>时域遮蔽：</p></blockquote></blockquote><ol start="2"><li>哈夫曼无损编码</li></ol><h4 id="音频编解码器"><a href="#音频编解码器" class="headerlink" title="音频编解码器"></a>音频编解码器</h4><p>常见的编解码器</p><blockquote><p>OPUS： 开源、rmtp协议不支持<br>AAC：收费、适合实时互动项目。<br>Vorbis：开源<br>Speex：开源、优势：还支持一些回音消除、降噪等处理办法<br>iLBC<br>AMR<br>G.711：与固定电话就行融合</p></blockquote><p>性能对比：</p><blockquote><p>OPUS &gt; AAC(常用) &gt; Vorbis<br>AAC： advanced audio coding<br>常见规格： AAC LC（低复杂度，码流128k）、AAC HE V1（）、 AAC HE V2<br>AAC LC + SBR = AAC HE V1<br>AAC HE V1 + PS = AAC HE V2</p></blockquote><p><img src="https://zhuohc-com.oss-cn-hangzhou.aliyuncs.com/aac%E8%A7%84%E6%A0%BC.png" alt="aac规格"></p><p>AAC格式：</p><blockquote><p>ADIF<br>ADTS</p></blockquote><p>AAC编码库：</p><blockquote><p>libfdk_aac(常用) &gt; ffmpeg aac &gt; libfaac &gt; libvo_aacenc</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2# 音频知识（未完工）&lt;/p&gt;
&lt;h4 id=&quot;声音的本质&quot;&gt;&lt;a href=&quot;#声音的本质&quot; class=&quot;headerlink&quot; title=&quot;声音的本质&quot;&gt;&lt;/a&gt;声音的本质&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;声音其实是一种能量波，因此也有频率和振幅的特征，频
      
    
    </summary>
    
    
      <category term="ffmpeg" scheme="http://www.zhuohc.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>zabbix入门基础</title>
    <link href="http://www.zhuohc.com/2018/11/16/zabbix%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.zhuohc.com/2018/11/16/zabbix入门基础/</id>
    <published>2018-11-16T09:40:04.000Z</published>
    <updated>2019-07-24T01:36:10.136Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装服务器端"><a href="#安装服务器端" class="headerlink" title="安装服务器端"></a>安装服务器端</h4><p><a href="https://www.zabbix.com/download" target="_blank" rel="noopener">官方</a> 1. 根据实际情况选择数据库 2. 根据实际情况选择操作系统</p><h4 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h4><p><img src="/wp-content/uploads/2018/11/2018-11-16-17-36-53%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt> 错误提示</p><blockquote><p>You are not able to choose some of the languages, because locales for them are not installed on the web server.</p></blockquote><pre><code># 选中zh-CN UTF-8sudo dpkg-reconfigure localessudo service apache2 restart</code></pre><h4 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h4><p><a href="https://www.zabbix.com/documentation/3.2/manual/installation/install_from_packages/agent_installation" target="_blank" rel="noopener">官方</a> <a href="https://tecadmin.net/install-zabbix-agent-on-centos-rhel/" target="_blank" rel="noopener">参考</a></p><h4 id="设置邮件报警"><a href="#设置邮件报警" class="headerlink" title="设置邮件报警"></a>设置邮件报警</h4><p>Media types <img src="/wp-content/uploads/2018/11/zabbix-email.png" alt> <img src="/wp-content/uploads/2018/11/zabbix-email-1.png" alt></p><h4 id="交换分区错误问题"><a href="#交换分区错误问题" class="headerlink" title="交换分区错误问题"></a>交换分区错误问题</h4><pre><code>Lack of free swap space</code></pre><p>现在的云主机默认没有交换分区 Configuration-&gt;Templates-&gt;Template OS Linux-&gt;Triggers-&gt;Lack of free swap space on {HOST.NAME}-&gt;Expression</p><pre><code>{Template OS Linux:system.swap.size[,pfree].last(0)}&lt;50改成{Template OS Linux:system.swap.size[,pfree].last(0)}&lt;50 and {Template OS Linux:system.swap.size[,free].last(0)}&lt;&gt;0</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装服务器端&quot;&gt;&lt;a href=&quot;#安装服务器端&quot; class=&quot;headerlink&quot; title=&quot;安装服务器端&quot;&gt;&lt;/a&gt;安装服务器端&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.zabbix.com/download&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="后端" scheme="http://www.zhuohc.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>centos7.2安装使用openResty</title>
    <link href="http://www.zhuohc.com/2018/11/14/centos7.2%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8openResty/"/>
    <id>http://www.zhuohc.com/2018/11/14/centos7.2安装使用openResty/</id>
    <published>2018-11-14T10:35:08.000Z</published>
    <updated>2019-07-23T05:51:43.850Z</updated>
    
    <content type="html"><![CDATA[<pre><code># 安装sudo yum install pcre-devel openssl-devel gcc curlwget https://openresty.org/download/openresty-1.13.6.2.tar.gztar -xzvf openresty-1.13.6.2.tar.gzcd openresty-1.13.6.2# 默认安装到/usr/local/openresty, 可以指定./configure --prefix=/your/path/openresty设置# 默认安装的组件https://openresty.org/cn/components.html./configure --with-luajit \            --without-http_redis2_module \            --with-http_iconv_module \            --with-http_postgres_modulemake &amp;&amp; sudo make install# 创建软链接ln -s /usr/local/openresty/nginx/sbin/nginx /usr/local/nginx# 启动/重启/停止nginx nginx -s reloadnginx -s stop</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul><li>openResty的nginx和普通nginx配置一致</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;# 安装
sudo yum install pcre-devel openssl-devel gcc curl
wget https://openresty.org/download/openresty-1.13.6.2.tar.gz
tar -xzvf o
      
    
    </summary>
    
      <category term="运维" scheme="http://www.zhuohc.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>linux环境nginx/php-fpm权限问题</title>
    <link href="http://www.zhuohc.com/2018/11/10/linux%E7%8E%AF%E5%A2%83nginx-php-fpm%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"/>
    <id>http://www.zhuohc.com/2018/11/10/linux环境nginx-php-fpm权限问题/</id>
    <published>2018-11-10T05:10:28.000Z</published>
    <updated>2019-07-24T01:36:23.340Z</updated>
    
    <content type="html"><![CDATA[<h4 id="当前用户hanchang-nginx用户nginx"><a href="#当前用户hanchang-nginx用户nginx" class="headerlink" title="当前用户hanchang, nginx用户nginx"></a>当前用户hanchang, nginx用户nginx</h4><pre><code>vim /etc/nginx/nginx.confuser hanchang;vim /etc/php-fpm.d/www.conf user = hanchanggroup = nginxlisten.owner = hanchanglisten.group = nginxlisten.mode = 0660</code></pre><h4 id="划重点-将当前用户加入nginx用户组"><a href="#划重点-将当前用户加入nginx用户组" class="headerlink" title="划重点 将当前用户加入nginx用户组"></a>划重点 将当前用户加入nginx用户组</h4><pre><code>sudo usermod -a -G nginx hanchang</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;当前用户hanchang-nginx用户nginx&quot;&gt;&lt;a href=&quot;#当前用户hanchang-nginx用户nginx&quot; class=&quot;headerlink&quot; title=&quot;当前用户hanchang, nginx用户nginx&quot;&gt;&lt;/a&gt;当前用户hancha
      
    
    </summary>
    
      <category term="运维" scheme="http://www.zhuohc.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu16.04安装及使用SVN</title>
    <link href="http://www.zhuohc.com/2018/10/09/ubuntu16.04%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8SVN/"/>
    <id>http://www.zhuohc.com/2018/10/09/ubuntu16.04安装及使用SVN/</id>
    <published>2018-10-09T10:21:49.000Z</published>
    <updated>2019-07-23T05:51:43.850Z</updated>
    
    <content type="html"><![CDATA[<h4 id="服务器端安装"><a href="#服务器端安装" class="headerlink" title="服务器端安装"></a>服务器端安装</h4><p><a href="https://help.ubuntu.com/lts/serverguide/subversion.html.en/" target="_blank" rel="noopener">官方推荐</a></p><pre><code># 安装包sudo apt install subversion apache2 libapache2-svn# 创建目录及两个svn项目mkdir svnsvnadmin create svn/doneself-appsvnadmin create svn/doneself-web# 多个项目公用一个权限文件cp -rf svn/doneself/conf/passwd snv/cp -rf svn/doneself/conf/authz snv/# 编辑每个项目的配置文件vim svn/doneself/conf/svnserve.conf[general]   # 匿名用户没有权限anon-access = none# 验证用户写权限auth-access = write# 账号密码文件路径password-db = ../../passwd # 权限文件路径authz-db = ../../authz# 编写账号密码文件vim svn/passwd[users] ui = ui  # 注意空格# 编写组和权限文件vim svn/[groups]ui = ui  [doneself-app:/]  ui = wr</code></pre><h4 id="启动svn服务器"><a href="#启动svn服务器" class="headerlink" title="启动svn服务器"></a>启动svn服务器</h4><pre><code># 启动,默认端口号3690sudo svnserve -d -r /home/svn# 结束sudo pkill svnserve</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;服务器端安装&quot;&gt;&lt;a href=&quot;#服务器端安装&quot; class=&quot;headerlink&quot; title=&quot;服务器端安装&quot;&gt;&lt;/a&gt;服务器端安装&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://help.ubuntu.com/lts/serverguide/subve
      
    
    </summary>
    
      <category term="办公" scheme="http://www.zhuohc.com/categories/%E5%8A%9E%E5%85%AC/"/>
    
      <category term="后端" scheme="http://www.zhuohc.com/categories/%E5%8A%9E%E5%85%AC/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="运维" scheme="http://www.zhuohc.com/categories/%E5%8A%9E%E5%85%AC/%E5%90%8E%E7%AB%AF/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>vue.js</title>
    <link href="http://www.zhuohc.com/2018/09/26/vuejs/"/>
    <id>http://www.zhuohc.com/2018/09/26/vuejs/</id>
    <published>2018-09-26T09:32:56.000Z</published>
    <updated>2019-07-23T05:51:43.850Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><pre><code># 安装nodejs# https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributionscurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -sudo apt-get install -y nodejs# 安装cnpmsudo npm install -g cnpm</code></pre><h4 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h4><pre><code>sudo cnpm install -g vue-cli</code></pre><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><pre><code>vue init webpack your-project cnpm install npm run dev  # 启动项目</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装nodejs&quot;&gt;&lt;a href=&quot;#安装nodejs&quot; class=&quot;headerlink&quot; title=&quot;安装nodejs&quot;&gt;&lt;/a&gt;安装nodejs&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# 安装nodejs
# https://nodejs.org/en/dow
      
    
    </summary>
    
      <category term="前端" scheme="http://www.zhuohc.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>centos7.2安装及使用docker</title>
    <link href="http://www.zhuohc.com/2018/09/08/centos7.2%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8docker/"/>
    <id>http://www.zhuohc.com/2018/09/08/centos7.2安装及使用docker/</id>
    <published>2018-09-08T06:52:53.000Z</published>
    <updated>2019-07-23T05:51:43.850Z</updated>
    
    <content type="html"><![CDATA[<pre><code># https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce# 卸载旧版本$ sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine# 安装依赖包$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2# 安装源$ sudo yum-config-manager  --add-repo https://download.docker.com/linux/centos/docker-ce.repo# 安装$ sudo yum install docker-ce# 启动$ sudo systemctl start docker$ sudo systemctl enable docker# 测试$ sudo docker run hello-world# 加入用户组(记得退出重新登录) https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user# 安装docker-compose$ sudo yum install epel-release$ sudo yum install python-pip$ sudo pip install docker-compose# 换源https://lug.ustc.edu.cn/wiki/mirrors/help/docker</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;# https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce
# 卸载旧版本
$ sudo yum remove docker docker-client docker
      
    
    </summary>
    
      <category term="后端" scheme="http://www.zhuohc.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="运维" scheme="http://www.zhuohc.com/categories/%E5%90%8E%E7%AB%AF/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>centos7.2安装使用sentry</title>
    <link href="http://www.zhuohc.com/2018/09/08/centos7.2%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8sentry/"/>
    <id>http://www.zhuohc.com/2018/09/08/centos7.2安装使用sentry/</id>
    <published>2018-09-08T06:48:41.000Z</published>
    <updated>2019-07-23T05:51:43.850Z</updated>
    
    <content type="html"><![CDATA[<pre><code># 先安装docker  https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce# 后安装sentry   https://github.com/getsentry/onpremise$ mkdir sentry$ cd sentry$ mkdir -p data/{sentry,postgres}$ git clone https://github.com/getsentry/onpremise$ cd onpremise$ docker-compose run --rm web config generate-secret-key # 创建一个secret key并配置到docker-compose.yml中的SENTRY_SECRET_KEY.$ docker-compose run --rm web upgrade # 创建数据库$ docker-compose up -d  # 后台执行</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;# 先安装docker  https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce
# 后安装sentry   https://github.com/getsentry
      
    
    </summary>
    
      <category term="运维" scheme="http://www.zhuohc.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>centos7.2使用rabbitMQ</title>
    <link href="http://www.zhuohc.com/2018/09/08/centos7.2%E4%BD%BF%E7%94%A8rabbitMQ/"/>
    <id>http://www.zhuohc.com/2018/09/08/centos7.2使用rabbitMQ/</id>
    <published>2018-09-08T06:45:54.000Z</published>
    <updated>2019-07-23T05:51:43.850Z</updated>
    
    <content type="html"><![CDATA[<pre><code># 安装 Erlangyum -y install epel-releaseyum -y updateyum -y install erlang socat# 查看是否安装成功erl -version# 安装rabbitMQwget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.10/rabbitmq-server-3.6.10-1.el7.noarch.rpmrpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.ascrpm -Uvh rabbitmq-server-3.6.10-1.el7.noarch.rpm# 启用,开机启动,状态systemctl start rabbitmq-serversystemctl enable rabbitmq-serversystemctl status rabbitmq-server# 启动图形界面管理rabbitmq-plugins enable rabbitmq_managementchown -R rabbitmq:rabbitmq /var/lib/rabbitmq/rabbitmqctl add_user admin StrongPassword  # 踩坑:密码不要以&apos;;&apos;结尾rabbitmqctl set_user_tags admin administratorrabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;# 自定义配置文件cd /etc/rabbitmqtouch rabbitmq.conf# 访问图形界面http://Your_Server_IP:15672/# api文档http://Your_Server_IP:15672/api</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;# 安装 Erlang
yum -y install epel-release
yum -y update
yum -y install erlang socat


# 查看是否安装成功
erl -version


# 安装rabbitMQ
wget h
      
    
    </summary>
    
      <category term="后端" scheme="http://www.zhuohc.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="运维" scheme="http://www.zhuohc.com/categories/%E5%90%8E%E7%AB%AF/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
</feed>
