<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[anaconda入门基础]]></title>
    <url>%2F2019%2F11%2F06%2Fanaconda%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[安装 官方安装 官方下载地址 archlinux安装 1➜ sudo pacman -S anaconda 验证 12➜ conda --versionconda 4.7.10 虚拟环境 创建 12# conda create --name &lt;env_name&gt; &lt;package_names&gt; &lt;package_names&gt; ....➜ conda create --name ml python=3.7.3 numpy pandas 进入/退出 12➜ conda activate ml➜ conda deactivate 列表 1234567891011(ml)$ conda info --envs# conda environments:#ml * /home/zhc/.conda/envs/mlbase /opt/anaconda# 或者(ml)$ conda env list# conda environments:#ml * /home/zhc/.conda/envs/mlbase /opt/anaconda 删除 1conda remove --name &lt;env_name&gt; --all 包管理 当期环境包列表 1(ml)$ conda list 当期环境安装包 123# (ml)$ conda install &lt;package_name&gt;(ml)$ conda install jupyter notebook # 安装jupyter notebook编辑器$ jupter notebook # 打开编辑器 卸载包 1(ml)$ conda remove &lt;package_name&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门基础]]></title>
    <url>%2F2019%2F11%2F06%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[概念 机器学习方式 监督式学习: 给一组数据一个对应的输出结果。从数据中挖掘相关性 非监督式学习: 通过预先引入的优化准则进行模型训练 强化学习/半监督式学习 机器学习目标 分类(监督式学习) 根据数据集目标的特征或者属性，划分到已有的分类中 常用算法: K近邻(KNN), 逻辑回归， 决策树， 朴素贝叶斯 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122# -*- coding: utf-8 -*-# https://www.imooc.com/video/20172# 图像展示import matplotlib.pyplot as pltfrom sklearn import datasets# 调用knn模型from sklearn.neighbors import KNeighborsClassifier# 引入准确率from sklearn.metrics import accuracy_score# 引入数据分离from sklearn.model_selection import train_test_splitdef load_data(): # 区分属性数据和结果数据 # 加载iris数据 iris = datasets.load_iris() # 属性数据 # print(iris.data) # 属性数据含义 # print(iris.feature_names) # 结果数据 # print(iris.target) # 结果数据含义 # print(iris.target_names) # 确认属性/结果数据类型 # print(type(iris.data), type(iris.target)) # 确认行数一致 # print(iris.data.shape, iris.target.shape) return iris.data, iris.target# 预测def knn_predict(data): # X输入数据赋值 y输出数据赋值 x = data[0] y = data[1] # knn临近值的设置 k = 5 # 创建实例 knn = KNeighborsClassifier(n_neighbors=k) # 模型训练 knn.fit(X=x, y=y) # 开始预测 x_test = [[1, 2, 3, 4], [2, 3, 4, 5], [2, 4, 1, 2]] results = knn.predict(x_test) print(results)def knn_pred(data): x = data[0] y = data[1] # knn临近值的设置 k = 5 # 创建实例 knn = KNeighborsClassifier(n_neighbors=k) # 模型训练 knn.fit(X=x, y=y) y_pred = knn.predict(x) print(y_pred) print(y_pred.shape) # 准确率计算 print(accuracy_score(y, y_pred))# 训练集与预测集 计算准确率def knn_test_data(data): # X输入数据赋值 y输出数据赋值 x = data[0] y = data[1] print(x.shape) print(y.shape) x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4) print(x_train.shape, x_test.shape, y_train.shape, y_test.shape) k = 5 knn = KNeighborsClassifier(n_neighbors=k) knn.fit(x_train, y_train) # 训练集预测 y_train_pred = knn.predict(x_train) print(accuracy_score(y_train, y_train_pred)) # 测试集预测 y_test_pred = knn.predict(x_test) print(accuracy_score(y_test, y_test_pred))# 获得最高准确率的k值def knn_n_neighbors(data): # X输入数据赋值 y输出数据赋值 x = data[0] y = data[1] k_range = list(range(1, 26)) score_train = [] score_test = [] x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4) for k in k_range: knn = KNeighborsClassifier(n_neighbors=k) knn.fit(x_train, y_train) # 训练集预测 y_train_pred = knn.predict(x_train) score_train.append(accuracy_score(y_train, y_train_pred)) # 测试集预测 y_test_pred = knn.predict(x_test) score_test.append(accuracy_score(y_test, y_test_pred)) # 展示k值与训练集测试集准确率关系 # plt.plot(k_range, score_train) # plt.xlabel('K(KNN MODEL)') # plt.ylabel('Training Accuracy') # plt.show() plt.plot(k_range, score_test) plt.xlabel('K(KNN MODEL)') plt.ylabel('Test Accuracy') plt.show()def index(): data = load_data() # knn_predict(data) # knn_pred(data) # knn_test_data(data) knn_n_neighbors(data)if __name__ == '__main__': index() 逻辑回归模型 用于解决分类问题的一种模型，计算其归属于某一类别的概率P(X), 常用与二分类问题，例如是否是垃圾邮件，是否是猫等等 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768# -*- coding: utf-8 -*-import pandas as pdfrom sklearn.model_selection import train_test_split# 逻辑回归模型from sklearn.linear_model import LogisticRegressionfrom sklearn import metricsdef index(): path = 'diabetes.csv' pima = pd.read_csv(path) print(pima.head()) # 怀孕次数， 胰岛素水平， 体重指数， 年龄 feature_names = ['Pregnancies', 'Insulin', 'BMI', 'Age'] # x, y赋值 x = pima[feature_names] y = pima.Outcome # 维度确认 print(x.shape) print(y.shape) # 数据分离 random_state=0表示每次都是相同的分离 x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=0) # 创建模型实例 logeg = LogisticRegression() logeg.fit(x_train, y_train) # 基于测试数据集的预测 y_pred = logeg.predict(x_test) # 使用准确率进行评估 print(metrics.accuracy_score(y_test, y_pred)) # 确认正负样本数据量 print(y_test.value_counts()) # 1的比例, 0的比例 print(y_test.mean(), 1-y_test.mean()) # 空准确率 print(max(y_test.mean(), 1-y_test.mean())) # 以上发现训练后的模型准确率基本等同与空准确率 # 引入混淆矩阵 # 计算混淆矩阵 confusion = metrics.confusion_matrix(y_test, y_pred) print(confusion) # 展示部分实际结果与预测结果(25组) print("true:", y_test.values[0:25]) print("pred:", y_pred[0:25]) # 四个因子赋值 tn = confusion[0][0] # True Negatives 预测准备 实际为负样本的数量 fp = confusion[0][1] # False Positives 预测错误 实际为父样本的数量 fn = confusion[1][0] # False Negatives 预测错误 实际为正样本的数量 tp = confusion[1][1] # True Positives 预测准确 实际为正样本的数量 print(tn, fp, fn, tp) print('准确率Accuracy: 所有样本中，预测正确的比例') print((tp + tn) / (tp + tn + fp + fn)) print('错误率Misclassification Rate： 所有样本中，预测错误的比例') print((fp + fn) / (tp + tn + fp + fn)) print('灵敏度(召回率)Sensitivity： 正样本中，预测正确的比例') recall = tp / (tp + fn) print(recall) print('特异性Specificity: 负样本中，预测正确的比例') print(tn / (tn + fp)) print('精确率Precision: 预测结果为正样本中， 预测正确的比例') precision = tp / (tp + fp) print(precision) print('F1分数Score: 综合判断指标') print((2*precision*recall) / (precision+recall))if __name__ == '__main__': index()]]></content>
  </entry>
  <entry>
    <title><![CDATA[docker入门基础]]></title>
    <url>%2F2019%2F09%2F27%2Fdocker%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[安装 centos7.2 1234567891011121314151617181920# https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce# 卸载旧版本$ sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine# 安装依赖包$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2# 安装源$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo# 安装$ sudo yum install docker-ce# 启动$ sudo systemctl start docker$ sudo systemctl enable docker# 测试$ sudo docker run hello-world# 加入用户组(记得退出重新登录) https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user# 安装docker-compose$ sudo yum install epel-release$ sudo yum install python-pip$ sudo pip install docker-compose# 换源https://lug.ustc.edu.cn/wiki/mirrors/help/docker 配置国内镜像源 1$ sudo vim /etc/docker/daemon.json 123&#123; "registry-mirrors": ["http://hub-mirror.c.163.com"]&#125; 12# 重启$ sudo systemctl restart docker.service 1234567常见国内源Docker中国 https://registry.docker-cn.com网易 http://hub-mirror.c.163.comustc https://docker.mirrors.ustc.edu.cn中国科技大学 https://docker.mirrors.ustc.edu.cn阿里云 https://cr.console.aliyun.com/ docker container 容器 1234# 查看全部运行的容器$ sudo docker ps# 删除容器$ sudo docker rm container_id docker image 镜像 1234# 查看安装的镜像$ sudo docker images# 删除镜像sudo docker rmi iamge_id Dockerfile编写 1vim Dockerfile 12# 制作镜像$ sudo docker build -t zhcshine:docker-sde/tag 登录到hub.docker.com 1234$ sudo docker login:username:password:Login Succeeded 推送到hub.docker.com 1$ sudo docker push zhcshine:docker-sde]]></content>
  </entry>
  <entry>
    <title><![CDATA[centos7.2安装使用svn]]></title>
    <url>%2F2019%2F09%2F09%2Fcentos7.2%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8svn%2F</url>
    <content type="text"><![CDATA[1234# 安装$ sudo yum install subversion# 查看svn目录$ which svnserve 12$ mkdir ~/svn$ svnadmin create ~/svn/repo0 # 创建repo0仓库 123456# 配置repo0$ vim ~/svn/repo0/conf/svnserve.confanon-access = noneauth-access = writepassword-db = ../../passwd # 密码文件地址authz-db = ../../authz # 权限认证文件地址 1234567891011# 配置密码文件$ vim ~/svn/passwd### This file is an example password file for svnserve.### Its format is similar to that of svnserve.conf. As shown in the### example below it contains one section labelled [users].### The name and password for each user follow, one account per line.[users]test = testpassworddev = devpasswordproduct = productpasswordui = uipassword 12345678910111213141516171819202122232425262728# 配置权限认证文件$ vim ~/svn/authz[aliases]# joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average[groups]# harry_and_sally = harry,sally# harry_sally_and_joe = harry,sally,&amp;joedev = devui = uiproduct = producttest = test# [/foo/bar]# harry = rw# &amp;joe = r# * =# [repository:/baz/fuz]# @harry_and_sally = rw# * = r[repo0:/]dev = rtest = rproduct = wrui = wr 123# 关闭并重启sudo killall svnservesvnserve -d -r ~/svn 1svn --username=username co svn://svn.xxxx.com/repo0 # 克隆项目]]></content>
  </entry>
  <entry>
    <title><![CDATA[android开发入门基础]]></title>
    <url>%2F2019%2F08%2F21%2Fandroid%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[linux安装环境 安装android-studio 123# archlinux$ git clone https://aur.archlinux.org/android-studio.git$ makepkg -si 安装sdk 123456# https://www.androiddevtools.cn/# 下载 SDK Tools并解压$ tar -zxvf android-sdk_r24.4.1-linux.tar$ mv android-sdk-linux ~/android# 下载 SDK并解压$ mv android-5.0 ~/android/android-sdk-linux/platforms 安装maven java开发maven构建工具入门基础 安装maven私服 Nexus的下载地址 12# 解压后/home/zhc/nexus$ ./nexus/nexus-3.19.1-01/bin/nexus run # 启动nexus 如果出现以下错误, 按提示安装java jdk 1No suitable Java Virtual Machine could be found on your system. 12# 访问地址http://127.0.0.1:8081/ 基础环境搭建]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo博客搭建]]></title>
    <url>%2F2019%2F08%2F19%2Fhexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[安装基础环境 node入门基础 安装hexo 1npm install -g hexo-cli hexo部署配置 1sudo vim _config.yml 1234deploy: type: git repo: https://github.com/zhcshine/zhcshine.github.io.git # 在github上新建一个page项目 branch: master hexo命令 12345hexo init blog # 初始化博客hexo n test_my_site # 创建一篇博客文章hexo g # 打包hexo s # 预览 http://localhost:4000hexo d # 发布到线上]]></content>
  </entry>
  <entry>
    <title><![CDATA[密码学入门基础]]></title>
    <url>%2F2019%2F08%2F19%2F%E5%AF%86%E7%A0%81%E5%AD%A6%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[古典密码： 替换式密码或移项式密码 凯撒密码 凯撒密码的替换方法是通过排列明文和密文字母表，密文字母表示通过将明文字母表向左或向右移动一个固定数目的位置。例如，当偏移量是左移3的时候（解密时的密钥就是3）： 12明文字母表：ABCDEFGHIJKLMNOPQRSTUVWXYZ密文字母表：DEFGHIJKLMNOPQRSTUVWXYZABC 替换式密码缺点 暴力破解，密码本的安全性 现代密码学：Hash （散列函数） Hash，一般翻译做散列、杂凑，或音译为哈希，是把任意长度的输入（又叫做预映射pre-image）通过散列算法变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。 Hash算法可以将一个数据转换为一个标志，这个标志和源数据的每一个字节都有十分紧密的关系。Hash算法还具有一个特点，就是很难找到逆向规律。 Hash算法是一个广义的算法，也可以认为是一种思想，使用Hash算法可以提高存储空间的利用率，可以提高数据的查询效率，也可以做数字签名来保障数据传递的安全性。所以Hash算法被广泛地应用在互联网应用中。 Hash算法也被称为散列算法，Hash算法虽然被称为算法，但实际上它更像是一种思想。Hash算法没有一个固定的公式，只要符合散列思想的算法都可以被称为是Hash算法。 MD5 SHA SHA-1算法的哈希值大小为160位，其计算输出长度为40位。(SHA-1不再推荐使用) SHA-224算法的哈希值大小为224位，其计算输出长度为56位。 SHA-256算法的哈希值大小为256位，其计算输出长度为64位。 SHA-384算法的哈希值大小为384位，其计算输出长度为96位。 SHA-512算法的哈希值大小为384位，其计算输出长度为128位。 现代密码学：对称加密 对称加密算法是应用较早的加密算法，技术成熟。在对称加密算法中，数据发信方将明文（原始数据）和加密密钥（mi yao）一起经过特殊加密算法处理后，使其变成复杂的加密密文发送出去。收信方收到密文后，若想解读原文，则需要使用加密用过的密钥及相同算法的逆算法对密文进行解密，才能使其恢复成可读明文。在对称加密算法中，使用的密钥只有一个，发收信双方都使用这个密钥对数据进行加密和解密，这就要求解密方事先必须知道加密密钥。 DES 数据加密标准（英语：Data Encryption Standard，缩写为 DES）是一种对称密钥加密块密码算法，1976年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），随后在国际上广泛流传开来 DES现在已经不是一种安全的加密方法，主要因为它使用的56位密钥过短。 1999年1月，distributed.net与电子前哨基金会合作，在22小时15分钟内即公开破解了一个DES密钥。 美国国家标准局倡导的AES即将作为新标准取代DES。 AES 对称加密的缺点 甲方必须把加密规则告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。 现代密码学：非对称加密 公钥加密的信息只有私钥解得开，那么只要私钥不泄漏，通信就是安全的 RSA RSA算法 1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，叫做RSA算法。 RSA算法基于一个十分简单的数论事实：将两个大质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。 RSA算法运用的几个数论知识： 互素关系， 欧拉函数， 欧拉定理， 模逆元 互素关系 如果没有大于1的正数既是r的因数也是s的因数，则r和s互素。 欧拉函数 在数论，对正整数m，欧拉函数φ(m)是小于或等于m的正整数中与m互素的数的数目 如果m是素数， φ(m)=m-1, 例如φ(3) = 2 若m = p * q, φ(m) = (p-1) * (q-1) 欧拉定理 在数论中，欧拉定理是一个关于同余的性质。欧拉定理表明，若n,a为正整数，且n,a互素，则a^φ(n)≡1 (mod n) 模逆元 如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1。这时，b就叫做a的"模反元素"。 rsa公钥密钥生成方法 公钥，密钥生成方法 随机取俩个不相等素数p, q; 例如：p=61, q=53 # 实际应用中，这两个质数很大，常常是几百位 计算p和q的乘积n， 其中n的长度就是密钥的长度; n=p*q=3233 3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位 # 实际应用中，RSA密钥一般是1024位，重要场合则为2048位 计算n的欧拉函数φ(n); φ(n) = (p-1)(q-1) = 60*52 = 3120 随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质; e = 17 计算e对于φ(n)的模逆元d ed ≡ 1 (mod φ(n)) # 模逆元公式A ed - 1 = kφ(n) # 模逆元公式转换B ed - kφ(n) = 1 # 转换公式 ex + φ(n)y = 1 # 转换公式 (e=17, φ(n)=3120, x=d, y=-k) 17x + 3120y = 1 # 代入数值 扩展欧几里得算法求解17x+3120y=1， 一组整数解为 (x,y)=(2753,-15)， 此时计算出d=2753 n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753） 是否可以破解密钥？ 已知公钥(n, e) 已知 ed ≡ 1 (mod φ(n))。只有知道e和φ(n)，才能算出d, 目前只需要算出φ(n) 已知 φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)，目前需要算出p和q 已知 n=pq。只有将n因数分解，才能算出p和q，n已知，如果n可以被因数分解，d就可以算出，也就意味着私钥被破解。 可是，大整数的因数分解，是一件非常困难的事情。目前，除了暴力破解，还没有发现别的有效方法。 维基百科这样写道： "对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法，那么RSA的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA密钥才可能被暴力破解。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的。" rsa加密和解密 加密公钥 (n,e) 123m^e ≡ c (mod n) # m是明文， 必须是整数（字符串可以取ascii值或unicode值），且m必须小于n65^17 ≡ c (mod 3233) # 本例中n=3233，e=17c = 2790 # 计算出c=2790, c则是密文 解密私钥(n,d) 123c^d ≡ m (mod n) # 公式一定成立，下面有介绍2790^2753 ≡ m (mod 3233) # 本例中c=2790, d=2753m = 65 # 计算出明文m=65 rsa私钥解密证明 c^d ≡ m (mod n) # 要证明的公式A 因为 m^e ≡ c (mod n)， 根据模运算的含义，所以 c = m^e - kn 将c代入公式A中， (m^e - kn)^d ≡ m (mod n) 将上述方程式的左侧用二项式定理展开，会发现都是n的倍数，模运算为0，所以可以简化为 med ≡ m (mod n) 即 m^(ed) = m (mod n) 因为ed ≡ 1 (modφ(n))， 所以ed = 1 + hφ(n) 代入公式B中 m^(1 + hφ(n)) ≡ m (mod n) # 公式C 当m与n互素时 根据欧拉定理m^φ(n) ≡ 1 (mod n) 可得m^φ(n) = kn + 1 上述公式两边乘以m得到 m * m^φ(n) = m * (kn + 1) 上述公式转换 m^(1 + hφ(n)) = m * (kn + 1) = m + mk * n ≡ m (mod n), 公式C得到证明 当m与n不互素 由于n等于质数p和q的乘积，所以m必然等于kp或kq。 以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立： (kp)^(q-1) ≡ 1 (mod q) 进一步扩展，可得 [(kp)^(q-1)]^(h(p-1)) × kp ≡ kp (mod q) 根据上述可得 (kp)^(ed) ≡ kp (mod q) 根据上述可得 (kp)^(ed) = kp + tq 显然，t能被p整除， 即t=t’p,可以得出 (kp)^(ed) = kp+t′pq 因为m=kp, n=pq, 最后得出 m^(ed) ≡ m (mod n) 公式得证 补充：模算数 同余 同余表达式 维基百科 数学上，同余（英语：congruence modulo，符号：≡）是数论中的一种等价关系。当两个整数除以同一个正整数，若得相同余数，则二整数同余。同余是抽象代数中的同余关系的原型。最先引用同余的概念与“≡”符号者为德国数学家高斯。 两个整数a， b，若它们除以正整数m所得的余数相等，则称a，b对于模m同余，记作 1a ≡ b (mod m) 同余换代 在任意一个成立的模同余式中，将任意子表达式替换为一个与其同余的子表达式，所得的模同余式依然成立 1(12 + 4) * 2 ≡ x + 1 (mod 7) (12 + 4)(模7)同余与2，故上同余式可表示为 12 * 2 ≡ x + 1 (mod 7) 代表元 每个整数恰好和整数0,1,2,...,m-1中的一个模m同余 例如，在模7的情况下，每个整数和整数0,1,2,3,4,5，6中的一个同余 商和余数 b被m除时，r为余数，q为商 1b = mq + r 余数操作运算符一般使用rem表示，例如25 rem 7 = 4 12如果a rem m = b rem m, 则 a ≡ b (mod m)如果 a ≡ b (mod m)， 则a rem m = b rem m 用rem运算简化模同余数 例 123456789101112 * 11 * 10 * 9 * 8 * 7 ≡ x (mod 13)因为12 * 11 = 132132 rem 13 = 2根据同余换代，上式可表示为2 * 10 * 9 * 8 * 7 ≡ x (mod 13)同上，上式可表示为7 * 9 * 8 * 7 ≡ x (mod 13)11 * 8 * 7 ≡ x (mod 13)10 * 7 ≡ x (mod 13)5 ≡ x (mod 13) 现在要求计算 12 * 11 * 10 * 9 * 8 * 7 * 6 rem 13 上面求出 112 * 11 * 10 * 9 * 8 * 7 ≡ 5 (mod 13) 根据商和余数与模的关系 1如果 a ≡ b (mod m)， 则a rem m = b rem m 112 * 11 * 10 * 9 * 8 * 7 * 6 rem 13 可转为 5 * 6 rem 13]]></content>
  </entry>
  <entry>
    <title><![CDATA[java开发spring入门基础]]></title>
    <url>%2F2019%2F08%2F16%2Fjava%E5%BC%80%E5%8F%91spring%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[构建项目基础 java开发maven构建工具入门基础 或者 java开发gradle构建工具入门基础 构建项目 spring项目初始化 1. Project: Gradle Project 2. Language: Java 3. Spring Boot: 2.17 4. Project Metadata 1. Group: com.zhuohc 2. Artifact: demo 3. Options: 1. Name: (默认) 2. Description: (默认) 3. Package Name: (默认) 4. Packaging: Jar/War(Web项目使用) 5. Java: 11(根据java版本号选择) Generate the project 解压后的文件夹即是项目初始化的目录结构 1234567891011121314151617181920212223242526$ tree.├── build.gradle├── gradle│ └── wrapper│ ├── gradle-wrapper.jar│ └── gradle-wrapper.properties├── gradlew├── gradlew.bat├── HELP.md├── settings.gradle└── src ├── main │ ├── java │ │ └── com │ │ └── zhuohc │ │ └── demo │ │ └── Application.java │ └── resources │ └── application.properties └── test └── java └── com └── zhuohc └── demo └── ApplicationTests.java 修改国内源 repositories { maven {url 'http://maven.aliyun.com/nexus/content/groups/public/'} mavenCentral() }]]></content>
  </entry>
  <entry>
    <title><![CDATA[java开发gradle构建工具入门基础]]></title>
    <url>%2F2019%2F08%2F16%2Fjava%E5%BC%80%E5%8F%91gradle%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[linux安装gradle 1234# 从官网下载二进制包# https://gradle.org/install/$ unzip unzip gradle-5.6-all.zip$ sudo mv gradle-5.6 /usr/java_jar 12# 添加环境变量$ sudo vim /etc/profile 12# 最后添加export PATH=$PATH:/usr/java_jar/gradle-5.6/bin 12345678910111213141516171819202122232425# 验证$ gradle -vWelcome to Gradle 5.6!Here are the highlights of this release: - Incremental Groovy compilation - Groovy compile avoidance - Test fixtures for Java projects - Manage plugin versions via settings scriptFor more details see https://docs.gradle.org/5.6/release-notes.html------------------------------------------------------------Gradle 5.6------------------------------------------------------------Build time: 2019-08-14 21:05:25 UTCRevision: f0b9d60906c7b8c42cd6c61a39ae7b74767bb012Kotlin: 1.3.41Groovy: 2.5.4Ant: Apache Ant(TM) version 1.9.14 compiled on March 12 2019JVM: 11.0.4 (Oracle Corporation 11.0.4+10-LTS)OS: Linux 4.19.49-1-MANJARO amd64 配置gradle 项目配置国内源 12345# 配置国内aliyun源repositories &#123; maven &#123;url 'http://maven.aliyun.com/nexus/content/groups/public/'&#125; mavenCentral()&#125; 全局配置国内源 1vim ~/.gradle/init.gradle 1234567891011121314151617allprojects&#123; repositories &#123; def REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public/' all &#123; ArtifactRepository repo -&gt; if(repo instanceof MavenArtifactRepository)&#123; def url = repo.url.toString() if (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) &#123; project.logger.lifecycle "Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL." remove repo &#125; &#125; &#125; maven &#123; url REPOSITORY_URL &#125; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[java开发maven构建工具入门基础]]></title>
    <url>%2F2019%2F08%2F16%2Fjava%E5%BC%80%E5%8F%91maven%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[linux安装maven 12345# 从官网下载二进制包# http://maven.apache.org/download.cgi$ wget http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz$ tar -xzvf apache-maven-3.6.1-bin.tar.gz$ sudo mv apache-maven-3.6.1 /usr/java_jar 12# 添加环境变量$ sudo vim /etc/profile 12# 最后添加export PATH=/opt/apache-maven-3.6.1/bin:$PATH 1234567# 验证$ mvn -vApache Maven 3.6.1 (d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555; 2019-04-05T03:00:29+08:00)Maven home: /usr/java_jar/apache-maven-3.6.1Java version: 11.0.4, vendor: Oracle Corporation, runtime: /usr/java/jdk-11.0.4Default locale: zh_CN, platform encoding: UTF-8OS name: "linux", version: "4.19.49-1-manjaro", arch: "amd64", family: "unix" 常见命令 12345678910111213141516171819202122# 创建一个项目$ mvn archetype:generate# 选择版本Choose org.apache.maven.archetypes:maven-archetype-quickstart version: 1: 1.0-alpha-1 2: 1.0-alpha-2 3: 1.0-alpha-3 4: 1.0-alpha-4 5: 1.0 6: 1.1 7: 1.3 8: 1.4 Choose a number: 8: Define value for property 'groupId': com.zhuohc.maven03 # groupID 项目名 Define value for property 'artifactId': maven03-model # artifactId 项目名-模块名 Define value for property 'version' 1.0-SNAPSHOT: : # version 版本 Define value for property 'package' com.zhuohc.maven03: : Confirm properties configuration: groupId: com.zhuohc.maven03 artifactId: maven03-model version: 1.0-SNAPSHOT package: com.zhuohc.maven03 12345$ mvn clean # 删除$ mvn compile # 编译$ mvn test # 测试$ mvn package # 打包$ mvn install # 安装当前项目包到本地环境 修改下载源 修改pom.xml文件repositories属性，添加国内源地址，具体见pom.xml pom.xml 1234567891011121314151617181920212223242526272829&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.imooc.maven01&lt;/groupId&gt; &lt;artifactId&gt;maven01-model&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;aliyun&lt;/id&gt; &lt;name&gt;aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt;&lt;/project&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[django环境部署]]></title>
    <url>%2F2019%2F08%2F02%2Fdjango%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[安装supervisor服务 地址 sudo yum install supervisor #### 待续 123$ pip3 install service_identity$ pip3 install channels$ pip3 install channels_redis]]></content>
  </entry>
  <entry>
    <title><![CDATA[node入门基础]]></title>
    <url>%2F2019%2F07%2F26%2Fnode%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[安装 开发环境 安装nvm 1$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash 1234# 添加以下代码到~/.bashrc, ~/.profile, or ~/.zshrcexport NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh" # This loads nvm[ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion nvm命令 123456789101112$ nvm install 6.14.4 # 安装or 10.10.0, 8.9.1, etc$ nvm ls # 查看default -&gt; 10.16.0 (-&gt; v10.16.0)node -&gt; stable (-&gt; v10.16.0) (default)stable -&gt; 10.16 (-&gt; v10.16.0) (default)iojs -&gt; N/A (default)lts/* -&gt; lts/dubnium (-&gt; v10.16.0)lts/argon -&gt; v4.9.1 (-&gt; N/A)lts/boron -&gt; v6.17.1 (-&gt; N/A)lts/carbon -&gt; v8.16.0 (-&gt; N/A)lts/dubnium -&gt; v10.16.0$ nvm use default # 使用指定node版本 安装cnpm 1$ npm --registry=https://registry.npm.taobao.org install cnpm -g 待续]]></content>
  </entry>
  <entry>
    <title><![CDATA[linux守护进程]]></title>
    <url>%2F2019%2F07%2F26%2Flinux%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[什么是守护进程？ 守护进程（Daemon Process），也就是通常说的 Daemon 进程（精灵进程），是 Linux 中的后台服务进程。它是一个生存期较长的进程，通常独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。 守护进程是个特殊的孤儿进程，这种进程脱离终端，为什么要脱离终端呢？之所以脱离于终端是为了避免进程被任何终端所产生的信息所打断，其在执行过程中的信息也不在任何终端上显示。由于在 Linux 中，每一个系统与用户进行交流的界面称为终端，每一个从此终端开始运行的进程都会依附于这个终端，这个终端就称为这些进程的控制终端，当控制终端被关闭时，相应的进程都会自动关闭。 Linux 的大多数服务器就是用守护进程实现的。 守护进程的分类 根据守护进程的启动和管理方式，可以分为独立启动守护进程和超级守护进程两类 独立启动（stand_alone):该类进程启动后就常驻内存，所以会一直占用系统资源。其最大的优点就是它会一直启动，当外界有要求时相应速度较快，像httpd等进程； 超级守护进程：系统启动时由一个统一的守护进程xinet来负责管理一些进程，当相应请求到来时需要通过xinet的转接才可以唤醒被xinet管理的进程。这种进程的优点时最初只有xinet这一守护进程占有系统资源，其他的内部服务并不一直占有系统资源，只有数据包到来时才会被xinet管理员来唤醒。并且我们还可以通过xinet来对它所管理的进程设置一些访问权限，相当于多了一层管理机制。 如果用两个比喻来形容两类守护进程的话一般会用银行的业务处理窗口来类比： 独立启动：银行里有一种单服务的窗口，像取钱，存钱等窗口，这些窗口边上始终会坐着一个人，如果有人来取钱或存钱，可以直接到相应的窗口去办理，这个处理单一服务的始终存在的人就是独立启动的守护进程； 超级守护进程：银行里还有一种窗口，提供综合服务，像汇款，转账，提款等业务；这种窗口附近也始终坐着一个人（xinet），她可能不提供具体的服务，提供具体服务的人在里面闲着聊天啊，喝茶啊，但是当有人来汇款时他会大声喊一句，小王，有人汇款啦，然后里面管汇款的小王会立马跑过来帮忙办完汇款业务。其他的人继续聊天，喝茶。这些负责具体业务的人我们就称之为超级守护进程。当然可能汇款人会有一些规则，可能不能往北京汇款，他就会提早告诉xinet，所以如果有人来汇款想汇往北京的话，管理员就直接告诉他这个我们这里办不到的，于是就根本不会去喊汇款员了，相当于提供了一层管理机制。针对这种窗口还存在多线程和单线程的区别：多线程：将所有用户的要求都提上来，里面的人都别闲着了，都一起干活吧； 单线程：大家都排好队了，一个一个来，里面的人同一时间只有一个人在工作。 当然每个守护进程都会监听一个端口（银行窗口），一些常用守护进程的监听端口是固定的，像httpd监听80端口， sshd监听22端口等；我们可以将其理解为责任制，时候等待，有求必应。具体的端口信息可以通过cat /etc/services来查看。 查看守护进程 1ps axj a 表示不仅列当前用户的进程，也列出所有其他用户的进程 x 表示不仅列有控制终端的进程，也列出所有无控制终端的进程 j 表示列出与作业控制相关的信息 12345678910111213PPID PID PGID SID TTY TPGID STAT UID TIME COMMAND 0 1 1 1 ? -1 Ss 0 12:00 /sbin/init 0 2 0 0 ? -1 S 0 0:00 [kthreadd] 2 3 0 0 ? -1 I&lt; 0 0:00 [rcu_gp] 2 4 0 0 ? -1 I&lt; 0 0:00 [rcu_par_gp] 2 6 0 0 ? -1 I&lt; 0 0:00 [kworker/0:0H-kblockd] 2 8 0 0 ? -1 I&lt; 0 0:00 [mm_percpu_wq] 2 9 0 0 ? -1 S 0 3:28 [ksoftirqd/0] 2 10 0 0 ? -1 I 0 40:58 [rcu_preempt] 2 11 0 0 ? -1 I 0 0:00 [rcu_sched] 2 12 0 0 ? -1 I 0 0:00 [rcu_bh] 2 13 0 0 ? -1 S 0 5:16 [rcuc/0] 2 14 0 0 ? -1 S 0 0:00 [rcub/0] 从上图可以看出守护进行的一些特点： 守护进程基本上都是以超级用户启动（ UID 为 0 ） 没有控制终端（ TTY 为 ？） 终端进程组 ID 为 -1 （ TPGID 表示终端进程组 ID） 一般情况下，守护进程可以通过以下方式启动： 在系统启动时由启动脚本启动，这些启动脚本通常放在 /etc/rc.d 目录下； 利用 inetd 超级服务器启动，如 telnet 等； 由 cron 定时启动以及在终端用 nohup 启动的进程也是守护进程。 编写守护进程 屏蔽一些控制终端操作的信号 这是为了防止守护进行在没有运行起来前，控制终端受到干扰退出或挂起。 1234signal(SIGTTOU,SIG_IGN); signal(SIGTTIN,SIG_IGN); signal(SIGTSTP,SIG_IGN); signal(SIGHUP ,SIG_IGN); 在后台运行 这是为避免挂起控制终端将守护进程放入后台执行。方法是在进程中调用 fork() 使父进程终止， 让守护进行在子进程中后台执行。 123if( pid = fork() )&#123; // 父进程 exit(0); //结束父进程，子进程继续 &#125; 脱离控制终端、登录会话和进程组 Linux 中的进程与控制终端，登录会话和进程组之间的关系： 进程属于一个进程组，进程组号（GID）就是进程组长的进程号（PID）。登录会话可以包含多个进程组。这些进程组共享一个控制终端。这个控制终端通常是创建进程的 shell 登录终端。 控制终端、登录会话和进程组通常是从父进程继承下来的。我们的目的就是要摆脱它们 ，使之不受它们的影响。因此需要调用 setsid() 使子进程成为新的会话组长，示例代码如下： 1setsid(); setsid()调用成功后，进程成为新的会话组长和新的进程组长，并与原来的登录会话和进程组脱离。由于会话过程对控制终端的独占性，进程同时与控制终端脱离。 禁止进程重新打开控制终端 现在，进程已经成为无终端的会话组长，但它可以重新申请打开一个控制终端。可以通过使进程不再成为会话组长来禁止进程重新打开控制终端，采用的方法是再次创建一个子进程，示例代码如下： 123if( pid=fork() )&#123; // 父进程 exit(0); // 结束第一子进程，第二子进程继续（第二子进程不再是会话组长） &#125; 关闭打开的文件描述符 进程从创建它的父进程那里继承了打开的文件描述符。如不关闭，将会浪费系统资源，造成进程所在的文件系统无法卸下以及引起无法预料的错误。按如下方法关闭它们： 12345// NOFILE 为 &lt;sys/param.h&gt; 的宏定义 // NOFILE 为文件描述符最大个数，不同系统有不同限制 for(i=0; i&lt; NOFILE; ++i)&#123;// 关闭打开的文件描述符 close(i); &#125; 改变当前工作目录 进程活动时，其工作目录所在的文件系统不能卸下。一般需要将工作目录改变到根目录。对于需要转储核心，写运行日志的进程将工作目录改变到特定目录如 /tmp。示例代码如下： 1chdir("/"); 重设文件创建掩模 进程从创建它的父进程那里继承了文件创建掩模。它可能修改守护进程所创建的文件的存取权限。为防止这一点，将文件创建掩模清除： 1umask(0); 处理 SIGCHLD 信号 但对于某些进程，特别是服务器进程往往在请求到来时生成子进程处理请求。如果父进程不等待子进程结束，子进程将成为僵尸进程（zombie）从而占用系统资源。如果父进程等待子进程结束，将增加父进程的负担，影响服务器进程的并发性能。在 Linux 下可以简单地将 SIGCHLD 信号的操作设为 SIG_IGN 。 1signal(SIGCHLD, SIG_IGN); 这样，内核在子进程结束时不会产生僵尸进程。 代码示例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include&lt;unistd.h&gt;#include&lt;signal.h&gt;#include&lt;fcntl.h&gt;#include&lt;sys/syslog.h&gt;#include&lt;sys/param.h&gt;#include&lt;sys/types.h&gt;#include&lt;sys/stat.h&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;time.h&gt;#include &lt;string.h&gt;int init_daemon(void)&#123; int i; // 1）屏蔽一些控制终端操作的信号 signal(SIGTTOU, SIG_IGN); signal(SIGTTIN, SIG_IGN); signal(SIGTSTP, SIG_IGN); signal(SIGHUP, SIG_IGN); // 2）在后台运行 pid_t pid = fork(); if(pid &lt; 0) &#123; perror("fork"); exit(EXIT_FAILURE); // 进程创建失败 &#125; if(pid &gt; 0) &#123; exit(0); // 退出父进程 &#125; // 3）脱离控制终端、登录会话和进程组 setsid(); // 4）禁止进程重新打开控制终端 pid = fork(); if(pid &lt; 0) &#123; perror("fork"); exit(EXIT_FAILURE); &#125; if (pid &gt; 0) &#123; exit(0); // 结束第一子进程，第二子进程继续（第二子进程不再是会话组长） &#125; // 5）关闭打开的文件描述符 // NOFILE 为 &lt;sys/param.h&gt; 的宏定义 // NOFILE 为文件描述符最大个数，不同系统有不同限制 for(i=0; i&lt;NOFILE; ++i)&#123; close(i); &#125; // 6）改变当前工作目录 chdir("/"); // 7）重设文件创建掩模 umask(0); // 8）处理 SIGCHLD 信号 signal(SIGCHLD,SIG_IGN); return 0;&#125;int main(int argc, char *argv[]) &#123; init_daemon(); char *msg = "I'm printlg process...\n"; int msg_len = strlen(msg); int fd = open("/tmp/test_printlg.log", O_RDWR | O_CREAT | O_APPEND, 0666); if(fd &lt; 0) &#123; printf("open /tmp/test_printlg.log fail.\n"); exit(EXIT_FAILURE); &#125; while(1) &#123; // 每隔 3s 输出 msg 到 /tmp/test_printlg.log 文件中 write(fd, msg, msg_len); sleep(3); &#125; close(fd); return 0;&#125; 123456789101112# 编译$ gcc -o test1 main.c # 运行$ sudo ./test1# 查看$ ps axj | grep test1 PPID PID PGID SID TTY TPGID STAT UID TIME COMMAND 21591 31396 31395 31395 ? -1 R 0 0:03 ./test1# 查看结果$ vim /tmp/test_printlg.log# 杀死守护进程$ sudo kill -9 &lt;pid&gt; 守护进程开机自启动 linux系统启动的顺序 12345671. BIOS2. MBR (boot loader)3. kernel loading4. init program5. initial script (/etc/rc.d/rc.sysinit)6. daemon start (/etc/rc.d/rc[0-6].d/*)7. local setting (/etc/rc.d/rc.local) 每个系统启动级别的守护进程位置不一致，通常有以下位置 12/etc/rc.d/etc/rc[N].d 知道了守护进程的位置，就可以把 test1 放在 /etc/rc5.d/ 下，并且还要改名称，因为系统需要根据指定的名称来使用 for 循环来启动或者关闭每个程序，命名规则如下： 1. S[num][name]：启动守护进程name，例如：12. K[num][name]：禁止启动守护进程name，例如：```K01test1 我们这里肯定要启动了，所以将 命名为 ```S01test1```：12```shellmv test1 /etc/rc5.d/S01test1]]></content>
      <tags>
        <tag>linux</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[minicat-manjaro-18.0.4-dev]]></title>
    <url>%2F2019%2F07%2F24%2Fminicat-manjaro-18-0-4-dev%2F</url>
    <content type="text"><![CDATA[添加中科大源 1$ sudo vi /etc/pacman.conf 1234# 在文件末尾添加[archlinuxcn]SigLevel = Optional TrustedOnlyServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch 导入GPG Key 1$ sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring 安装基本开发编译软件 1sudo pacman -S --needed base-devel 安装git 1$ sudo pacman -S git 安装chrome 1$ sudo pacman -S google-chrome 安装搜狗拼音输入法 123$ sudo pacman -S fcitx-im #默认全部安装$ sudo pacman -S fcitx-configtool$ sudo pacman -S fcitx-sogoupinyin 编辑输入法配置文件 123456$ sudo nano ~/.xprofileexport GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS="@im=fcitx"# 重启后输入法就可以正常使用。 安装vim 1$ sudo pacman -S vim 安装vim基础配置 1$ curl https://raw.githubusercontent.com/wklken/vim-for-server/master/vimrc &gt; ~/.vimrc 安装tmux和.tmux 12345$ sudo pacman -S tmux$ cd ~$ git clone https://github.com/gpakosz/.tmux.git$ ln -s -f .tmux/.tmux.conf$ cp .tmux/.tmux.conf.local . 安装zsh和oh-my-zsh 12$ sudo pacman -S zsh$ sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" 安装yaourt 12345678$ sudo pacman -S --needed base-devel git wget yajl$ cd /tmp$ git clone https://aur.archlinux.org/package-query.git$ cd package-query/$ makepkg -si &amp;&amp; cd /tmp/$ git clone https://aur.archlinux.org/yaourt.git$ cd yaourt/$ makepkg -si 安装shadowsocks 1234$ git clone https://aur.archlinux.org/shadowsocks-qt5-git.git$ cd shadowsocks-qt5-git$ less PKGBUILD # 查看$ makepkg -si # 安装 设置ssh连接不断开 123# vim ~/.ssh/configHost * ServerAliveInterval 60 安装jetbrain全家桶 jetbrain激活参考地址 1234$ sudo vim /etc/hosts# 添加以下两行代码0.0.0.0 account.jetbrains.com0.0.0.0 www.jetbrains.com 安装python开发环境 python开发环境 安装rabbitmq 1234$ sudo pacman -S rabbitmq rabbitmqadmin$ sudo systemctl enable rabbitmq.service # 开机启动$ sudo systemctl start rabbitmq.service # 启动$ rabbitmq-plugins enable rabbitmq_management # 开启web界面 安装redis 123$ sudo pacman -S redis$ sudo systemctl enable redis.service # 开机启动$ sudo systemctl start redis.service # 启动 设置密码 12$ sudo vim /etc/redis.confredispassword password 安装node python开发环境 其他软件清单 peek 录制gif软件 github desktop github客户端 postman]]></content>
      <tags>
        <tag>linux</tag>
        <tag>manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c开发gtk+入门基础]]></title>
    <url>%2F2019%2F07%2F24%2Fc%E5%BC%80%E5%8F%91gtk%2B-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[gdk+介绍 gtk+是c语言编写的用于开发图形界面程序的函数库。gtk+来源于gimp（gnu image minipulation program），gtk+在gdk（gimp drawing kit）基础上创建，并进行封装。 linux安装 12345678910# http://ftp.gnome.org/pub/gnome/sources/gtk+/3.24/$ wget http://ftp.gnome.org/pub/gnome/sources/gtk+/3.24/gtk+-3.24.10.tar.xz$ tar xvfJ gtk+-3.24.10.tar.xz$ ./configure --prefix=/user/include/gtk3.24$ make &amp;&amp; sudo make install$ sudo ldconfig# 设置LD_LIBRARY_PATH$ LD_LIBRARY_PATH="/opt/gtk/lib"$ PATH="/opt/gtk/bin:$PATH"$ export LD_LIBRARY_PATH PATH 简单的空白窗口 12345678910#include &lt;stdio.h&gt;#include &lt;gtk/gtk.h&gt;int main(int argc, char* argv[]) &#123; gtk_init(&amp;argc, &amp;argv); GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL); gtk_widget_show(window); gtk_main(); return 0;&#125; 1$ gcc -o main main.c `pkg-config --libs -cflags gtk+-3.0` gtk_init (&amp;argc, &amp;argv); 所有 GTK应用程序都要调用该函数，而且必须在控件定义之前使用，它为我们设置一些缺省值( 例如视觉和颜色 )映射这个函数将函数库初始化，设置缺省的信号处理函数，并检查通过命令行传递给应用程序的参数，自动完成一些必要的初始化工作。 gtk_main()是在每个Gtk应用程序都要调用的函数。程序运行停在这里等待事件(如键盘事件或鼠标事件)的发生，等待用户来操作窗口 gtk_window_new()的功能创建一个窗口并返回这个窗口的控件指针。GTK_WINDOW_TOPLEVEL指明窗口的类型为最上层的主窗口，它最常用。接着创建一个GtkWidget 类型的window变量来接收。GtkWidget是GTK+控件类型，GtkWidget 能指向任何控件的指针类型。 gtk_widget_show(window)；用来显示上一步创建的窗口控件。在这个简单例子里，所有事件都被忽略。用鼠标点击窗口右上角的“×”按钮也不能将窗口关闭。我们可以在终端敲 Ctrl + C 关闭程序。 控件 GTK中控件主要分为两类：容器控件，非容器控件。 容器控件：它可以容纳别的控件，我们可以理解为盒子，盒子拿来装东西。容器控件又分为两类，一类只能容纳一个控件，如窗口，按钮；另一类能容纳多个控件，如布局控件。 非容器控件：它不可以容纳别的控件，如标签、行编辑。 前面我们写的空白窗口是能容纳一个控件的控件，现在我们要做的是，给这个窗口添加一个按钮。 首先，我们需要创建一个按钮，然后需要把按钮添加到窗口，接着，显示按钮控件。 12345678910111213141516171819#include &lt;stdio.h&gt;#include &lt;gtk/gtk.h&gt;int main(int argc, char* argv[]) &#123; // gtk初始化 gtk_init(&amp;argc, &amp;argv); // 创建一个顶层窗口 GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL); // 创建一个button容器 GtkWidget *button = gtk_button_new_with_label("hello gtk"); // 将button放入窗口中， gtk_container_add(GTK_CONTAINER(window), button); // 显示button gtk_widget_show(button); // 显示window gtk_widget_show(window); gtk_main(); return 0;&#125; 1void gtk_container_add(GtkContainer *container, GtkWidget *widget); 这里我们是把按钮添加到窗口容器里，widget为按钮指针(以上代码的button)，container为窗口指针(以上代码的window)，这里需要注意的是，我们创建的窗口(window)返回值为GtkWidget 类型，而gtk_container_add()的第一个参数为GtkContainer 类型，由于 GtkWidget *类型的变量为指向任何控件的万能指针，所以，在函数传参时，根据参数类型进行相应的转换，如： 1gtk_container_add( (GtkContainer *)window, button); C语言里，我们常用这种方法转换。在GTK中，很多内部变量指针类型转换都定义了宏定义，如： 1#define GTK_CONTAINER(x) (GtkContainer *)(x) 所以，我们还可以这么写： 1gtk_container_add(GTK_CONTAINER(window), button); 那么，我们如何知道，哪个类型对应哪个宏定义呢？把要转换类型名字全部变为大写，同时，单词和单词之间以下划线“_”连接，然后，这个名字就是哪个宏定义的名字，如，(GtkButton *)x用宏定义的方法为 GTK_BUTTON(x)。 上面的代码，我们是按钮和窗口都得通过gtk_widget_show()显示出来： 12gtk_widget_show(button);// 显示按钮gtk_widget_show(window);// 显示窗口 但是，假如，窗口里有100个控件，还是这样一个一个地显示出来会比较麻烦，这时候，我们可以通过gtk_widget_show_all()显示所有的控件，里面需要传的是容纳控件的那个容器(这里为窗口)。这样，容器上的控件也会跟着显示。 1gtk_widget_show_all() 布局容器-水平布局 如果我们希望窗口里多放添加几个控件，直接添加是不成功的，因为窗口只能容纳一个控件的容器。这时候，我们需要借助布局容器，我们先把布局容器添加到窗口里，然后再把所需要添加的控件放在布局容器里。 布局容器的主要分类：水平布局( GtkHBox)、垂直布局(GtkVBox )、表格布局(GtkTable)、固定布局(GtkFixed )。 创建一个盒子布局 12// orientation参数: GTK_ORIENTATION_HORIZONTAL GTK_ORIENTATION_VERTICAL 两个可选值 spacing参数是单元格之间的间隙int gtk_box_new(int orientation, int spacing); 以下代码显示水平容器布局方式，垂直容器类似 123456789101112131415161718192021222324252627#include &lt;stdio.h&gt;#include &lt;gtk/gtk.h&gt;int main(int argc, char* argv[]) &#123; // gtk初始化 gtk_init(&amp;argc, &amp;argv); // 创建一个顶层窗口 GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL); // 创建水平容器 // GtkWidget *hbox = gtk_hbox_new(TRUE, 10); // gtk+2版本使用 GtkWidget *hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 10); // gtk+3版本使用 // 将水平容器添加到窗口 gtk_container_add(GTK_CONTAINER(window), hbox); // 创建一个button容器 GtkWidget *button1 = gtk_button_new_with_label("button1"); // 将button放入水平容器中 gtk_container_add(GTK_CONTAINER(hbox), button1); // 重复创建两个 GtkWidget *button2 = gtk_button_new_with_label("button2"); GtkWidget *button3 = gtk_button_new_with_label("button3"); gtk_container_add(GTK_CONTAINER(hbox), button2); gtk_container_add(GTK_CONTAINER(hbox), button3); // 显示全部窗口 gtk_widget_show_all(window); gtk_main(); return 0;&#125; 布局容器-表格布局 添加表格布局容器 12// rows: 行数, coumns: 列数, homogeneous：容器内表格的大小是否相等, 返回值：表格布局容器指针GtkWidget *gtk_table_new(guint rows, guint columns, gboolean homogeneous); 布局容器添加控件 12// table: 容纳控件的容器, widget: 要添加的控件, 后四个参数为控件摆放的坐标，规则如下：void gtk_table_attach_defaults(GtkTable *table, GtkWidget *widget, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach); 示意图 123456789101112131415161718192021222324#include &lt;stdio.h&gt;#include &lt;gtk/gtk.h&gt;int main(int argc, char* argv[]) &#123; // gtk初始化 gtk_init(&amp;argc, &amp;argv); // 创建一个顶层窗口 GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL); // 创建一个表格容器 GtkWidget *table = gtk_table_new(2, 2, TRUE); // gtk+2版本 gtk_container_add(GTK_CONTAINER(window), table); // 创建button1， button2, button3 GtkWidget *button1 = gtk_button_new_with_label("button1"); GtkWidget *button2 = gtk_button_new_with_label("button2"); GtkWidget *button3 = gtk_button_new_with_label("button3"); // 将button放入table中 gtk_table_attach_defaults(GTK_TABLE(table), button1, 0, 1, 0, 1); gtk_table_attach_defaults(GTK_TABLE(table), button2, 1, 2, 0, 1); gtk_table_attach_defaults(GTK_TABLE(table), button3, 0, 2, 1, 2); // 显示所有窗口 gtk_widget_show_all(window); gtk_main(); return 0;&#125; 布局容器-固定布局 水平、垂直和表格布局容器，控件会跟着容器大小的变化进行自动适应，而固定布局容器里的控件则不会跟着变化( 则固定不变 )。 固定布局的创建 1GtkWidget *gtk_fixed_new(void); 添加控件 12// fixed：容纳控件的容器, widget：要添加的控件, x, y：控件摆放位置的起点坐标void gtk_fixed_put(GtkFixed *fixed, GtkWidget *widget, gint x, gint y ); 设置控件的大小( 宽和高 ) 12// widget：需要设置的控件, width：宽度, height：高度void gtk_widget_set_size_request(GtkWidget *widget, gint width, gint height); 移动固定布局里控件的位置 12// fixed：固定布局容器, widget：需要移动的控件, x, y: 移动的位置void gtk_fixed_move(GtkFixed *fixed, GtkWidget *widget, gint x, gint y); 示例代码 123456789101112131415161718192021222324252627#include &lt;stdio.h&gt;#include &lt;gtk/gtk.h&gt;int main(int argc, char* argv[]) &#123; // gtk初始化 gtk_init(&amp;argc, &amp;argv); // 创建一个顶层窗口 GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL); // 创建一个固定布局容器 GtkWidget *fixed = gtk_fixed_new(); // 将fixed添加到window中 gtk_container_add(GTK_CONTAINER(window), fixed); // 创建button GtkWidget *button1 = gtk_button_new_with_label("button1"); GtkWidget *button2 = gtk_button_new_with_label("button2"); // 将button添加到fixed gtk_fixed_put(GTK_FIXED(fixed), button1, 0, 0); gtk_fixed_put(GTK_FIXED(fixed), button2, 0, 0); // 移动button位置 gtk_fixed_move(GTK_FIXED(fixed), button2, 150, 150); // 设置button大小 gtk_widget_set_size_request(button2, 100, 50); // 显示所有窗口 gtk_widget_show_all(window); gtk_main(); return 0;&#125; 容器布局练习-计算器 编辑控件( GtkEntry ) 123456// 创建GtkWidget * gtk_entry_new(void);// 编辑void gtk_entry_set_text (GtkEntry *entry,const gchar *text);// 设置行编辑是否允许编辑void gtk_editable_set_editable(GtkEditable *editable, gboolean is_editable); 示例代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;stdio.h&gt;#include &lt;gtk/gtk.h&gt;int main(int argc, char* argv[]) &#123; // 初始化 gtk_init(&amp;argc, &amp;argv); // 创建窗口 GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL); // 创建5行4列的表格容器 GtkWidget *table = gtk_table_new(5, 4, TRUE); // 将table放入到容器中 gtk_container_add(GTK_CONTAINER(window), table); // 创建一个行编辑 GtkWidget *entry = gtk_entry_new(); // 设置行编辑的内容 gtk_entry_set_text(GTK_ENTRY(entry), "2+2=4"); // 设置行编辑不允许编辑 gtk_editable_set_editable(GTK_EDITABLE(entry), FALSE); // 创建0-9数字按钮，+-×/=c功能按钮 GtkWidget *button_0 = gtk_button_new_with_label("0"); GtkWidget *button_1 = gtk_button_new_with_label("1"); GtkWidget *button_2 = gtk_button_new_with_label("2"); GtkWidget *button_3 = gtk_button_new_with_label("3"); GtkWidget *button_4 = gtk_button_new_with_label("4"); GtkWidget *button_5 = gtk_button_new_with_label("5"); GtkWidget *button_6 = gtk_button_new_with_label("6"); GtkWidget *button_7 = gtk_button_new_with_label("7"); GtkWidget *button_8 = gtk_button_new_with_label("8"); GtkWidget *button_9 = gtk_button_new_with_label("9"); GtkWidget *button_add = gtk_button_new_with_label("+"); GtkWidget *button_minus = gtk_button_new_with_label("-"); GtkWidget *button_mul = gtk_button_new_with_label("*"); GtkWidget *button_div = gtk_button_new_with_label("/"); GtkWidget *button_equal = gtk_button_new_with_label("="); GtkWidget *button_delete = gtk_button_new_with_label("c"); // 将table放入表格布局中 gtk_table_attach_defaults(GTK_TABLE(table), entry, 0, 4, 0, 1); gtk_table_attach_defaults(GTK_TABLE(table), button_0, 0, 1, 4, 5); gtk_table_attach_defaults(GTK_TABLE(table), button_1, 0, 1, 3, 4); gtk_table_attach_defaults(GTK_TABLE(table), button_2, 1, 2, 3, 4); gtk_table_attach_defaults(GTK_TABLE(table), button_3, 2, 3, 3, 4); gtk_table_attach_defaults(GTK_TABLE(table), button_4, 0, 1, 2, 3); gtk_table_attach_defaults(GTK_TABLE(table), button_5, 1, 2, 2, 3); gtk_table_attach_defaults(GTK_TABLE(table), button_6, 2, 3, 2, 3); gtk_table_attach_defaults(GTK_TABLE(table), button_7, 0, 1, 1, 2); gtk_table_attach_defaults(GTK_TABLE(table), button_8, 1, 2, 1, 2); gtk_table_attach_defaults(GTK_TABLE(table), button_9, 2, 3, 1, 2); gtk_table_attach_defaults(GTK_TABLE(table), button_add, 1, 2, 4, 5); gtk_table_attach_defaults(GTK_TABLE(table), button_minus, 2, 3, 4, 5); gtk_table_attach_defaults(GTK_TABLE(table), button_mul , 3, 4, 2, 3); gtk_table_attach_defaults(GTK_TABLE(table), button_div, 3, 4, 3, 4); gtk_table_attach_defaults(GTK_TABLE(table), button_equal, 3, 4, 4, 5); gtk_table_attach_defaults(GTK_TABLE(table), button_delete, 3, 4, 1, 2); // 显示 gtk_widget_show_all(window); // 循环 gtk_main(); return 0;&#125; 1gcc -o main main.c `pkg-config --libs -cflags gtk+-3.0` 运行结果 计算器 信号与回调函数 GTK采用了信号与回调函数来处理窗口外部传来的事件、消息或信号。当信号发生时，程序自动调用为信号连接的回调函数。 GTK中的“信号”实际上是一种软件中断。“中断”在我们生活中经常遇到，譬如，我正在房间里打游戏，突然送快递的来了，把正在玩游戏的我给“中断”了，我去签收快递( 处理中断 )，处理完成后，再继续玩我的游戏。GTK中的“信号”就是属于这么一种“中断”，当用户按下按钮的时候，就产生一个“中断”，相当于产生一个信号，接着就会处理这么一个“中断任务”(程序里体验为调用一个函数)。 “信号”在GTK中可以认为一种中断的标志，如按下按钮的标志为"pressed",释放按钮的标志为"released"，这些标志就相当于 C语言的关键字一样，我们使用的时候必须完全按照它的名字来写。需要注意的是，每个控件的信号标志不一定都一样，如按钮（GtkButton）里有"pressed"信号，窗口(GtkWindow)里就没这个信号，每个控件具体有哪个信号，应该查看帮助文档来确定。 按钮的常用信号： "clicked" : 单击按钮时触发 "pressed" : 按下按钮时触发 "released" : 释放按钮时触发 信号注册函数 123456// instance：信号发出者，可以认为我们操作的控件，如按下按钮，这个就为按钮指针// detailed_signal：信号标志，如"pressed"// c_handler：回调函数的名称，需要用G_CALLBACK()进行转换// data：给回调函数传的参数，gpointer 相当于C语言的 void *// 返回值：注册函数的标志gulong g_signal_connect(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer data); 例如 1g_signal_connect(button, "pressed",G_CALLBACK(callback), NULL); 当按下button按钮时，就会自动调用回调函数callback(相当于处理中断任务)，回调函数callback可以是任意函数，函数名字我们根据需要自行命名，如果不是库函数，我们还得定义这个回调函数，这里需要注意的是，回调函数的写法(返回值，参数)，不是我们想怎么写就怎么写，帮助文档里已经规定好了回调函数应该如何写，如果不按规定来写，可能产生意想不到的错误。 文档地址 回调函数的定义 123void callback(GtkButton *button,gpointer data) &#123;&#125; 示例 12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt;#include &lt;gtk/gtk.h&gt;void deal_pressed(GtkButton *button, gpointer user_data) &#123; const char *text = gtk_button_get_label(button); printf("%s----%s\n", (char *) user_data, text);&#125;int main(int argc, char* argv[]) &#123; // 初始化 gtk_init(&amp;argc, &amp;argv); // 创建窗口 GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL); // 设置窗口边框与内部控件的间隔为15 gtk_container_set_border_width(GTK_CONTAINER(window), 15); // 创建一个button GtkWidget *button = gtk_button_new_with_label("button1"); // 将button添加到window中 gtk_container_add(GTK_CONTAINER(window), button); // 创建一个按钮信号 g_signal_connect(button, "pressed", G_CALLBACK(deal_pressed), "hello, world"); // 显示控件 gtk_widget_show_all(window); gtk_main(); return 0;&#125; 完成计算器计算功能 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include &lt;stdio.h&gt;#include &lt;gtk/gtk.h&gt;#include &lt;string.h&gt;char buf[50] = "";void deal_num(GtkButton *button, gpointer data) &#123; const char *text = gtk_button_get_label(button); // 如果是退格键 if (0 == strcmp("c", text)) &#123; buf[strlen(buf) - 1] = 0; &#125; else &#123; int a = 0, b = 0; char c; // 连接buf和新传入的字符串 strcat(buf, text); if (0 == strcmp("=", text)) &#123; printf("text=====##%s##\n", text); // 从一个字符串中读进与指定格式相符的数据 sscanf(buf, "%d%c%d", &amp;a, &amp;c, &amp;b); printf("---------001-----%c--\n", c); if ('+' == c) &#123; sprintf(buf, "%d", a + b); &#125; else if ('-' == c) &#123; sprintf(buf, "%d", a - b); &#125; else if ('*' == c) &#123; sprintf(buf, "%d", a * b); &#125; else if ('/' == c) &#123; sprintf(buf, "%d", a / b); &#125; &#125; &#125; gtk_entry_set_text(GTK_ENTRY(data), buf);&#125;int main(int argc, char* argv[]) &#123; // 初始化 gtk_init(&amp;argc, &amp;argv); // 创建窗口 GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL); // 创建5行4列的表格容器 GtkWidget *table = gtk_table_new(5, 4, TRUE); // 将table放入到容器中 gtk_container_add(GTK_CONTAINER(window), table); // 创建一个行编辑 GtkWidget *entry = gtk_entry_new(); // 设置行编辑的内容 gtk_entry_set_text(GTK_ENTRY(entry), "2+2=4"); // 设置行编辑不允许编辑 gtk_editable_set_editable(GTK_EDITABLE(entry), FALSE); // 创建0-9数字按钮，+-×/=c功能按钮 GtkWidget *button_0 = gtk_button_new_with_label("0"); GtkWidget *button_1 = gtk_button_new_with_label("1"); GtkWidget *button_2 = gtk_button_new_with_label("2"); GtkWidget *button_3 = gtk_button_new_with_label("3"); GtkWidget *button_4 = gtk_button_new_with_label("4"); GtkWidget *button_5 = gtk_button_new_with_label("5"); GtkWidget *button_6 = gtk_button_new_with_label("6"); GtkWidget *button_7 = gtk_button_new_with_label("7"); GtkWidget *button_8 = gtk_button_new_with_label("8"); GtkWidget *button_9 = gtk_button_new_with_label("9"); GtkWidget *button_add = gtk_button_new_with_label("+"); GtkWidget *button_minus = gtk_button_new_with_label("-"); GtkWidget *button_mul = gtk_button_new_with_label("*"); GtkWidget *button_div = gtk_button_new_with_label("/"); GtkWidget *button_equal = gtk_button_new_with_label("="); GtkWidget *button_delete = gtk_button_new_with_label("c"); // 将table放入表格布局中 gtk_table_attach_defaults(GTK_TABLE(table), entry, 0, 4, 0, 1); gtk_table_attach_defaults(GTK_TABLE(table), button_0, 0, 1, 4, 5); gtk_table_attach_defaults(GTK_TABLE(table), button_1, 0, 1, 3, 4); gtk_table_attach_defaults(GTK_TABLE(table), button_2, 1, 2, 3, 4); gtk_table_attach_defaults(GTK_TABLE(table), button_3, 2, 3, 3, 4); gtk_table_attach_defaults(GTK_TABLE(table), button_4, 0, 1, 2, 3); gtk_table_attach_defaults(GTK_TABLE(table), button_5, 1, 2, 2, 3); gtk_table_attach_defaults(GTK_TABLE(table), button_6, 2, 3, 2, 3); gtk_table_attach_defaults(GTK_TABLE(table), button_7, 0, 1, 1, 2); gtk_table_attach_defaults(GTK_TABLE(table), button_8, 1, 2, 1, 2); gtk_table_attach_defaults(GTK_TABLE(table), button_9, 2, 3, 1, 2); gtk_table_attach_defaults(GTK_TABLE(table), button_add, 1, 2, 4, 5); gtk_table_attach_defaults(GTK_TABLE(table), button_minus, 2, 3, 4, 5); gtk_table_attach_defaults(GTK_TABLE(table), button_mul, 3, 4, 2, 3); gtk_table_attach_defaults(GTK_TABLE(table), button_div, 3, 4, 3, 4); gtk_table_attach_defaults(GTK_TABLE(table), button_equal, 3, 4, 4, 5); gtk_table_attach_defaults(GTK_TABLE(table), button_delete, 3, 4, 1, 2); //7.注册信号函数，把entry传给回调函数deal_num() g_signal_connect(button_0, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_1, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_2, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_3, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_4, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_5, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_6, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_7, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_8, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_9, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_add, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_mul, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_div, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_minus, "pressed", G_CALLBACK(deal_num), entry); g_signal_connect(button_equal, "pressed", G_CALLBACK(deal_num), entry); // 显示 gtk_widget_show_all(window); // 循环 gtk_main(); return 0;&#125; 结果(并不完美) 计算器 glade glade是GTK＋的界面辅助设计工具，可以通过拖放控件的方式快速设计出用户界面，这样的优势在于在设计的同时能直观地看到界面上的控件，并且可以随时调整界面上的设计。 用glade设计的图形用户界面是以XML格式的文件保存，它描述了控件的结构、每个控件的属性。用户可以动态加载这个界面文件。而且，界面和程序逻辑是完全分离，用户修改了界面，也不需要重新编译程序。 安装 12# ubuntu $ sudo apt-get install glade libglade2-dev 笔者是在软件中心直接下载安装的 代码引入 glade文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!-- Generated with glade 3.22.1 --&gt;&lt;interface&gt; &lt;requires lib="gtk+" version="3.20"/&gt; &lt;object class="GtkWindow" id="window1"&gt; &lt;property name="name"&gt;window1&lt;/property&gt; &lt;property name="can_focus"&gt;False&lt;/property&gt; &lt;property name="title" translatable="yes"&gt;第一个顶层窗口&lt;/property&gt; &lt;child type="titlebar"&gt; &lt;placeholder/&gt; &lt;/child&gt; &lt;child&gt; &lt;object class="GtkLayout" id="layout1"&gt; &lt;property name="name"&gt;layout1&lt;/property&gt; &lt;property name="visible"&gt;True&lt;/property&gt; &lt;property name="can_focus"&gt;False&lt;/property&gt; &lt;child&gt; &lt;object class="GtkEntry" id="entry1"&gt; &lt;property name="name"&gt;search_input&lt;/property&gt; &lt;property name="width_request"&gt;200&lt;/property&gt; &lt;property name="height_request"&gt;40&lt;/property&gt; &lt;property name="visible"&gt;True&lt;/property&gt; &lt;property name="can_focus"&gt;True&lt;/property&gt; &lt;property name="text" translatable="yes"&gt;search_input&lt;/property&gt; &lt;property name="primary_icon_tooltip_text" translatable="yes"&gt;search_input&lt;/property&gt; &lt;/object&gt; &lt;packing&gt; &lt;property name="x"&gt;10&lt;/property&gt; &lt;property name="y"&gt;10&lt;/property&gt; &lt;/packing&gt; &lt;/child&gt; &lt;child&gt; &lt;object class="GtkButton" id="button1"&gt; &lt;property name="label" translatable="yes"&gt;搜索&lt;/property&gt; &lt;property name="name"&gt;search_button&lt;/property&gt; &lt;property name="width_request"&gt;100&lt;/property&gt; &lt;property name="height_request"&gt;40&lt;/property&gt; &lt;property name="visible"&gt;True&lt;/property&gt; &lt;property name="can_focus"&gt;True&lt;/property&gt; &lt;property name="receives_default"&gt;True&lt;/property&gt; &lt;/object&gt; &lt;packing&gt; &lt;property name="x"&gt;220&lt;/property&gt; &lt;property name="y"&gt;10&lt;/property&gt; &lt;/packing&gt; &lt;/child&gt; &lt;child&gt; &lt;object class="GtkButton" id="button2"&gt; &lt;property name="label" translatable="yes"&gt;查看&lt;/property&gt; &lt;property name="name"&gt;show_button&lt;/property&gt; &lt;property name="width_request"&gt;100&lt;/property&gt; &lt;property name="height_request"&gt;40&lt;/property&gt; &lt;property name="visible"&gt;True&lt;/property&gt; &lt;property name="can_focus"&gt;True&lt;/property&gt; &lt;property name="receives_default"&gt;True&lt;/property&gt; &lt;/object&gt; &lt;packing&gt; &lt;property name="x"&gt;350&lt;/property&gt; &lt;property name="y"&gt;10&lt;/property&gt; &lt;/packing&gt; &lt;/child&gt; &lt;/object&gt; &lt;/child&gt; &lt;/object&gt;&lt;/interface&gt; 123456789101112131415161718192021#include &lt;stdio.h&gt;#include &lt;gtk/gtk.h&gt;int main(int argc, char* argv[]) &#123; // 初始化 gtk_init(&amp;argc, &amp;argv); // 创建GtkBuilder对象 GtkBuilder *builder = gtk_builder_new(); // 读取glade文件 if(!gtk_builder_add_from_file(builder, "../1.glade", NULL)) &#123; printf("无法打开文件"); &#125; // 获取窗口指针 GtkWidget *window1 = GTK_WIDGET(gtk_builder_get_object(builder, "window1")); // 显示 gtk_widget_show_all(window1); // 循环 gtk_main(); return 0;&#125; 图片控件 图片控件的创建： 12// filename：图片的名字，带路径的话需要加上路径( 相对或绝对 )GtkWidget *gtk_image_new_from_file( const gchar *filename ); 通过上面方法创建的图片控件，以图片默认大小来显示，不能修改其大小。如果要改变图片的大小，我们要借助图片资源对象GdkPixbuf，需要注意的是，GdkPixbuf不属于控件类，它以 Gdk 开头。 图片资源对象pixbuf的创建： 1234// filename：图片的名字，带路径的话需要加上路径( 相对或绝对 )// error：储存错误的指针// 返回值：pixbuf指针GdkPixbuf *gdk_pixbuf_new_from_file(const gchar *filename, GError **error); 设置图片的大小： 123456// src：gdk_pixbuf_new_from_file()的返回值// dest_width：图片的宽度// dest_height：图片的高度// interp_type：是一个枚举变量，标志图片的加载速度和质量，常用GDK_INTERP_BILINEAR// 返回值：指定大小好的pixbuf指针GdkPixbuf *gdk_pixbuf_scale_simple(const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type); 通过gdk_pixbuf_new_from_file(), gdk_pixbuf_scale_simple()创建的pixbuf，它会动态分配空间，占用资源，用完后，需要人为释放资源。 释放资源： 1void g_object_unref(GtkObject *object); 通过pixbuf来创建图片控件： 123// pixbuf：指定好大小的pixbuf// 返回值：图片控件指针GtkWidget *gtk_image_new_from_pixbuf(GdkPixbuf *pixbuf ); 图片控件重新设置一张图片(pixbuf)： 123// image：图片控件指针// pixbuf：指定好大小的pixbufvoid gtk_image_set_from_pixbuf(GtkImage *image, GdkPixbuf *pixbuf ); 示例代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;stdio.h&gt;#include &lt;gtk/gtk.h&gt;int main(int argc, char* argv[]) &#123; // 初始化 gtk_init(&amp;argc, &amp;argv); // 创建一个window GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL); // 创建水平容器 GtkWidget *hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 10); // 添加到window gtk_container_add(GTK_CONTAINER(window), hbox); // 创建图片控件 GtkWidget *image1 = gtk_image_new_from_file("../img/1.png"); // 将image添加到box gtk_container_add(GTK_CONTAINER(hbox), image1); // 创建pixbuf GdkPixbuf *src = gdk_pixbuf_new_from_file("../img/1.png", NULL); // 修改图片大小 GdkPixbuf *dst = gdk_pixbuf_scale_simple(src, 100, 100, GDK_INTERP_BILINEAR); GtkWidget *image2 = gtk_image_new_from_pixbuf(dst); // 释放pxibuf资源 g_object_unref(src); g_object_unref(dst); // 将image2添加到box gtk_container_add(GTK_CONTAINER(hbox), image2); // 获取控件里的pixbuf GdkPixbuf *tmp = gtk_image_get_pixbuf(GTK_IMAGE(image2)); GtkWidget *image3 = gtk_image_new_from_pixbuf(tmp); g_object_unref(tmp); gtk_container_add(GTK_CONTAINER(hbox), image3); // 给创建的图片控件重新设置图片 GtkWidget *image4 = gtk_image_new_from_file("../img/1.png"); gtk_container_add(GTK_CONTAINER(hbox), image4); src = gdk_pixbuf_new_from_file("../img/2.png", NULL); dst = gdk_pixbuf_scale_simple(src, 200, 200, GDK_INTERP_BILINEAR); gtk_image_set_from_pixbuf(GTK_IMAGE(image4), dst); g_object_unref(src); g_object_unref(dst); // 显示所有控件 gtk_widget_show_all(window); // 循环 gtk_main(); return 0;&#125; 进度条控件 文档 进度条的创建 12// 返回值：进度条指针GtkWidget *gtk_progress_bar_new(void); 设置进度条显示的进度比例 123// pbar：需要操作的进度条// fraction：0.0到1.0void gtk_progress_bar_set_fraction(GtkProgressBar *pbar, gdouble fraction); 获取进度条显示的进度比例 123// pbar：需要操作的进度条// 返回值：进度比例gdouble gtk_progress_bar_get_fraction (GtkProgressBar *pbar); 设置滑槽上的文本显示 123// pbar：需要操作的进度条// text：设置的文本内容void gtk_progress_bar_set_text(GtkProgressBar *pbar, gchar *text); 设置进度条的移动方向gtk+-2版本 1234567// pbar：需要操作的进度条// orientation：移动方向，它是一个枚举变量// GTK_PROGRESS_LEFT_TO_RIGHT：从左向右 // GTK_PROGRESS_RIGHT_TO_LEFT：从右向左 // GTK_PROGRESS_BOTTOM_TO_TOP：从下向上 // GTK_PROGRESS_TOP_TO_BOTTOM：从上向下void gtk_progress_bar_set_orientation(GtkProgressBar *pbar, GtkProgressBarOrientation orientation); 获取进度条的方向gtk+-2版本 123// pbar：需要操作的进度条// 返回值：进度条的方向，它是一个枚举类型GtkProgressBarOrientationgtk_progress_bar_get_orientation(GtkProgressBar *pbar); 设置进度条的移动方向gtk+-3版本 1void gtk_progress_bar_set_inverted (GtkProgressBar *pbar, gboolean inverted); 1gboolean gtk_progress_bar_get_inverted (GtkProgressBar *pbar); 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;gtk/gtk.h&gt;//回调函数，切换进度条的移动方向void toggle_orientation(GtkWidget *widget, gpointer data)&#123; switch (gtk_progress_bar_get_inverted(GTK_PROGRESS_BAR(data)) ) &#123; case TRUE: gtk_progress_bar_set_inverted(GTK_PROGRESS_BAR(data), FALSE); break; case FALSE: gtk_progress_bar_set_inverted(GTK_PROGRESS_BAR(data), TRUE); break; default: break; &#125;&#125;//回调函数，更新进度条，这样可以看到进度条的移动void callback(GtkWidget *widget, gpointer data)&#123; gdouble new_val = gtk_progress_bar_get_fraction(GTK_PROGRESS_BAR(data)) +0.05; if (new_val &gt; 1.0) &#123; new_val = 0.0; &#125; //设置进度条新值 gtk_progress_bar_set_fraction(GTK_PROGRESS_BAR(data), new_val);&#125;int main(int argc, char *argv[])&#123; //1.gtk环境的初始化 gtk_init(&amp;argc, &amp;argv); //2.创建一个窗口 GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL); //设置窗口的标题 gtk_window_set_title(GTK_WINDOW(window), "gtk_progress_bar"); //设置窗口边框宽度 gtk_container_set_border_width(GTK_CONTAINER(window), 10); //3.设置窗口的最小大小 gtk_widget_set_size_request(window, 300, 200); //4.窗口关联destroy信号到gtk_main_quit g_signal_connect(window, "destroy", G_CALLBACK(gtk_main_quit), NULL); //5.创建一个垂直容器 GtkWidget *vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 5); //将vbox添加到window中 gtk_container_add(GTK_CONTAINER(window), vbox); //6.创建一个进度条 GtkWidget *progress = gtk_progress_bar_new(); //将progress添加到vbox中 gtk_container_add(GTK_CONTAINER(vbox), progress); //7.设置进度条的百分比为50% gtk_progress_bar_set_fraction(GTK_PROGRESS_BAR(progress), 0.5); //8.设置进度条上显示的文字 gtk_progress_bar_set_text(GTK_PROGRESS_BAR(progress), "some text"); //9.添加一个button1按钮,切换方向 GtkWidget *button1 = gtk_button_new_with_label("right to lift"); gtk_container_add(GTK_CONTAINER(vbox), button1); g_signal_connect(button1, "clicked", G_CALLBACK( toggle_orientation ), progress); //10.添加一个button2，移动进度条 GtkWidget *button2 = gtk_button_new_with_label("add"); gtk_container_add(GTK_CONTAINER(vbox), button2); g_signal_connect(button2, "clicked", G_CALLBACK(callback), progress); //11.显示所欲窗口 gtk_widget_show_all(window); //12.主事件循环 gtk_main(); return 0;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[ffmpeg录制基础]]></title>
    <url>%2F2019%2F07%2F24%2Fffmpeg%E5%BD%95%E5%88%B6%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[ffmpeg录制功能 ffmpeg第一步：录制音视频 录制设备查询 1234567891011121314151617➜ $ ffmpeg -hide_banner -devicesDevices: D. = Demuxing supported .E = Muxing supported -- DE alsa ALSA audio output DE fbdev Linux framebuffer D iec61883 libiec61883 (new DV1394) A/V input device D jack JACK Audio Connection Kit D kmsgrab KMS screen capture D lavfi Libavfilter virtual input device DE oss OSS (Open Sound System) playback DE pulse Pulse audio output E sdl,sdl2 SDL2 output device DE video4linux2,v4l2 Video4Linux2 output device D x11grab X11 screen capture, using XCB E xv XV (XVideo) output device D：输入设备 E：输出设备 ffmpeg输入设备列表 alsa 音频 ALSA是Advanced Linux Sound Architecture的缩写，高级Linux声音架构的简称,它在Linux操作系统上提供了音频和MIDI（Musical Instrument Digital Interface，音乐设备数字化接口）的支持，需要安装libasound库 android_camera 音视频 Android相机输入设备。 此输入设备使用Android Camera2 NDK API，该API可在API级别为24+的设备上使用。在配置期间自动检测android_camera的可用性。 该设备允许从Android设备上的所有摄像头进行捕获，这些摄像头集成在Camera2 NDK API中。 可用的摄像机在内部枚举，可以使用camera_index参数进行选择。输入文件字符串被丢弃。 通常，后置摄像头的索引为0，而前置摄像头的索引为1。 avfoundation 音视频 苹果设备 bktr BSD 视频输入设备 decklink BlackMagic Decklink是一款影像采集编辑产品，接口类型PCI-33/66、PCI-X 133&amp;100MHz 。 dshow Windows DirectShow input device. fbdev Linux framebuffer（Linux帧缓冲）输入设备，只能录制终端的视频 Linux framebuffer是一种独立于硬件的图像抽象层，它用于在计算机屏幕上显示图像,通常是在控制台（环境）。它可以通过一个文件设备节点访问，通常为：/dev/fb0 gdigrab Win32 GDI 屏幕截取设备 这个设备允许你截取显示在Windows（系统）上的屏幕区域。 iec61883 使用iec61883的FireWire（火线） DV/HDV输入设备。 要允许这个输入设备，需要libiec61883, libraw1394 和 libavc1394被安装到系统中。此外还要在编译时配置--enable-libiec61883以支持。 jack JACK输入设备。 为了能使用JACK设备，需要系统上存在libjack kmsgrab lavfi Libavfilter输入虚拟设备 这个输入设备可以从libavfilter滤镜链图的一个开放输出端口读取数据。 对于每个滤镜链图开放输出端口，这个输入设备将创建一个对应的流映射到这个端口进行输出。当前只支持视频数据。滤镜链图是通过选项graph描述的。 libcdio 基于libcdio的音乐CD输入设备。 需要系统中有libcdio才能启用，且编译时需要用--enable-libcdio配置选项允许。 libdc1394 IIDC1394输入设备，其基于libdc1394和libraw1394 编译允许需要配置--enable-libdc1394 openal 这个OpenAL输入设备支持在所有实现了OpenAL 1.1的系统上进行音频捕获。 要编译使用它需要系统包含OpenAL头和libraries库，并且设置编译选项--enable-openal oss pulse PulseAudio（脉冲音频）输入设备 要使用须编译配置设置--enable-libpulse sndio sndio输入设备。 要使用它需要系统安装并配置有libsndio库 video4linux2, v4l2 Video4Linux2 输入视频设备 "v4l2"是"video4linux2"的别名 编译需要v4l-utiles支持（--enable-libv4l2编译选项被配置），也可用于-use_libv4l2输入设备选项。 捕获的设备名是一个文件设备节点，通常Linux系统在设备（例如USB摄像头）插入到系统时自动创建这样的节点，会被命名为/dev/videoN，N是设备索引序号 Video4Linux设备通常只支持有限的分辨率（width x height）和帧率,通过-list_formats all选项来获取支持情况。一些设备，例如电视卡可以支持1个或者多个标准，它支持的标准可以通过-list_standards all来了解。 时间戳时基单位为1microsecond。根据内核版本和配置，时间戳可以基于实时间（real time clock——绝对时间，一种起源于Unix的表示方式）或者单调时钟（monotonic clock——通常源自启动时间，不受NTP或者手动改变）。-timestamps abs或者-ts abs选择启用实时间。 vfwcap vfw（Video for Windows）捕获输入端 文件名必须是捕获设备索引，范围0-9可以用list作为文件名，将输出一个设备列表。任何数字外其它文件名被视作设备索引0。 x11grab X11 视频输入设备 使用需要libxcb库，它会在编译时自动检测。 fbdev： linux终端录制设备 查看使用指定采集设备参数 12345$ ffmpeg -hide_banner -h demuxer=fbdevDemuxer fbdev [Linux framebuffer]:fbdev indev AVOptions: -framerate &lt;video_rate&gt; .D....... (default "25")# framerate 帧数 默认25帧 1$ sudo ffmpeg -framerate 30 -f fbdev -i /dev/fb0 output.mp4 v412：linux摄像头录制设备 1$ ffmpeg -hide_banner -h demuxer=Video4Linux2 参数 类型 说明 -standard 字符串 设置tv标准 -channel 整数 设置tv通道 -video_size 图像大小 设置采集视频频帧大小 -pixel_format 字符串 设置采集视频的分辨率 -input_format 字符串 设置采集视频的分辨率 -framerate 字符串 设置采集视频帧率 -list_formats 整数 列举输入视频信号的信息 -list_standards 整数 列举标准信息 -timestamps 整数 设置时间戳 -ts 整数 设置模拟器分析帧使用的时间戳 -use_libv4l2 布尔 使用第三方库libv412选项 12$ ffmpeg -hide_banner -f Video4Linux2 -list_formats all -i /dev/video0# /dev/video0根据自己的摄像头来设置 x11grab：linux桌面录制设备 桌面录制方法 linux环境下如果此方法报错 12Cannot open display :0.0, error 1.:0.0: Input/output error 则需要查看$DISPLAY， 在Linux/Unix类操作系统上, DISPLAY用来设置将图形显示到何处. 直接登陆图形界面或者登陆命令行界面后使用startx启动图形, DISPLAY环境变量将自动设置为:0:0 12$ echo $DISPLAY:1 1$ ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :1+100,200 output.mp4 video_size 字符串 输入采集视频的分辨率 framerate 字符串 输入采集的视频帧率 -f 指定输入设备 -i 指定输入内容（此处为显示器）+100, 200 代表从100, 200处位移 使用pulse录制音频 1$ pactl list sources # 查看全部输入设备 1$ ffmpeg -f pulse -i default pulse.wav 同时录制视频和音频 1$ ffmpeg -video_size 1366x768 -framerate 25 -f x11grab -i :1 -f pulse -ac 2 -i 1 output.mkv 1$ ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :1+100,200 -f alsa -ac 2 -i hw:0 output.mkv]]></content>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ffmpeg封装与解封装基础]]></title>
    <url>%2F2019%2F07%2F24%2Fffmpeg%E5%B0%81%E8%A3%85%E4%B8%8E%E8%A7%A3%E5%B0%81%E8%A3%85%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[ffmpeg封装与解封装 1$ ffmpeg -i input.mkv -vcodec copy -acodec copy output.mp4 -i 输入文件 -vcodec copy 视频编码处理方式 -acodec copy 音频编码处理方式 12$ ffmpeg -i input.mp4 -vn -acodec copy output.aac # 抽出音频$ ffmpeg -i input.mp4 -vcodec copy -an output.h264 # 抽出视频 提取YUV数据 1$ffmpeg -i input.mp4 -an -c:v rawvideo -pix_fmt yuv420p out.yuv -i 输入设备 -an 不需要音频 -c:v 使用rawvideo对视频进行编码 -pix_fmt 像素格式 播放源文件 1ffplay -video_size 1366x768 out.yuv -video_size 指定像素 提取PCM数据 1$ ffmpeg -i input.mp4 -vn -ar 44100 -ac 2 -f s16le out.pcm -i 输入设备 -vn 不需要视频 -ar 44100 -a 音频 read 音频采样率44.1k -ac 2 -a 音频 c2 channel 2 双声道 -f 数据存储格式 s16le s: 有符号的 播放源文件 1$ ffplay -ar 44100 -ac 2 -f s16le out.pcm]]></content>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ffmpeg直播基础]]></title>
    <url>%2F2019%2F07%2F24%2Fffmpeg%E7%9B%B4%E6%92%AD%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[直播推流 1$ ffmpeg -re -i out.mp4 -c copy -f flv rtmp://server/live/streamName -re 保持本地视频和流媒体服务器帧率一致 -c 不做操作，直接复制 -f 格式 直播拉流 1$ ffmpeg -i rmtp://server/live/streamName -c copy dump.flv]]></content>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ffmpeg滤镜基础]]></title>
    <url>%2F2019%2F07%2F24%2Fffmpeg%E6%BB%A4%E9%95%9C%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[裁剪滤镜 1$ ffmpeg -i output.mkv -vf crop=in_w-400:in_h-200 -c:v libx264 -c:a copy output.mp4 -i 输入 -vf -v 视频 f 滤镜 crop 裁剪滤镜 -c:v -c:a copy 音频直接复制 视频裁剪 1$ ffmpeg -i output.mkv -ss 00:00:00 -t 10 output.mp4 -ss 开始时间(时:分:秒) -t 时常(秒) 视频合并 1$ ffmpeg -f concat -i inputs.txt output.mp4 -f concat 拼接 -i 输入文件 inputs.txt 记录全部等待拼接的文件 inputs.txt每一行为“file filename” file 'out1.mp4' file 'out2.mp4' output.mp4 输出文件 视频转图片 1$ ffmpeg -i output.mp4 -r 1 -f image2 image-%3d.jpeg -i 输入文件 -r 1, r 帧率， 1 每秒一张图片 -f image2, 转成image2格式 image-%3d.jpeg 输出文件 图片转视频 1$ ffmpeg -i image-%3d.jpeg output.mp4]]></content>
  </entry>
  <entry>
    <title><![CDATA[ffmpeg命令基础]]></title>
    <url>%2F2019%2F07%2F24%2Fffmpeg%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[ffmpeg基本流程 1234文件-&gt;音视频流: demuxer解封装音视频流-&gt;数据包: decoder解码数据包-&gt;音视频流: encoder编码音视频流-&gt;文件: muxer封装 ffmpeg基本定义 文件：也叫容器Container，比如mp4文件、flv文件等，容器的类型决定了信息被存放在文件中的位置。 音视频流：]]></content>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ffmpeg视频基础]]></title>
    <url>%2F2019%2F07%2F24%2Fffmpeg%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[基本概念 H264基本概念 I帧： 关键帧、采用帧内压缩技术 P帧：向前参考帧，采用帧内压缩技术 B帧：双向参考帧，采用帧内压缩技术 GOF: &gt; 一组帧group of frame SPS: &gt; Sequence parameter set: 序列参数集：存放一组帧的存放帧数，参考帧数目，解码图像尺寸等 PPS： &gt; picture parameter set: 图像参数集：存放熵编码模式选择标识、片组数目等 视频编解码器 x264：最流行的 x265：耗性能 openH264：支持svc视频技术 vp8: x264 vp9: x265 H264压缩技术 帧内压缩：解决空域数据冗余技术 帧间压缩：解决时域数据冗余技术 整数离散余弦变换(DCT)：将空间上的相关性变为频域上无关的数据然后进行量化 CABAC压缩 H264结构图 H264编码分层 NAL层：network abstraction layer 视频数据网络抽象层 VCL层：video coding layer 视频数据编码层 码流 SODB &gt; string of data bits 原始数据比特流，它是由vcl层产生的 RBSP &gt; 在SODB最后一位补1，不按字节对其则补0 EBSP NALU NAL HEADER + EBSP]]></content>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ffmpeg音频基础]]></title>
    <url>%2F2019%2F07%2F24%2Fffmpeg%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[2# 音频知识（未完工） 声音的本质 声音其实是一种能量波，因此也有频率和振幅的特征，频率对应于时间轴线，振幅对应于电平轴线。波是无限光滑的，弦线可以看成由无数点组成，由于存储空间是相对有限的，数字编码过程中，必须对弦线的点进行采样。 声音三要素 音高/音调/音频： 客观上音高大小主要取决于声波基频的高低，频率高则音调高，反之则低，单位用赫兹(Hz）表示。儿童(高音区)-&gt;女生(高音区)-&gt;男生（低音区） 音量/响度/声强：常说的声音大小，主要取决于声波振幅的大小。 音色/音品：和材质相关（比如钢琴等），本质是谐波。 音量和声调 心理声学 人类的听觉范围：20Hz-20kHz 音频量化过程 音频量化过程 按横轴时间进行切割 按纵轴振幅(决定音量)进行切割 编码转成数字信号 采样大小：一个采样用多个bit存放，常用16位(216=65535)，振幅 采样率：采样频率8k、16k、32k、44.1k、48k等 采样率概念 声道数：单声道、双声道、多声道 码率计算 &gt; 音频流的码率=采样率×采样大小×声道数 &gt; 例如：采样率44.1kHz、采样大小为16bit、双声道的pcm编码wav文件，码率=44.1k×16×2=1411.2kb/s 音频压缩技术 消除音频冗余数据 删除人耳听觉范围外的音频信号： 20Hz-20kHz 被掩避掉的音频信号： 频域遮蔽： 时域遮蔽： 哈夫曼无损编码 音频编解码器 常见的编解码器 OPUS： 开源、rmtp协议不支持 AAC：收费、适合实时互动项目。 Vorbis：开源 Speex：开源、优势：还支持一些回音消除、降噪等处理办法 iLBC AMR G.711：与固定电话就行融合 性能对比： OPUS &gt; AAC(常用) &gt; Vorbis AAC： advanced audio coding 常见规格： AAC LC（低复杂度，码流128k）、AAC HE V1（）、 AAC HE V2 AAC LC + SBR = AAC HE V1 AAC HE V1 + PS = AAC HE V2 aac规格 AAC格式： &gt; ADIF &gt; ADTS AAC编码库： libfdk_aac(常用) &gt; ffmpeg aac &gt; libfaac &gt; libvo_aacenc]]></content>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbix入门基础]]></title>
    <url>%2F2018%2F11%2F16%2Fzabbix%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[安装服务器端 官方 1. 根据实际情况选择数据库 2. 根据实际情况选择操作系统 汉化 错误提示 You are not able to choose some of the languages, because locales for them are not installed on the web server. # 选中zh-CN UTF-8 sudo dpkg-reconfigure locales sudo service apache2 restart 安装客户端 官方 参考 设置邮件报警 Media types 交换分区错误问题 Lack of free swap space 现在的云主机默认没有交换分区 Configuration-&gt;Templates-&gt;Template OS Linux-&gt;Triggers-&gt;Lack of free swap space on {HOST.NAME}-&gt;Expression {Template OS Linux:system.swap.size[,pfree].last(0)}&lt;50改成 {Template OS Linux:system.swap.size[,pfree].last(0)}&lt;50 and {Template OS Linux:system.swap.size[,free].last(0)}&lt;&gt;0]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[centos7.2安装使用openResty]]></title>
    <url>%2F2018%2F11%2F14%2Fcentos7.2%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8openResty%2F</url>
    <content type="text"><![CDATA[# 安装 sudo yum install pcre-devel openssl-devel gcc curl wget https://openresty.org/download/openresty-1.13.6.2.tar.gz tar -xzvf openresty-1.13.6.2.tar.gz cd openresty-1.13.6.2 # 默认安装到/usr/local/openresty, 可以指定./configure --prefix=/your/path/openresty设置 # 默认安装的组件https://openresty.org/cn/components.html ./configure --with-luajit \ --without-http_redis2_module \ --with-http_iconv_module \ --with-http_postgres_module make &amp;&amp; sudo make install # 创建软链接 ln -s /usr/local/openresty/nginx/sbin/nginx /usr/local/nginx # 启动/重启/停止 nginx nginx -s reload nginx -s stop 配置 openResty的nginx和普通nginx配置一致]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux环境nginx/php-fpm权限问题]]></title>
    <url>%2F2018%2F11%2F10%2Flinux%E7%8E%AF%E5%A2%83nginx-php-fpm%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[当前用户hanchang, nginx用户nginx vim /etc/nginx/nginx.conf user hanchang; vim /etc/php-fpm.d/www.conf user = hanchang group = nginx listen.owner = hanchang listen.group = nginx listen.mode = 0660 划重点 将当前用户加入nginx用户组 sudo usermod -a -G nginx hanchang]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ubuntu16.04安装及使用SVN]]></title>
    <url>%2F2018%2F10%2F09%2Fubuntu16.04%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8SVN%2F</url>
    <content type="text"><![CDATA[服务器端安装 官方推荐 # 安装包 sudo apt install subversion apache2 libapache2-svn # 创建目录及两个svn项目 mkdir svn svnadmin create svn/doneself-app svnadmin create svn/doneself-web # 多个项目公用一个权限文件 cp -rf svn/doneself/conf/passwd snv/ cp -rf svn/doneself/conf/authz snv/ # 编辑每个项目的配置文件 vim svn/doneself/conf/svnserve.conf [general] # 匿名用户没有权限 anon-access = none # 验证用户写权限 auth-access = write # 账号密码文件路径 password-db = ../../passwd # 权限文件路径 authz-db = ../../authz # 编写账号密码文件 vim svn/passwd [users] ui = ui # 注意空格 # 编写组和权限文件 vim svn/ [groups] ui = ui [doneself-app:/] ui = wr 启动svn服务器 # 启动,默认端口号3690 sudo svnserve -d -r /home/svn # 结束 sudo pkill svnserve]]></content>
      <categories>
        <category>办公</category>
        <category>后端</category>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[vue.js]]></title>
    <url>%2F2018%2F09%2F26%2Fvuejs%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[安装nodejs node入门基础 安装vue-cli 123$ cnpm install -g @vue/cli$ vue --version$ vue add eslint 创建项目 1$ vue create hello-world]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[centos7.2安装使用sentry]]></title>
    <url>%2F2018%2F09%2F08%2Fcentos7.2%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8sentry%2F</url>
    <content type="text"><![CDATA[# 先安装docker https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce # 后安装sentry https://github.com/getsentry/onpremise $ mkdir sentry $ cd sentry $ mkdir -p data/{sentry,postgres} $ git clone https://github.com/getsentry/onpremise $ cd onpremise $ docker-compose run --rm web config generate-secret-key # 创建一个secret key并配置到docker-compose.yml中的SENTRY_SECRET_KEY. $ docker-compose run --rm web upgrade # 创建数据库 $ docker-compose up -d # 后台执行]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[centos7.2使用rabbitMQ]]></title>
    <url>%2F2018%2F09%2F08%2Fcentos7.2%E4%BD%BF%E7%94%A8rabbitMQ%2F</url>
    <content type="text"><![CDATA[123456# 安装 Erlang$ yum -y install epel-release$ yum -y update$ yum -y install erlang socat# 查看是否安装成功$ erl -version 123456789101112131415161718192021# 安装rabbitMQ3.6版本$ wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.10/rabbitmq-server-3.6.10-1.el7.noarch.rpm$ rpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc$ rpm -Uvh rabbitmq-server-3.6.10-1.el7.noarch.rpm# 启用,开机启动,状态$ systemctl start rabbitmq-server$ systemctl enable rabbitmq-server$ systemctl status rabbitmq-server# 启动图形界面管理rabbitmq-plugins enable rabbitmq_managementchown -R rabbitmq:rabbitmq /var/lib/rabbitmq/rabbitmqctl add_user admin StrongPassword # 踩坑:密码不要以';'结尾rabbitmqctl set_user_tags admin administratorrabbitmqctl set_permissions -p / admin ".*" ".*" ".*"# 自定义配置文件# 在rabbitmq 3.7.0 之前，rabbitmq.conf 使用了Erlang语法配置格式，新的版本使用了sysctl 格式.cd /etc/rabbitmqtouch rabbitmq.conf 12345# 访问图形界面http://Your_Server_IP:15672/# api文档http://Your_Server_IP:15672/api 常见错误处理 Recovering 69477 queues, available file handles: 924. Please increase max open file handles limit to at least 69477! 打开文件大小限制 123456# https://stackoverflow.com/questions/46240032/rabbitmq-file-descriptor-limit$ sudo systemctl edit rabbitmq-server.service # 找到systemd service 地址$ sudo vim /etc/systemd/system/rabbitmq-server.service.d/limits.conf[Service]LimitNOFILE=300000 Mnesia is overloaded: {dump_log,write_threshold} 12345678# 编辑配置文件$ sudo vim /etc/rabbitmq/rabbitmq.config[ &#123;mnesia, [&#123;dump_log_write_threshold, 5000&#125;]&#125;, &#123;rabbit, [&#123;tcp_listeners, [5673]&#125;]&#125;].]]></content>
      <categories>
        <category>后端</category>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[postgresql入门基础]]></title>
    <url>%2F2018%2F08%2F07%2Fpostgresql%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[manjaro安装 安装postgresql 1234$ git clone https://aur.archlinux.org/postgresql-9.6.git$ cd postgresql-9.6-git$ less PKGBUILD # 查看$ makepkg -si # 安装 1234# 初始化数据$ sudo su postgres -l $ initdb --locale $LANG -E UTF8 -D &apos;/var/lib/postgres/data/&apos;$ exit 123# 启动及开机启动sudo systemctl start postgresql.service sudo systemctl enable postgresql.service 123# 登录$ sudo su postgres -l$ psql 安装postgis 1, 安装proj4.9 下载源码 地址 1234567tar xfz proj-4.9.3.tar.gzcd proj-4.9.3./configuremakesudo make install# 安装postgis时，如果没有找到库则需要复制动态库sudo ln -s /usr/local/lib/libproj.so.12 /usr/lib/libproj.so.12 2, 安装postgis2.5.2 下载源码 地址 12345678wget http://download.osgeo.org/postgis/source/postgis-2.5.2.tar.gztar xfz postgis-2.5.2.tar.gzcd postgis-2.5.2./configuremakesudo make installsudo ldconfigsudo make comments-install 创建库 12345678# 第一件事是使用\password命令，为postgres用户设置一个密码。postgres=# \password postgres# 第二件事是创建数据库用户dbuser（刚才创建的是Linux系统用户），并设置密码。postgres=# CREATE USER dbuser WITH PASSWORD &apos;password&apos;;# 第三件事是创建用户数据库，这里为exampledb，并指定所有者为dbuser。postgres=# CREATE DATABASE exampledb OWNER dbuser;# 第四件事是将exampledb数据库的所有权限都赋予dbuser，否则dbuser只能登录控制台，没有数据库操作权限。postgres=# GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser; ubuntu/centos安装 ubuntu安装 centos安装 centos7.2 安装postgresql9.6 # 添加RPM yum install https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm # 安装PostgreSQL 9.6 # postgresql96-server 数据库核心服务端 # postgresql96-contrib 附加第三方扩展 # postgresql96-devel C语言开发Header头文件和库 yum install postgresql96-server postgresql96-contrib postgresql96-devel # 验证是否安装成功 rpm -aq| grep postgres # 设置目录（可省略） cd /mnt sudo mkdir vdb1 sudo chown -R postgres:postgres vdb1 sudo chmod 700 vdb1 vi /usr/lib/systemd/system/postgresql-9.6.service Environment=PGDATA=/mnt/vdb1/ 修改为自己的新的数据路径 # 初始化数据库 sudo /usr/pgsql-9.6/bin/postgresql96-setup initdb # 开启服务 sudo service postgresql-9.6 start 或者 systemctl start postgresql-9.6.service # 开机启动 sudo sudo chkconfig postgresql-9.6 on 或者 systemctl enable postgresql-9.6.service # 配置文件 /var/lib/pgsql/9.6/data/postgresql.conf 通用设置 /var/lib/pgsql/9.6/data/pg_hba.conf 控制访问安全 /var/lib/pgsql/9.6/data/pg_ident.conf 配合pg_hba.conf使用 sudo su postgres psql # 进入命令行模式 # 修改密码 ALTER USER postgres WITH PASSWORD &#39;密码&#39;; # 创建用户 CREATE USER userdoneself WITH PASSWORD &#39;密码passworddoneself&#39;; # 创建数据库 create --encoding=UTF8 database dbdoneself owner userdoneself; # 赋予权限 grant all privileges on database dbdoneself to userdoneself; \q # 安装postgresql时，系统会自动创建postgres用户 # 开启远程访问 vi /var/lib/pgsql/9.6/data/postgresql.conf 或者 vi /mnt/vdb1/postgresql.conf(创建了目录) 修改#listen_addresses = &#39;localhost&#39; 为 listen_addresses=&#39;*&#39; # 连接数据库 先配置登录权限 vim pg_hba.conf # 是否远程登录 数据库 用户名 ip地段 方式 # 允许doneself用户远程访问 host doneself doneself 127.0.0.1/32 md5 # 允许管理员密码登录 local all postgres md5 # 如果不知道怎么配置， 将全部登录方式改成md5 # 查看版本 /usr/pgsql-9.6/bin/psql --version 安装postgis2 centos7.2 sudo yum install postgis2_96 # 96和安装的postgresql一致 sudo yum install ogr_fdw96 # 安装ogrfdw sudo yum install pgrouting_96 # 安装pgrouting # 用管理员登录postgerysql &gt;-- Enable PostGIS (includes raster) CREATE EXTENSION postgis; -- Enable Topology CREATE EXTENSION postgis_topology; -- Enable PostGIS Advanced 3D -- and other geoprocessing algorithms -- sfcgal not available with all distributions CREATE EXTENSION postgis_sfcgal; -- fuzzy matching needed for Tiger CREATE EXTENSION fuzzystrmatch; -- rule based standardizer CREATE EXTENSION address_standardizer; -- example rule data set CREATE EXTENSION address_standardizer_data_us; -- Enable US Tiger Geocoder CREATE EXTENSION postgis_tiger_geocoder; # 验证是否安装成功 #postgres=&gt; postgis_full_version(); 安装postgresql中文全文搜索zhparser centos7.2 yum install bzip2 # 安装解压包 # 安装SCWS中文分词 https://github.com/hightman/scws wget http://www.xunsearch.com/scws/down/scws-1.2.3.tar.bz2 tar -jxvf scws-1.2.3.tar.bz2 cd scws-1.2.3 ./configure make install # 测试 scws &#39;请问怎么自己动手做西红柿蛋炒饭&#39; -c utf-8 # 安装zhparser git clone https://github.com/amutu/zhparser.git cd zhparser export PATH=$PATH:/usr/pgsql-9.6/bin/ cmake &amp;&amp; make install # 登录（第一次登录） &gt; sudo su - postgres # 修改可以md5登录后 &gt; &gt; psql -U user -D database -W &gt; 输入口令 # 创建用户 user=&gt; CREATE USER dbuser WITH PASSWORD &#39;password&#39;; # 修改密码 user=&gt; ALTER USER dbuser WITH PASSWORD &#39;newpassword&#39;; # 赋予权限 user=&gt; GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser; # 允许用户创建数据库 user=&gt; ALTER USER doneself CREATEDB; # 设置为超级管理员 user=&gt; ALTER ROLE doneself SUPERUSER; # 创建数据库 user=&gt; Create database exampledb owner=dbuser template= template1 ENCODING = &#39;UTF8&#39;; # 选择数据库 user=&gt; \c database # 查看当前数据库所有表 user=&gt; \dt user=&gt; \d 数据库 —— 得到所有表的名字 user=&gt; \d 表名 —— 得到表结构]]></content>
      <categories>
        <category>后端</category>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java入门基础]]></title>
    <url>%2F2018%2F01%2F31%2Fjava%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[linux安装java开发环境 安装java 下载源码 123456# 从官方网站下载javaLTS版本源码并复制到当前目录# 下载地址: https://www.oracle.com/technetwork/java/javase/downloads/index.html$ sudo mkdir /usr/java$ sudo cd /usr/java$ sudo cp -rf ~/Download/jdk-11.0.3_linux-x64_bin.tar.gz .$ sudo tar -zxvf jdk-11.0.3_linux-x64_bin.tar.gz &amp;&amp; rm jdk-11.0.3_linux-x64_bin.tar.gz 设置环境变量 1$ sudo vi /etc/profile 123456#set java environmentJAVA_HOME=/usr/java/jdk-11.0.3JRE_HOME=/usr/java/jdk-11.0.3/jre # 如果安装包中没有jre文件夹，则改成和JAVA_HOME一致CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH 验证 1234567$ which java/usr/java/jdk-11.0.3/bin/java$ java -versionjava version "11.0.3" 2019-04-16 LTSJava(TM) SE Runtime Environment 18.9 (build 11.0.3+12-LTS) Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.3+12-LTS, mixed mode) linux安装tomcat 12345$ cd /home/zhc/java# https://tomcat.apache.org/download-90.cgi$ wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-9/v9.0.22/bin/apache-tomcat-9.0.22.tar.gz$ tar -xzvf apache-tomcat-9.0.22.tar.gz$ mv apache-tomcat-9.0.22 tomcat 12345678# 启动 http://127.0.0.1:8080$ sudo ./tomcat/bin/startup.shUsing CATALINA_BASE: /home/zhc/work/java/tomcatUsing CATALINA_HOME: /home/zhc/work/java/tomcatUsing CATALINA_TMPDIR: /home/zhc/work/java/tomcat/tempUsing JRE_HOME: /usr/java/jdk-11.0.4Using CLASSPATH: /home/zhc/work/java/tomcat/bin/bootstrap.jar:/home/zhc/work/java/tomcat/bin/tomcat-juli.jarTomcat started. 12# 关闭$ sudo ./tomcat-9/bin/shutdown.sh centos设置为系统启动 idea配置tomcat服务 修改虚拟路径 123# 以下两个配置需要保持一致RUN/DEBUG Configurations -&gt; Server -&gt; URL http://localhost:8080/&#123;ProjectName&#125;_war_exploded/ RUN/DEBUG Configurations -&gt; Deployment -&gt; Application content /&#123;ProjectName&#125;_war_exploded 安装maven java开发maven构建工具入门基础 安装gradle java开发gradle构建工具入门基础 安装commons-logging 12345# 从官网下载二进制文件包# http://commons.apache.org/proper/commons-logging/download_logging.cgi$ wget http://mirrors.tuna.tsinghua.edu.cn/apache//commons/logging/binaries/commons-logging-1.2-bin.tar.gz$ tar -xzvf commons-logging-1.2-bin.tar.gz$ sudo mv commons-logging-1.2 /usr/java_jar/ 使用sdkman管理sdk sdkman 打包 创建jar包 12# 编写应用程序$ sudo vim com/zhuohc/jar/HelloWorld.java 12345678package com.zhuohc.jar;public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("hello world!"); &#125;&#125; 1234$ javac com/zhuohc/jar/HelloWorld.java # 编译$ jar cvf hello.jar com/zhuohc/jar/HelloWorld.class # 打包 参数c: 创建， 参数v: 输出具体文件信息， 参数f: 指定输出文件名已添加清单正在添加: com/zhuohc/jar/HelloWorld.class(输入 = 441) (输出 = 302)(压缩了 31%) 查看jar包信息 1234$ jar tvf hello.jar # 查看 参数t： 查看0 Fri Aug 16 14:21:06 CST 2019 META-INF/66 Fri Aug 16 14:21:06 CST 2019 META-INF/MANIFEST.MF441 Fri Aug 16 14:20:20 CST 2019 com/zhuohc/jar/HelloWorld.class 提取jar包信息 1234$ jar xvf hello.jar # 解压 参数x： 提取extract已创建: META-INF/已解压: META-INF/MANIFEST.MF已解压: com/zhuohc/jar/HelloWorld.class jar包清单文件 12创建清单文件$ sudo vim Manifest.txt Manifest.txt指定程序入口 警告： 文本文件必须以新行或回车符结束。如果最后一行不以新行或回车结束，则不会正确解析. 12# Manifest.txtMain-Class: com.zhuohc.jar.HelloWorld 12# 重新打包$ jar cvfm hello.jar Manifest.txt com/zhuohc/jar/HelloWorld.class # 参数m: 指定清单文件地址 123# 执行jar文件$ java -jar hello.jarhello world! 123456789# Manifest.txt 其他信息Name: com/zhuohc/jarSpecification-Title: Java Utility ClassesSpecification-Version: 1.2Specification-Vendor: Example Tech, Inc.Implementation-Title: com.zhuohc.jarImplementation-Version: build57Implementation-Vendor: Example Tech, Inc.Main-Class: com.zhuohc.jar.HelloWorld]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[微信本地开发及线上环境搭建]]></title>
    <url>%2F2018%2F01%2F29%2F%E5%BE%AE%E4%BF%A1%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E5%8F%8A%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[微信开发者中心 https://open.weixin.qq.com 1. 注册线上账号，开发者资质认证 2. 注册本地账号，开发者资质认证 网站应用 添加相关信息，并盖章认证，添加授权回调域example.com 认证通过后获取AppId, AppSecret 公众号应用 本地环境配置 将回调的url www.example.com 添加到host文件中]]></content>
      <categories>
        <category>后端</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis基础]]></title>
    <url>%2F2018%2F01%2F11%2Fredis%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。 Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 redis安装 1234# ubuntu$sudo apt-get update$sudo apt-get install redis-server$redis-cli redis配置 123456789# ubuntu $sudo vim /etc/redis.conf# 设置为守护进程protected-mode yes# 设置密码requirepass redispassword# portport 6379# bind 127.0.0.1bing 0.0.0.0 # 允许远程访问 客户端远程登录 1redis-cli -h 127.0.0.1 -p 6379 -a redispassword redis客户端 123# redis-commander，基于nodejs$ npm install -g redis-commander$ redis-commander 通用命令 123$ 127.0.0.1:6379&gt; del name # 删除数据$ 127.0.0.1:6379&gt; type name # 查看数据类型$ 127.0.0.1:6379&gt; rename name # 重命名 数据结构 字符串string 123$ 127.0.0.1:6379&gt; set string-name value$ 127.0.0.1:6379&gt; get string-name$ 127.0.0.1:6379&gt; del string-name 列表list： 相当于默认键的数组 12345678910111213$ 127.0.0.1:6379&gt; lpush list-name value1 value2 value3 ... # 左侧插入列表值(integer) 3$ 127.0.0.1:6379&gt; rpush list-name value4 value5 value6... # 右侧插入列表值(integer) 6$ 127.0.0.1:6379&gt; lindex list-name 1 # 获取第1个的值"value2"$ 127.0.0.1:6379&gt; lrange list-name 1 2 # 获取从第1位置到2位置的列表值1) "value2"2) "value1"$ 127.0.0.1:6379&gt; lpop list-name # 弹出最左边值"value3"$ 127.0.0.1:6379&gt; rpop list-name # 弹出最右边值"value6" 集合set：无序，不重复的列表 12345678910$ 127.0.0.1:6379&gt; sadd set-name value1 value2 value3 # 设置无序列表值(integer) 3$ 127.0.0.1:6379&gt; smembers set-name # 查看所有值1) "value3"2) "value2"3) "value1"$ 127.0.0.1:6379&gt; srem set-name value1 # 删除值(integer) 1$ 127.0.0.1:6379&gt; sismember set-name value2 # 查看是否在无序列表内(integer) 1 散列值hash：相当于自定义键的数组 1234567891011121314151617$ 127.0.0.1:6379&gt; HSET hash-name key1 value1 #设置键值对(integer) 1$ 127.0.0.1:6379&gt; HGET hash-name key1 # 获取指定键的值"value1"$ 127.0.0.1:6379&gt; HSET hash-name key1 value2 # 更新键的值(integer) 0$ 127.0.0.1:6379&gt; HGET hash-name key1 "value2"$ 127.0.0.1:6379&gt; HSET hash-name key2 value2(integer) 1$ 127.0.0.1:6379&gt; HGETALL hash-name # 查找所有键值对1) "key1"2) "value2"3) "key2"4) "value2"$ 127.0.0.1:6379&gt; HDEL hash-name key1 # 删除hash键值对(integer) 1 有序集合zset：成员+分值，分值必须是浮点数，通过浮点数进行排序 123456789101112131415161718192021222324$ 127.0.0.1:6379&gt; zadd zset-name 100 member1 # 添加键值对(integer) 1$ 127.0.0.1:6379&gt; zadd zset-name 202 member2(integer) 1$ 127.0.0.1:6379&gt; zadd zset-name 803 member3(integer) 1$ 127.0.0.1:6379&gt; ZRANGE zset-name 0 -1 # 获取多个元素1) "member1"2) "member2"3) "member3"$ 127.0.0.1:6379&gt; ZRANGE zset-name 0 -1 withscores # 获取多个元素1) "member1"2) "100"3) "member2"4) "202"5) "member3"6) "803"$ 127.0.0.1:6379&gt; ZRANGEBYSCORE zset-name 0 300 withscores # 按score获取多个元素1) "member1"2) "100"3) "member2"4) "202"$ 127.0.0.1:6379&gt; ZREM zset-name member1 # 移除一个元素(integer) 1 错误信息提示 MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error. Redis被配置为保存数据库快照，但它目前不能持久化到硬盘。用来修改集合数据的命令不能用。请查看Redis日志的详细错误信息。 原因 强制关闭Redis快照导致不能持久化。 解决方案 1127.0.0.1:6379&gt; config set stop-writes-on-bgsave-error no]]></content>
      <categories>
        <category>后端</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python爬虫scrapy框架入门基础]]></title>
    <url>%2F2018%2F01%2F10%2Fpython%E7%88%AC%E8%99%ABscrapy%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。 其最初是为了页面抓取 (更确切来说, 网络抓取 )所设计的， 也可以应用在获取API所返回的数据(例如 Amazon Associates Web Services ) 或者通用的网络爬虫。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试 Scrapy主要包括了以下组件： 引擎(Scrapy): 用来处理整个系统的数据流处理, 触发事务(框架核心) 调度器(Scheduler): 用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL（抓取网页的网址或者说是链接）的优先队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址 下载器(Downloader): 用于下载网页内容, 并将网页内容返回给蜘蛛(Scrapy下载器是建立在twisted这个高效的异步模型上的) 爬虫(Spiders): 爬虫是主要干活的, 用于从特定的网页中提取自己需要的信息, 即所谓的实体(Item)。用户也可以从中提取出链接,让Scrapy继续抓取下一个页面 项目管道(Pipeline): 负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。 下载器中间件(Downloader Middlewares): 位于Scrapy引擎和下载器之间的框架，主要是处理Scrapy引擎与下载器之间的请求及响应。 爬虫中间件(Spider Middlewares): 介于Scrapy引擎和爬虫之间的框架，主要工作是处理蜘蛛的响应输入和请求输出。 调度中间件(Scheduler Middewares): 介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。 Scrapy运行流程大概如下： 首先，引擎从调度器中取出一个链接(URL)用于接下来的抓取 引擎把URL封装成一个请求(Request)传给下载器，下载器把资源下载下来，并封装成应答包(Response) 然后，爬虫解析Response 若是解析出实体（Item）,则交给实体管道进行进一步的处理。 若是解析出的是链接（URL）,则把URL交给Scheduler等待抓取 备忘 使用Selector提取数据 xpath语法和基本函数 / . .. ELEMENT //ELEMENT * text @ALTER @* position() last() string() css选择器 * E E1&gt;E2 E1+E2 .CLASS #ID [ATTR] [ATTR=VALUE] E:nth-child(n) E:first-child 使用Item和Field封装数据 Field(serializer=lambda)设置存储数据 使用Item Pipeline处理数据 修改数据,过滤重复数据,将数据写入到数据库等 LinkExtractor提取链接 LinkExtractor参数 allow 允许链接 deny 拒绝链接 allow_domains 允许域名 deny_domains 拒绝域名 restrict_xpaths 允许xpath链接 restrict_css 允许css选择器链接 Exporter导出数据 默认包含以下 JSON, JSON LINES, CSV, XML, PICKLE, MARSHAL 可配置导出格式和存放文件地址, 可自定义导出格式,例如xls 下载文件和图片 FIlesPipeline setting.py ITEM_PIPELINES = {&#39;scrapy.pipelines.files.FilesPipeline&#39;: 1} FILES_STORE = &#39;/home/hanchang/download&#39; ImagesPipeline 模拟登录 使用FromRequest ORC识别验证码:pillow, pytesseract 付费网络平台识别 人工识别:爬取登录页面的验证码图片,调用Image.show方法,肉眼识别并输入到内置的input函数中 Cookie登录: 获取浏览器的cookie值(browsercookie包), 利用BrowserCookiesMiddleware将获取的cookie值添加到CookieJar中 动态页面抓取 Splash是Scrapy官方推荐的javascript渲染引擎, Webkit无界面浏览器 # 安装 sudo apt-get install docker sudo docker pull scrapinghub/splash sudo docker run -p 8050:8050 -p 8051:8051 scrapinghub/splash splash常见服务端点 http://localhost:8050/render.html GET/POST 返回html 参数: url, timeout, proxy, wait, images, js_source http://localhost:8050/excute 传递模拟的动作给splash,例如等待页面渲染，执行代码，等等 scrapy使用splash 安装 pip install scrapy-splash setting.py # splash服务器地址 SPLASH_URL = &#39;http://localhost:8050&#39; # 开启splash的两个下载中间件并调整HttpCompressionMiddleware的次序 DOWNLOADER_MIDDLEWARES = { &#39;scrapy_splash.SplashCookiesMiddleware&#39;: 723, &#39;scrapy_splash.SplashMiddleware&#39;: 725, &#39;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&#39;: 810, } # 过滤去重函数 DUPEFILTER_CLASS = &#39;scrapy_splash.SplashAwareDupeFilter&#39;, # 用户支持cahce_args SPIDER_MIDDLEWARES = { &#39;scrapy_splash.SplashDeduplicateArgsMiddleware&#39;: 100, } 分布式爬取 使用scrapy-redis # 安装 pip install scrapy pip install scrapy-redis # 在配置文件setting.py中添加scrapy-redis相关信息 # redis服务器 REDIS_URL = &#39;redis://127.0.0.1:6379&#39; # 使用scrapy_redis调度器替代原生调度器 SCHEDULER = &#39;scrapy_redis.scheduler.Scheduler&#39; # 使用scrapy_redis的RFPDupeFilter作为去重过滤器 DUPEFILTER_CLASS = &#39;scrapy_redis.dupefilter.RFPDupeFilter&#39; # 将爬取的数据存储到redis中 ITEM_PIPELINES = { &#39;scrapy_redis.pipelines.RedisPipeline&#39;: 300, } # 爬虫停止后,保留/清除Reids中的请求队列以及去重集合 SCHEDULER_PERSIST = False # 修改爬虫spider.py from scrapy_redis.spiders import RedisSpider class BookSpider(RedisSpider): # 注释start_urls # start_urls = [] # 手动添加start_urls redis-cli -h 127.0.0.1 lpush books:start_urls &#39;http://www.books.com/&#39;]]></content>
      <categories>
        <category>后端</category>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[最新在linux/ubuntu中安装qq的办法]]></title>
    <url>%2F2017%2F11%2F22%2F%E6%9C%80%E6%96%B0%E5%9C%A8linux-ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85qq%E7%9A%84%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[通过docker镜像文件的方式安装qq 1, 首先需要在主机上安装docker 2, 下载镜像文件 https://hub.docker.com/r/bestwu/qq/ sudo docker pull bestwu/qq # 速度慢可以换镜像源 3, 编辑启动脚本 vim qq.sh sudo docker run -d --name qq --device /dev/snd --net=host \ -v /tmp/.X11-unix:/tmp/.X11-unix \ -v /home/YOURUSERNAME/TencentFiles:/TencentFiles \ # 此处数据卷的目录填写自己的目录 -e DISPLAY=unix$DISPLAY \ -e XMODIFIERS=@im=fcitx \ -e QT_IM_MODULE=fcitx \ -e GTK_IM_MODULE=fcitx \ -e AUDIO_GID=63 \ -e GID=1000 \ -e UID=1000 \ bestwu/qq:latest # 此处版本自行选择，作者提供了im (QQ) light,latest (QQLight) office (TIM)三个版本 4, 启动脚本 ./qq.sh 5, 感谢作者提供的镜像，本镜像基于深度操作系统.]]></content>
      <categories>
        <category>办公</category>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ubuntu16.04安装及使用docker(一)]]></title>
    <url>%2F2017%2F11%2F20%2Fubuntu16.04%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8docker(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[删除旧版本 sudo apt-get remove docker docker-engine docker.io 安装 $ sudo apt-get update # 安装依赖 $ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common # 添加官方key $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # 查找key $ sudo apt-key fingerprint 0EBFCD88 pub 4096R/0EBFCD88 2017-02-22 Key fingerprint = 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid Docker Release (CE deb) &lt;docker@docker.com&gt; sub 4096R/F273FCD8 2017-02-22 # 获取资源 sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; # 查找合适的版本 $ apt-cache madison docker-ce docker-ce | 17.09.0~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages # 安装 $ sudo apt-get install docker-ce=&lt;VERSION&gt; # 打印安装结果 $ sudo docker version Client: Version: 17.09.0-ce API version: 1.32 Go version: go1.8.3 Git commit: afdb6d4 Built: Tue Sep 26 22:42:18 2017 OS/Arch: linux/amd64 Server: Version: 17.09.0-ce API version: 1.32 (minimum version 1.12) Go version: go1.8.3 Git commit: afdb6d4 Built: Tue Sep 26 22:40:56 2017 OS/Arch: linux/amd64 Experimental: false 将用户加入docker用户组，这样不需要输入sudo 1. sudo cat /etc/group | grep docker 2. 如果不存在docker组，可以添加sudo groupadd docker 3. 添加当前用户到docker组，sudo usermod -aG docker $USER 4. 重启docker服务,sudo systemctl restart docker 5. 如果权限不够，sudo chmod a+rw /var/run/docker.sock 6. sudo chown -R $USER ~/.docker 启动测试 $ sudo docker run hello-world Unable to find image &#39;hello-world:latest&#39; locally latest: Pulling from library/hello-world 9a0669468bf7: Pull complete Digest: sha256:0e06ef5e1945a718b02a8c319e15bae44f47039005530bc617a5d071190ed3fc Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://cloud.docker.com/ For more examples and ideas, visit: https://docs.docker.com/engine/userguide/ 更换镜像源 # 可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值,没有就创建一个 { &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;] } 安装ctop查看容器状态 # https://github.com/bcicen/ctop $ sudo wget https://github.com/bcicen/ctop/releases/download/v0.6.1/ctop-0.6.1-linux-amd64 -O /usr/local/bin/ctop $ sudo chmod +x /usr/local/bin/ctop 第一个实例 # 第一次使用会下载debian的镜像文件 $ sudo docker run debian echo &#39;hello world&#39; &gt; Unable to find image &#39;debian&#39; locally &gt; ...... # -i -t 表示进行交互会话 $ sudo docker run -i -t debian /user/bash root@622ac5689680:/# echo &#39;hello world&#39; &gt; hello world root@622ac5689680:/# exit &gt; exit # 基本命令 $ sudo docker run -h container -i -t debian /bin/bash #-h表示主机名称 $ sudo docker ps # 查看当前运行的主机 $ sudo docker ps -a # 查看全部的主机 $sudo docker events # 查看守护进程 $ sudo docker inspect HOST_NAME # 查看HOST_NAME的信息 $ sudo docker port HOST_NAME # 查看端口映射信息 $ sudo docker diff HOST_NAME # 查看更改的信息 $ sudo docker logs HOST_NAME # 打印log信息 $ sudo docker rm HOST_NAME # 删除 $ sudo docker pull redis # 拉取镜像 $ sudo docker create redis # 创建容器 $ sudo docker start zen_brown # 开启容器（kitematic是绿色波浪线） $ sudo docker stop zen_brown # 停止容器（kitematic是灰色直线） $ sudo docker pause zen_brown # 暂停容器kitematic是灰色波浪线） $ sudo docker commit zen_brown # 将容器变成镜像 $ sudo docker run redis /bin/bash $ sudo docker attach zen_brown # 查看容器内进程 $ sudo docker cp # 在容器和主机之间复制内容 $ sudo docker exec # 在容器中运行命令 $ sudo docker kill # 容器立即退出 创建dockerfile镜像 # 创建项目 $ mkdir cowsay $ cd cowsay $ vim Dockerfile ~ FROM debian:wheezy ~ RUN apt-get update &amp;&amp; apt-get install -y cowsay fortune ~ :wq # 创建 $ sudo docker build -t test/cowsay-dockerfile . &gt; Sending build content to Docker ..... &gt; .... # 运行 $ sudo docker run test/cowsay-dockerfile /usr/games/cowsay &#39;Moo&#39; # 使用entrypoint指令 $ vim Dockerfile ~ FROM debian:wheezy ~ RUN apt-get update &amp;&amp; apt-get install -y cowsay fortune ~ ENTRYPOINTER [&quot;/usr/games/cowsay&quot;] ~ :wq # 创建 $ sudo docker build -t test/cowsay-dockerfile . &gt; Sending build content to Docker ..... &gt; .... # 运行 $ sudo docker run test/cowsay-dockerfile &#39;Moo&#39; # 使用脚本解决entrypoint $ vim entrypoint.sh ~ #! /bin/bash ~ if [ $# -eq 0 ]; then ~ /usr/games/fortune | /usr/games/cowsay ~ else ~ /usr/games/cowsay &quot;$@&quot; ~ fi ~ :wq $ chmod +x entrypoint.sh $ vim Dockerfile ~ FROM debian:wheezy ~ RUN apt-get update &amp;&amp; apt-get install -y cowsay fortune ~ COPY entrypoint.sh / ~ ENTRYPOINTER [&quot;/entrypoint.sh&quot;] ~ :wq # 创建 $ sudo docker build -t test/cowsay-dockerfile . &gt; Sending build content to Docker ..... &gt; .... # 运行 $ sudo docker run test/cowsay-dockerfile &#39;Moo&#39; 使用在线仓库 在线注册地址： https://cloud.docker.com # 登陆 $ sudo docker login $ username: $ password: # 填写作者信息 $ vim Dockerfile ~ FROM debian:wheezy ~ MAINTAINER username &lt;username@mail.com&gt; ~ RUN apt-get update &amp;&amp; apt-get install -y cowsay fortune ~ COPY entrypoint.sh / ~ ENTRYPOINTER [&quot;/entrypoint.sh&quot;] ~ :wq # 创建 $ sudo docker build -t username/cowsay-dockerfile . &gt; Sending build content to Docker ..... &gt; .... # 运行 $ sudo docker run username/cowsay-dockerfile &#39;Moo&#39; # 上传 $ sudo docker push 容器连接 $ sudo docker run --name myredis -d redis # -d表示后台运行 ~ a1696406326aaaa6c28931e886b8dd664d191b083de4aed464d584b4720d57b1 $ docker run --rm -it --link myredis:redis redis /bin/bash &gt; root@9c914447f5e1:/data# redis-cli -h redis -p 6379 &gt; redis:6379&gt; ping &gt; PONG &gt; redis:6379&gt; set &quot;abc&quot; 123 &gt; OK &gt; redis:6379&gt; get &quot;abc&quot; &gt; &quot;123&quot; &gt; redis:6379&gt; exit &gt; root@9c914447f5e1:/data# exit &gt; exit 容器的备份 # 查看所有的容器 $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a1696406326a redis &quot;docker-entrypoint...&quot; 13 minutes ago Up 13 minutes 6379/tcp myredis # 备份指定的id $ docker commit -p a1696406326a redis-backup # 查看镜像 $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE redis-backup latest fb9d896b3a39 11 seconds ago 107MB # 上传镜像(docker login &amp;&amp; docker push) # 或者打包 $ docker save -o ./redis-backup.tar redis-backup # 恢复容器 $ docker pull **** # 或者使用包 $ docker load -i ./redis-backup.tar 让docker容器连接互联网 # -p 8000:80 表示将主机的8000端口转发至容器的80端口 $ docker run -d -p 8000:80 nginx # 容器互联 $ docker run -d --name myredis redis $ docker run --link myredis:redis debian env # --link 目标容器:目标容器在主容器内的简称 ~ PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ~ HOSTNAME=69df45e6f92d ~ REDIS_PORT=tcp://172.17.0.2:6379 ~ REDIS_PORT_6379_TCP=tcp://172.17.0.2:6379 ~ REDIS_PORT_6379_TCP_ADDR=172.17.0.2 ~ REDIS_PORT_6379_TCP_PORT=6379 ~ REDIS_PORT_6379_TCP_PROTO=tcp ~ REDIS_NAME=/stupefied_chandrasekhar/redis ~ REDIS_ENV_GOSU_VERSION=1.10 ~ REDIS_ENV_REDIS_VERSION=4.0.2 ~ REDIS_ENV_REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-4.0.2.tar.gz ~ REDIS_ENV_REDIS_DOWNLOAD_SHA=b1a0915dbc91b979d06df1977fe594c3fa9b189f1f3d38743a2948c9f7634813 ~ HOME=/root 数据卷 # -v指定数据卷 $ docker run -it --name container-test -h container -v /ddata debian /bin/bash # 查看数据卷在本机的位置 $ docker inspect -f { {.Mounts}} container-test [{volume 4687a1d9a80dff56d951f14704a8125f1b642b50c78dac63d3a02a42ff05ffb9 /var/lib/docker/volumes/4687a1d9a80dff56d951f14704a8125f1b642b50c78dac63d3a02a42ff05ffb9/_data /ddata local true }] # 可以在本机中添加文件并在容器中查看修改结果 ### 在dockerfile中设置数据卷 FROM debian:wheezy RUN useradd foo # VOLUME /ddata # 此处添加无效果，因为touch chown是在一个临时容器内的数据卷中执行的 RUN touch /data/x RUN CHOWN -R foo:foo /data # VOLUME /ddata # 此处添加可以 # docker run -v 指定到特定数据卷 $ docker run -v /home/adrian/data:./data debian ls /data # 数据容器 $ docker run --name dbdata postgres echo &#39;data-only container for postage&#39; # 创建一个postgreSQL的容器 # 使用--volumes-from参数，使其他容器也可以使用这个数据卷 $ docker run -d --volumes-from dbdata --name db1 postgres 如何在开发中使用docker,以python flask为例 # 创建项目 $ tree identidock . ├── app │ └── identidock.py └── Dockerfile # 编辑flask文件 $ vim app/identidock.py from flask import Flask app = Flask(__name__) @app.route(&#39;/&#39;) def hello_world(): return &#39;hello world&#39; if __name__ == &#39;__main__&#39;: app.run(debug=True, host=&#39;0.0.0.0&#39;) # 编辑dockerfile文件 $ vim Dockerfile FROM python:3.4 RUN pip install Flask==0.10.1 WORKDIR /app COPY app /app CMD [&quot;python&quot;, &quot;identidock.py&quot;] # 创建镜像并使用容器 $ docker build -t identidock . ... $ docker run -d -p 5000:5000 identidock # 后台运行并将主机的5000端口转发到docker $ curl localhost:5000 ~ hello world # 将开发的代码目录挂载到docker上，这样就不必每次更改代码都需要重新bulid一次． $ docker run -d -p 5000:5000 -v &quot;$PWD&quot;/app:/app identidock # -v &quot;$PWD&quot;/app:/app把位于主机的./app目录挂载到容器内，覆盖容器/app目录下的内容 # 可以修改app目录下的文件查看改动情况 # 以wsgi服务器运行flask并且修改设置用户 $ vim Dockerfile FROM python:3.4 RUN groupadd -r uwsgi &amp;&amp; useradd -r -g uwsgi uwsgi # 创建用户组和用户 RUN pip install Flask==0.10.1 uWSGI==2.0.8 WORKDIR /app COPY app /app EXPOSE 9090 9191 # 声明主机和其他容器可以访问的端口号 USER uwsgi #使用用户运行以下代码，默认docker是以root用户运行的，不安全 CMD [&quot;uwsgi&quot;, &quot;--http&quot;, &quot;0.0.0.0:9090&quot;, &quot;--wsgi-file&quot;, &quot;/app/identidock.py&quot;, &quot;--callable&quot;, &quot;app&quot;, &quot;--stats&quot;, &quot;0.0.0.0:9191&quot;] 使用配置文件配置开发环境和生产环境 # 创建脚本文件cmd.sh $ tree . ├── app │ └── identidock.py ├── cmd.sh └── Dockerfile $ vim cmd.sh #! /bin/bash set -e if [ &quot;$ENV&quot; = &#39;DEV&#39; ]; then echo &quot;Running Development Server&quot; exec python &quot;identidock.py&quot; else echo &quot;Running Production Server&quot; exec uwsgi --http 0.0.0.0:9090 --wsgi-file /app/identidock.py --callable app --stats 0.0.0.0:9191 fi $ chmod +x cmd.sh $ vim Dockerfile FROM python:3.4 RUN groupadd -r uwsgi &amp;&amp; useradd -r -g uwsgi uwsgi RUN pip install Flask==0.10.1 uWSGI==2.0.8 WORKDIR /app COPY app /app COPY cmd.sh / EXPOSE 9090 9191 USER uwsgi CMD [&quot;/cmd.sh&quot;] $ docker build -t identidock . $ docker run -e &quot;ENV=DEV&quot; -p 5000:5000 identidock # 开发环境 $ docker run -d -P identidock 使用compose自动化安装创建运行docker环境 # 安装环境 # https://docs.docker.com/compose/install/ $ sudo curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose $ sudo chmod +x /usr/local/bin/docker-compose $ docker-compose --version # 配置文件 tree . ├── app │ └── identidock.py ├── cmd.sh ├── docker-compose.yml └── Dockerfile # 编辑docker-compose文件 $ vim docker-compose.yml identidock: build: . ports: - &quot;5000:5000&quot; environment: ENV: DEV volumes: - ./app:/app ~ # 使用方法 $ docker-compose up # 如果有镜像则直接运行，如果没有镜像则先build $ docker-compose build # 重新构建镜像 $ docker-compose ps 获取由compose管理的容器状态 $ docker-compose logs 输出日志 $ docker-stop 停止容器，但不会删除他们]]></content>
      <categories>
        <category>后端</category>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux命令记录]]></title>
    <url>%2F2017%2F11%2F08%2Flinux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[查看文件夹大小 1du -h your_path --max-depth=1 参数： &gt; -a或-all 为每个指定文件显示磁盘使用情况，或者为目录中每个文件显示各自磁盘使用情况。 -b或-bytes 显示目录或文件大小时，以byte为单位。 -c或–total 除了显示目录或文件的大小外，同时也显示所有目录或文件的总和。 -D或–dereference-args 显示指定符号连接的源文件大小。 -h或–human-readable 以K，M，G为单位，提高信息的可读性。 -H或–si 与-h参数相同，但是K，M，G是以1000为换算单位,而不是以1024为换算单位。 -k或–kilobytes 以1024 bytes为单位。 -l或–count-links 重复计算硬件连接的文件。 -L或–dereference 显示选项中所指定符号连接的源文件大小。 -m或–megabytes 以1MB为单位。 -s或–summarize 仅显示总计，即当前目录的大小。 -S或–separate-dirs 显示每个目录的大小时，并不含其子目录的大小。 -x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。 -X或–exclude-from= 在指定目录或文件。 –exclude= 略过指定的目录或文件。 –max-depth= 超过指定层数的目录后，予以忽略。 –help 显示帮助。 –version 显示版本信息 pkg-config 作用 &gt; 检查库的版本号。如果所需要的库的版本不满足要求，它会打印出错误信息，避免链接错误版本的库文件。 获得编译预处理参数，如宏定义，头文件的位置。 获得链接参数，如库及依赖的其它库的位置，文件名及其它一些连接参数。 自动加入所依赖的其它库的设置。 命令 12$ pkg-config --cflags --libs gdk-3.0-I/usr/include/gtk-3.0 -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/lib/libffi-3.2.1/include -I/usr/include/fribidi -I/usr/include/harfbuzz -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/uuid -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/gio-unix-2.0 -pthread -I/usr/include/libdrm -lgdk-3 -lz -lpangocairo-1.0 -lpango-1.0 -lgdk_pixbuf-2.0 -lcairo-gobject -lcairo -lgobject-2.0 -lglib-2.0 PKG_CONFIG_PATH 环境变量PKG_CONFIG_PATH是用来设置.pc文件的搜索路径的，pkg-config按照设置路径的先后顺序进行搜索，直到找到指定的.pc 文件为止。这样，库的头文件的搜索路径的设置实际上就变成了对.pc文件搜索路径的设置。 在安装完一个需要使用的库后，比如Glib，一是将相应的.pc文件，如glib-2.0.pc拷贝到/usr/lib/pkgconfig目录下，二是通过设置环境变量PKG_CONFIG_PATH添加glib-2.0.pc文件的搜索路径。 12# 添加环境变量PKG_CONFIG_PATH，在bash中应该进行如下设置：$ export PKG_CONFIG_PATH=/opt/gtk/lib/pkgconfig:$PKG_CONFIG_PATH 12# 可以执行下面的命令检查是否 /opt/gtk/lib/pkgconfig 路径已经设置在PKG_CONFIG_PATH环境变量中：echo $PKG_CONFIG_PATH 原理 正常情况下，库文件在编译通过后会生成prefix/lib/pkgconfig目录，目录下会包含.pc文件，例如： 123456789101112$ ls -la /usr/include/gtk3.24/lib/pkgconfig总用量 40drwxr-xr-x 2 root root 4096 7月 24 15:56 .drwxr-xr-x 4 root root 4096 7月 24 15:56 ..-rw-r--r-- 1 root root 277 7月 24 15:56 gail-3.0.pc-rw-r--r-- 1 root root 608 7月 24 15:56 gdk-3.0.pc-rw-r--r-- 1 root root 608 7月 24 15:56 gdk-wayland-3.0.pc-rw-r--r-- 1 root root 608 7月 24 15:56 gdk-x11-3.0.pc-rw-r--r-- 1 root root 631 7月 24 15:56 gtk+-3.0.pc-rw-r--r-- 1 root root 405 7月 24 15:56 gtk+-unix-print-3.0.pc-rw-r--r-- 1 root root 631 7月 24 15:56 gtk+-wayland-3.0.pc-rw-r--r-- 1 root root 631 7月 24 15:56 gtk+-x11-3.0.pc 123456789101112131415161718$ vim gtk+-3.0prefix=/usr/include/gtk3.24exec_prefix=$&#123;prefix&#125;libdir=$&#123;exec_prefix&#125;/libincludedir=$&#123;prefix&#125;/includetargets=x11 wayland gtk_binary_version=3.0.0gtk_host=x86_64-pc-linux-gnu Name: GTK+Description: GTK+ Graphical UI LibraryVersion: 3.24.10Requires: gdk-3.0 atk &gt;= 2.15.1 cairo &gt;= 1.14.0 cairo-gobject &gt;= 1.14.0 gdk-pixbuf-2.0 &gt;= 2.30.0 gio-2.0 &gt;= 2.53.4 Requires.private: atk atk-bridge-2.0 wayland-client &gt;= 1.9.91 wayland-protocols &gt;= 1.12 xkbcommon &gt;= 0.2.0 wayland-cursor &gt;= 1.9.91 wayland-egl epoxy &gt;= 1.4 fribidi &gt;= 0.19.7 pangoft2 gio-unix-2.0 &gt;= 2Libs: -L$&#123;libdir&#125; -lgtk-3Cflags: -I$&#123;includedir&#125;/gtk-3.0 端口与进程 1234567891011$ sudo netstat -nap | grep 5555 # 查看指定端口被什么应用及进程号占用tcp 0 0 0.0.0.0:5555 0.0.0.0:* LISTEN 8362/pythontcp6 0 0 :::5555 :::* LISTEN 8362/python$ sudo netstat -nap | grep 8362 # 同上，查看端口号tcp 0 0 0.0.0.0:5555 0.0.0.0:* LISTEN 8362/python │apps product.sh tmptcp6 0 0 :::5555 :::* LISTEN 8362/python │➜ api git:(master) source .env/bin/activateunix 3 [ ] STREAM CONNECTED 75201340 8362/python │(.env) ➜ api git:(master) pwdunix 3 [ ] STREAM CONNECTED 75201341 8362/python $ sudo kill -s 9 pid # 杀死进程pid systemctl 12# 可以返回systemd service文件路径$ sudo systemctl edit rabbitmq-server.service]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ubuntu本地配置SSL]]></title>
    <url>%2F2017%2F11%2F07%2Fubuntu%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AESSL%2F</url>
    <content type="text"><![CDATA[# 安装相关模块 sudo a2enmod ssl //启用ssl模块 sudo apt-get install openssl //安装openssl # 创建证书 openssl genrsa -des3 -out server.key 1024 //创建CA签名(不使用密码去除-des3选项) openssl req -new -key server.key -out server.csr //创建CSR(Certificate Signing Request) openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt //自己签发证书 sudo cp server.crt /etc/ssl/certs sudo cp server.key /etc/ssl/private # 修改虚拟主机信息 在&lt;VirtualHost *:80&gt;段中，DocumentRoot一行的下方加入内容： SSLEngine On SSLOptions +StrictRequire SSLCertificateFile /etc/ssl/certs/server.crt SSLCertificateKeyFile /etc/ssl/private/server.key 端口修改为：443，即&lt;VirtualHost *:443&gt;(ssl的端口) # 重启apache2 sudo /etc/init.d/apache2 force-reload sudo /etc/init.d/apache2 restart]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ubuntu配置Gitlab服务]]></title>
    <url>%2F2017%2F06%2F19%2Fubuntu%E9%85%8D%E7%BD%AEGitlab%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[安装 12345# 安装相关服务 postfix为邮件服务sudo apt-get install curl openssh-server ca-certificates postfix# 安装gitlab服务包curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bashsudo apt-get install gitlab-ce 配置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758# 配置服务sudo vim /etc/gitlab/gitlab.rb## GitLab URL##! URL on which GitLab will be reachable.##! For more details on configuring external_url see:##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlabexternal_url 'http:/192.168.0.19:1500' # 地址...# 邮件基本设置### Email Settingsgitlab_rails['gitlab_email_enabled'] = truegitlab_rails['gitlab_email_from'] = 'admin@uscnk.com'gitlab_rails['gitlab_email_display_name'] = 'Gitlab'gitlab_rails['gitlab_email_reply_to'] = 'admin@uscnk.com'gitlab_rails['gitlab_email_subject_suffix'] = 'Gitlab'...### GitLab email server settings###! Docs: https://docs.gitlab.com/omnibus/settings/smtp.html###! **Use smtp instead of sendmail/postfix.**# gitlab_rails['smtp_enable'] = true# gitlab_rails['smtp_address'] = "smtp.server"# gitlab_rails['smtp_port'] = 465# gitlab_rails['smtp_user_name'] = "smtp user"# gitlab_rails['smtp_password'] = "smtp password"# gitlab_rails['smtp_domain'] = "example.com"# gitlab_rails['smtp_authentication'] = "login"# gitlab_rails['smtp_enable_starttls_auto'] = true# gitlab_rails['smtp_tls'] = false# 邮件服务地址# QQ exmail (腾讯企业邮箱)gitlab_rails['smtp_enable'] = truegitlab_rails['smtp_address'] = "smtp.exmail.qq.com"gitlab_rails['smtp_port'] = 465gitlab_rails['smtp_user_name'] = "admin@uscnk.com"gitlab_rails['smtp_password'] = "xxxxxxxxx"gitlab_rails['smtp_authentication'] = "login"gitlab_rails['smtp_enable_starttls_auto'] = truegitlab_rails['smtp_tls'] = truegitlab_rails['gitlab_email_from'] = 'admin@uscnk.com'# nginx基本设置################################################################################## GitLab Nginx##! Docs: https://docs.gitlab.com/omnibus/settings/nginx.html################################################################################nginx['listen_addresses'] = ['192.168.0.19']nginx['losten_port'] = 1500 启动 12345678# 重启服务sudo gitlab-ctl reconfigure# 重启邮件服务sudo /etc/init.d/postfix restart# 访问http://192.168.0.19:1500Username: rootPassword: 5iveL!fe github与gitlab共存 1234567891011121314151617181920212223242526272829303132333435363738394041# github账户邮箱， 将id_rsa改名成id_rsa_githubssh-keygen -t rsa -C "xxxxx@gmail.com"# gitlab公司邮箱， 将id_rsa改名成id_rsa_gitlabssh-keygen -t rsa -C "xxxxxx@work.com"# 添加私钥ssh-add ~/.ssh/id_rsa_githubssh-add ~/.ssh/id_rsa_gitlab#在 ~/.ssh 目录下新建一个config文件touch configchmod 755 conifg# 并添加以下内容# gitlabHost github.com HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_github# githubHost gitlib.com HostName gitlib.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_gitlab# 将id_rsa_github.pab内容添加到github中# 测试结果ssh -T git@github.com# 将id_rsa_gitlab.pab内容添加到gitlab中cd ~/mytest# 在github中测试git remote add github https://github.com/zhcshine/mytest.gitgit push -u github master# 在gitlab中测试git remote add gitlab http://192.168.0.19:1500/zhcshine/mytest.gitgit push -u gitlab master]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[centos7创建nagios监控集群服务]]></title>
    <url>%2F2017%2F04%2F20%2Fcentos7%E5%88%9B%E5%BB%BAnagios%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[安装服务器端192.168.0.206 1,安装lamp环境 参考 2, 配置nagios服务 # 创建nagiso用户 $ sudo useradd nagios # 创建apache用户，yum安装httpd服务会自动创建 $ sudo useradd apache -M -s /sbin/nologin useradd：用户“apache”已存在 # 创建nagcmd用户组 $ sudo groupadd nagcmd # 将usermod加入nagcmd用户组 sudo usermod -a -G nagcmd nagios # 将apache用户加入nagcmd用户组 $ sudo usermod -a -G nagcmd apache # 查看nagios用户所属的组 $ id -n -G nagios nagios nagcmd # 查看apace用户所属的组 $ id -n -G apache apache nagcmd # 安装nagiso服务 $sudo yum install nagios $sudo yum install nagios-plugins-all # 安装nrpe（服务器端和客户端都需要安装） $sudo yum install nrpe # 启动和开机启动 $sudo systemctl start nagios $sudo systemctl enable nagios $sudo systemctl start nrpe $sudo systemctl enable nrpe 3,配置web # 取消认证 $ sudo vim /etc/nagios/cgi.cfg use_authentication=0 # 此处将1改为0 # 查看配置文件 $ls /etc/httpd/conf.d autoindex.conf nagios.conf php.conf README userdir.conf welcome.conf xcache.conf # 其中nagiso.conf就是nagios的web配置文件 # 访问http://192.168.0.206/nagios，其中登陆密码在/etc/nagios/passwd文件中，具体文件位置可以在/etc/httpd/conf.d/nagios.conf中查看 安装客户端192.168.0.208 # 安装mysql，参考上方链接，配合生成check_mysql插件 # 安装nrpe（服务器端和客户端都需要安装） $ sudo yum -y install epel-release $ sudo yum install nrpe $ sudo yum install nagios-plugins-all # 配置nagios客户端 $ sudo vim /etc/nagios/nrpe.cfg allowed_hosts=127.0.0.1,192.168.0.206 # 监控当前客户端的nagios服务器地址 # 启动服务 $ sudo systemctl restart nrpe $ sudo systemctl enable nrpe # 检查启动结果 $ sudo netstat -lntup | grep nrpe tcp 0 0 0.0.0.0:5666 0.0.0.0:* LISTEN 2540/nrpe tcp6 0 0 :::5666 :::* LISTEN 2540/nrpe $ sudo ps -ef | grep nrpe | grep -v grep nrpe 2540 1 0 11:59 ? 00:00:00 /usr/sbin/nrpe -c /etc/nagios/nrpe.cfg -d 配置服务器端192.168.0.206 $ tree /etc/nagios . ├── cgi.cfg ├── conf.d # 添加新的监视客户端信息 │ └── web_one.cfg ├── nagios.cfg # 配置服务器端nagios ├── nrpe.cfg # 配置服务器端nrpe ├── objects │ ├── commands.cfg │ ├── contacts.cfg │ ├── localhost.cfg │ ├── printer.cfg │ ├── switch.cfg │ ├── templates.cfg │ ├── timeperiods.cfg │ └── windows.cfg ├── passwd └── private └── resource.cfg $ cp /etc/nagios/objects/localhost.cfg /etc/nagios/conf.d/web_one.cfg $ vim /etc/nagios/conf.d/web_one.cfg # 将localhost 改成web_one define host{ use linux-server host_name web_one alias web_one address 192.168.0.208 } define service{ use local-service host_name web_one service_description PING check_command check_ping!100.0,20%!500.0,60% } 查看结果 nagios]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[centos7配置keepalived实现高可用集群]]></title>
    <url>%2F2017%2F04%2F19%2Fcentos7%E9%85%8D%E7%BD%AEkeepalived%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[CENTOS6.8 192.168.0.106 MASTER # 安装 sudo yum install keepalived # 配置 sudo vim /etc/keepalived/keepalived.conf ! Configuration File for keepalived global_defs { # 这些信息是配置报警发邮件信息 notification_email { acassen@firewall.loc failover@firewall.loc sysadmin@firewall.loc } notification_email_from Alexandre.Cassen@firewall.loc smtp_server 192.168.200.1 smtp_connect_timeout 30 # 路由标识，同一局域网应该唯一 router_id lb01 } vrrp_instance VI_1 { # 当前角色是master state MASTER # 对外提供网络的接口 interface eth0 # 虚拟路由id标识，数字，必须和backup里相同实例一致 virtual_router_id 55 # 优先级，数字必须比backup大 priority 150 advert_int 1 # 权限认证，和backup一致 authentication { auth_type PASS auth_pass 1111 } virtual_ipaddress { 192.168.0.200 } } # 重启 sudo /etc/init.d/keepalived restart # 查看结果 ip addr | grep 192.168.0.200 CENTOS7.2 192.168.0.209 BACKUP # 安装 sudo yum install keepalived # 配置 sudo vim /etc/keepalived/keepalived.conf ! Configuration File for keepalived global_defs { notification_email { acassen@firewall.loc failover@firewall.loc sysadmin@firewall.loc } notification_email_from Alexandre.Cassen@firewall.loc smtp_server 192.168.200.1 smtp_connect_timeout 30 router_id lb02 # 和master不一致 } vrrp_instance VI_1 { state BACKUP # 和MASTER不一致 interface enp0s3 virtual_router_id 55 priority 100 # 和master不一致 advert_int 1 authentication { auth_type PASS auth_pass 1111 } virtual_ipaddress { 192.168.0.200 } } # 重启 sudo systemctl restart keepalived # 查看结果 ip addr | grep 192.168.0.200 CENTOS6.8 192.168.0.106 nginx配置 # nginx配置文件 server { listen 192.168.0.200:80; # 这里需要指定虚拟vip监听 server_name localhost; location / { # 只访问web站点 proxy_pass http://www_server_pools; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } CENTOS7.2 192.168.0.209 配置nginx # nginx配置文件 server { listen 192.168.0.200:80; server_name localhost; location / { # 只访问phone站点 proxy_pass http://www_phone_pools; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } 测试结果 # 开启192.168.0.106，192.168.0.209的keepalive服务 # 查看192.168.0.106 $ ip addr | grep 192.168.0.200 inet 192.168.0.200/32 scope global eth0 # 应该有这行结果 # 查看192.168.0.209 $ ip addr | grep 192.168.0.200 # 结果应该为空，如果有结果，表示脑裂，检查相关配置和防火墙 # 访问http://192.168.200 curl 192.168.0.200 # 结果应该只访问web网站 # 关停192.168.0.106的keepalive服务 # 访问http://192.168.200 curl 192.168.0.200 # 结果应该只访问phone网站 # 查看192.168.0.106 $ ip addr | grep 192.168.0.200 inet 192.168.0.200/32 scope global eth0 # 结果应该为空 # 查看192.168.0.209 $ ip addr | grep 192.168.0.200 inet 192.168.0.200/32 scope global enp0s3 # 此时有这行结果 # 重启192.168.0.106的keepalive服务，应该恢复之前的测试结果]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[unittest单元测试]]></title>
    <url>%2F2016%2F11%2F30%2Funittest%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[unittest基础使用方法 # -*- coding:utf-8 -*- # calculator.py # 需要测试的类 class Count: def __init__(self, a, b): self.a = int(a) self.b = int(b) def add(self): return self.a + self.b # -*- coding: utf-8 -*- # test.py 测试类 from calculator import Count import unittest class TestCount(unittest.TestCase): def setUp(self): print &#39;test start&#39; def test_add(self): j = Count(2,3) self.assertEqual(j.add(), 5) def test_add2(self): j = Count(41, 76) self.assertEqual(j.add(), 115, &#39;not equal&#39;) def tearDown(self): print &#39;test end&#39; if __name__ == &#39;__main__&#39;: # 测试全部方法 # unittest.main() # 构造测试集 suite = unittest.TestSuite() # 指定测试方法 suite.addTest(TestCount(&#39;test_add2&#39;)) # 执行测试 runner = unittest.TextTestRunner() runner.run(suite) 自动识别测试用例 # -*- coding:utf-8 -*- # calculator.py # 需要测试的类 class Count: def __init__(self, a, b): self.a = int(a) self.b = int(b) def add(self): return self.a + self.b def sub(self): return self.a - self.b # -*- coding: utf-8 -*- # testadd.py 测试类 from calculator import Count import unittest class TestAdd(unittest.TestCase): def setUp(self): print &#39;test add start&#39; def test_add(self): j = Count(2,3) self.assertEqual(j.add(), 5) def test_add2(self): j = Count(41, 76) self.assertEqual(j.add(), 115, &#39;not equal&#39;) def tearDown(self): print &#39;test add end&#39; if __name__ == &#39;__main__&#39;: # 测试全部方法 unittest.main() # -*- coding: utf-8 -*- # testsub.py 测试类 from calculator import Count import unittest class TestSub(unittest.TestCase): def setUp(self): print &#39;test sub start&#39; def test_sub(self): j = Count(2,3) self.assertEqual(j.sub(), 5) def test_sub2(self): j = Count(41, 76) self.assertEqual(j.sub(), 115, &#39;not equal&#39;) def tearDown(self): print &#39;test sub end&#39; if __name__ == &#39;__main__&#39;: # 测试全部方法 unittest.main() # -*- coding: utf-8 -*- # runtest.py import unittest test_dir = &#39;./&#39; discover = unittest.defaultTestLoader.discover(test_dir, pattern=&#39;test*.py&#39;) if __name__ == &#39;__main__&#39;: runner = unittest.TextTestRunner() runner.run(discover) 断言方法啊 # unittest.TestCase.assertEqual(a, b, msg=None) a == b # unittest.TestCase.assertNotEqual(a, b) a !=b # unittest.TestCase.assertTrue(x) x is True # unittest.TestCase.assertFalse(x) x is False # unittest.TestCase.assertIs(a, b) x is b # unittest.TestCase.assertIsNot(a, b) a is not b # unittest.TestCase.assertIsNotNone(x) x is not None # unittest.TestCase.assertIn(a, b) a in b # unittest.TestCase.assertNotIn(a, b) a not in b # unittest.TestCase.assertNotIsInstance(a, b) isinstance(a,b) # unittest.TestCase.assertNotIsInstance(a, b) not isinstance(a,b) 跳过测试与预期失败 # -*- coding: utf-8 -*- # test.py import unittest class MyTest(unittest.TestCase): def setUp(self): pass def tearDown(self): pass @unittest.skip(u&#39;直接跳过测试&#39;) def test_skip(self): print &#39;test aaa&#39; @unittest.skipIf(3 &gt; 2, u&#39;条件满足时跳过测试&#39;) def test_skip_if(self): print &#39;test bbb&#39; @unittest.skipUnless(3 &gt; 2, u&#39;条件满足时执行测试&#39;) def test_skip_unless(self): print &#39;test ccc&#39; # 不管测试成功与否，都标记为失败 @unittest.expectedFailure def test_expected_failure(self): print &#39;test ddd&#39; self.assertEqual(2, 3) if __name__ == &#39;__main__&#39;: unittest.main()]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium入门基础]]></title>
    <url>%2F2016%2F11%2F30%2Fselenium%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[安装及基本操作 # -*- coding:utf-8 -*- # 环境: ubuntu14.04 # pip install seleninum # firefox # https://github.com/mozilla/geckodriver/releases 下载对应版本放在$PATH目录下 # google # https://sites.google.com/a/chromium.org/chromedriver/downloads 下载对应版本放在$PATH目录下 # http://www.seleniumhq.org/download/ 其他浏览器参考 # sudo apt-get install phantomjs 安装无界面webkit浏览器引擎 from selenium import webdriver from selenium.webdriver.common.by import By driver = webdriver.Firefox() # driver = webdriver.Chrome() # driver = webdriver.PhantomJS(executable_path=&#39;/usr/bin/phantomjs&#39;) driver.get(&#39;http://www.baidu.com&#39;) # 定位元素 # 根据id定位 find_id = driver.find_element_by_id(&#39;wrapper&#39;) find_id = driver.find_element(By.ID, &#39;wrapper&#39;) # 根据name属性定位 find_name = driver.find_element_by_name(&#39;wd&#39;) find_name = driver.find_element(By.NAME, &#39;wd&#39;) # 根据class定位 find_class = driver.find_element_by_class_name(&#39;head_wrapper&#39;) find_class = driver.find_element(By.CLASS_NAME, &#39;head_wrapper&#39;) # 根据标签名称定位 find_tag = driver.find_element_by_tag_name(&#39;div&#39;) find_tag = driver.find_element(By.TAG_NAME, &#39;div&#39;) # 根据链接文本定位 find_a_text = driver.find_element_by_link_text(&#39;hao123&#39;) find_a_text = driver.find_element(By.LINK_TEXT, &#39;hao123&#39;) # 根据部分链接文本定位 find_a_text = driver.find_element_by_partial_link_text(&#39;hao&#39;) find_a_text = driver.find_element(By.PARTIAL_LINK_TEXT, &#39;hao&#39;) # 根据绝对位置定位 find_x_path = driver.find_elements_by_xpath(&#39;/html/body/div&#39;) find_x_path = driver.find_element(By.XPATH, &#39;/html/body/div&#39;) # 支持层级，属性，逻辑运算符结合使用 find_x_path = driver.find_element_by_xpath(&quot;//input[@id=&#39;kw&#39;]&quot;) # // 当前目录下的某个目录下 # Css定位 find_css = driver.find_elements_by_css_selector(&#39;.s_ipt&#39;) find_css = driver.find_element(By.CSS_SELECTOR, &#39;.s_ipt&#39;) # 设置浏览器宽高 driver.set_window_size(480, 800) driver.get(&#39;http://www.126.com&#39;) # 控制浏览器前进倒退 driver.back() driver.forward() # 刷新浏览器(F5) driver.refresh() # 当前页面 print driver.current_url() # 元素操作 # dom = driver.find_element(By.ID, &#39;kw&#39;) # dom.clear() # 清除文本 # dom.send_keys() # 模拟键盘输入 # dom.click() # 点击元素 # dom.submit() # 模拟表单提交 # dom.size() # 返回元素的尺寸 # dom.text() # 返回元素的文本 # dom.get_attribute(name) # 返回元素的属性值 # dom.is_displayed() # 设置该元素是否可见 # 鼠标操作 from selenium.webdriver.common.action_chains import ActionChains driver.get(&#39;http://www.baidu.com&#39;) # context_click 鼠标右键点击 right_click = driver.find_element_by_id(&#39;xx&#39;) # perform 执行所有ActionChains中存储的动作 ActionChains(driver).context_click(right_click).perform() # above 鼠标悬停 above = driver.find_element_by_id(&#39;xxx&#39;) ActionChains(driver).move_to_element(above).perform() # double_click 鼠标双击 # drag_and_drop(source, target) 鼠标拖放 # 键盘事件 from selenium.webdriver.common.keys import Keys find_id.send_keys(Keys.BACK_SPACE) # 删除键 find_id.send_keys(Keys.SPACE) # 空格键 find_id.send_keys(Keys.TAB) # tab键 find_id.send_keys(Keys.ESCAPE) # ESC find_id.send_keys(Keys.ENTER) # 回车键 find_id.send_keys(Keys.CONTROL, &#39;c&#39;) # 复制 find_id.send_keys(Keys.CONTROL, &#39;v&#39;) # 剪贴 find_id.send_keys(Keys.F1) # F1 # driver.quit() webdriver原理 # -*- coding:utf-8 -*- from selenium import webdriver import logging logging.basicConfig(level=logging.DEBUG) driver = webdriver.Firefox() driver.get(&#39;http://www.baidu.com&#39;) driver.find_element_by_id(&#39;kw&#39;).send_keys(&#39;selenium&#39;) driver.find_element_by_id(&#39;su&#39;).click() driver.quit() 显示等待 # -*- coding:utf-8 -*- # 显示等待 from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC driver = webdriver.Firefox() driver.get(&#39;http://www.baidu.com&#39;) # 显示等待 # 参数driver： 浏览器驱动 # 参数timeout： 最大超时时间，单位秒 # 参数poll_frequency： 检测的间隔时间，默认为0.5秒 # 参数ignored_exceptions: 超时异常信息，默认为NoSuchElementException # WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None) # until(method, message=&#39;&#39;) 调用该方法提供的驱动程序作为参数，直到返回True # until_not(method, message=&#39;&#39;) 调用该方法提供的驱动程序作为参数，直到返回False # EC.title_is 判断当前页面的标题是否是否等于预期 # EC.title_contains 判断当前页面的标题是否包含预期的字符串 # EC.presence_of_element_located 判断元素是否被加载在DOM树中，并不代表当前元素可见 # EC.visibility_of_element_located 判断元素是否可见（可见并非代表元素非隐藏，并且元素的宽和高均不等于0） # EC.visibility_of 与visibility_of_element_located相同，该方法接受的参数为定位后的元素 # EC.presence_of_all_elements_located 判断是否至少有一个元素存在与DOM树中 # EC.text_to_be_present_in_element 判断某个元素的text是否包含预期的字符串 # EC.text_to_be_present_in_element_value 判断某个元素的vaule属性是否包含了预期的字符串 # EC.frame_to_be_available_and_switch_to_it 判断该表单是否可以切换进去，如果可以，返回True并switch进去，否则返回false # EC.invisibility_of_element_located 判断某个元素是否不存在于DOM树中或者不可见 # EC.element_to_be_clickable 判断某个元素是否可以点击 # EC.staleness_of 等到一个元素从DOM树中移除 # EC.element_to_be_selected 判断某个元素是否被选中，一般用于下拉菜单 # EC.element_selection_state_to_be 判断某个元素的选中状态是否符合预期, 参数为定位后的元素 # EC.element_located_selection_state_to_be 判断某个元素的选中状态是否符合预期,该方法接受的参数为定位 # EC.alert_is_present 判断页面上是否有alert # driver.find_element_by_id().is_displayed() 判断元素是否可见 element = WebDriverWait(driver, 5, 0.5).until(EC.presence_of_element_located((By.ID, &#39;kw&#39;))) element.send_keys(&#39;selenium&#39;) # driver.quit() 隐式等待 # -*- coding:utf-8 -*- # 隐式等待 from selenium import webdriver from selenium.common.exceptions import NoSuchElementException from time import ctime from time import sleep driver = webdriver.Firefox() # sleep(10) driver.implicitly_wait(10) driver.get(&#39;http://www.baidu.com&#39;) print ctime() try: driver.find_element_by_id(&#39;kw22&#39;).send_keys(&#39;selenium&#39;) except NoSuchElementException as e: print e finally: print ctime() 执行js代码 # -*- coding:utf-8 -*- # 执行js代码 from selenium import webdriver from time import sleep # 访问百度 driver = webdriver.Firefox() driver.get(&#39;http://www.baidu.com&#39;) driver.set_window_size(600, 600) driver.find_element_by_id(&#39;kw&#39;).send_keys(&#39;selenium&#39;) driver.find_element_by_id(&#39;su&#39;).click() sleep(2) js = &#39;window.scrollTo(100, 450);&#39; driver.execute_script(js) sleep(3) # driver.quit() 处理cookie # -*- coding:utf-8 -*- # cookie处理 from selenium import webdriver driver = webdriver.Firefox() driver.get(&#39;http://www.youdao.com&#39;) driver.add_cookie({&#39;name&#39;: &#39;name-a&#39;, &#39;value&#39;: &#39;value-b&#39;}) # 获取cookie信息 cookies = driver.get_cookies() print cookies for cookie in cookies: print cookie print &#39;{} -&gt; {}&#39;.format(cookie[&#39;name&#39;], cookie[&#39;value&#39;]) driver.quit() 截图 # -*- coding:utf-8 -*- # 窗口截图 from selenium import webdriver from time import sleep # driver = webdriver.Firefox() driver = webdriver.PhantomJS(executable_path=&#39;/usr/bin/phantomjs&#39;) driver.get(&#39;http://www.baidu.com&#39;) driver.find_element_by_id(&#39;kw&#39;).send_keys(&#39;selenium&#39;) driver.find_element_by_id(&#39;su&#39;).click() sleep(2) driver.get_screenshot_as_file(&#39;./screen.png&#39;) driver.quit() 播放视频 # -*- coding:utf-8 -*- from selenium import webdriver from time import sleep driver = webdriver.Firefox() driver.get(&#39;http://videojs.com&#39;) video = driver.find_element_by_xpath(&#39;body/Setion[1]/div/video&#39;) # 返回播放文件地址 url = driver.execute_script(&#39;return arguments[0].currentSrc;&#39;, video) print url # 播放视频 print &#39;start&#39; driver.execute_script(&#39;return arguments[0].play()&#39;, video) # 播放15秒 sleep(15) # 暂停播放 print &#39;stop&#39; driver.execute_script(&#39;arguments[0].pause()&#39;, video) # driver.quit()]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wordpress插件开发基础入门]]></title>
    <url>%2F2016%2F11%2F10%2Fwordpress%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[创建插件 ├── hanchang-copyright │ └── hanchang-copyright.php # hanchang-copyright.php &lt;?php /* Plugin Name: hanchang-copyright Plugin URI: http://www.zhuohc.com Description: 在页脚显示一段版权信息 Version: 1.0 Author: hanchang Author URI: http://www.zhuohc.com License: GPLv2 */ 插件启用和停用初始化 # hanchang-copyright.php &lt;?php /* Plugin Name: hanchang-copyright Plugin URI: http://www.zhuohc.com Description: 在页脚显示一段版权信息 Version: 1.0 Author: hanchang Author URI: http://www.zhuohc.com License: GPLv2 */ //定义插件启动时候调用的方法 register_activation_hook( __FILE__, &#39;hanchang_copyright_install&#39;); function hanchang_copyright_install() { //插件启动，添加一个默认的版权信息 update_option( &quot;hanchang_copyright_text&quot;, &quot;&lt;p style=&#39;color:red&#39;&gt;本站点所有文章均为原创，转载请注明出处！&lt;/p&gt;&quot; ); } //定义插件停用时候调用的方法 register_deactivation_hook( __FILE__, &#39;hanchang_copyright_deactivation&#39;); function hanchang_copyright_deactivation() { //插件停用，设置停用标识为1 update_option( &quot;hanchang_copyright_deactivation&quot;, &quot;yes&quot; ); } 删除插件 . ├── hanchang-copyright.php └── uninstall.php # 删除插件执行的文件 # uninstall.php &lt;? // 如果 uninstall 不是从 WordPress 调用，则退出 if( !defined( &#39;WP_UNINSTALL_PLUGIN&#39; ) ) exit(); //删除插件创建的项目，以确保不占用数据库资源 delete_option( &#39;hanchang_copyright_deactivation&#39; ); delete_option( &#39;hanchang_copyright_text&#39; ); add_action add_action(&quot;$tag钩子名称&quot;, &quot;$function_to_do执行函数&quot;, $priorrity执行优先级, $accepted_arga带参数函数的参数个数) # hanchang-copyright.php //为 wp_footer 钩子挂载一个新的动作 hc_copyright_insert add_action( &quot;wp_footer&quot;, &quot;hc_copyright_insert&quot; ); function hc_copyright_insert(){ //输出一段字符串 echo get_option( &quot;hc_copyright_text&quot; ); } add_action( &quot;wp_head&quot;, &quot;hanchang_copyright_insert_new&quot; ); function hanchang_copyright_insert_new() { echo &quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;; } add_action( &#39;save_post&#39;, &#39;save_post_meta&#39;, 10, 2 ); function save_post_meta( $post_id, $post ) { update_post_meta( $post_id, &quot;save-time&quot;, &quot;更新时间：&quot; . date(&quot;Y-m-d H:i:s&quot;) ); } 常见钩子 init 加载初始化 wp_head 加载添加到head标签中的内容 wp_enqueue_scripts 加载css或者js文件 wp_foot 加载添加到底部内容 save_post 添加保存文章 wp_trash_post 将文章添加到回收站 delete_post 将文章删除 wp_insert_comment 插入评论 user_register 用户注册 # hanchang-copyright.php &lt;?php /* Plugin Name: hanchang-copyright Plugin URI: http://www.zhuohc.com Description: 在页脚显示一段版权信息 Version: 1.0 Author: hanchang Author URI: http://www.zhuohc.com License: GPLv2 */ //定义插件启动时候调用的方法 register_activation_hook( __FILE__, &#39;hanchang_copyright_install&#39;); function hanchang_copyright_install() { //插件启动，添加一个默认的版权信息 update_option( &quot;hanchang_copyright_text&quot;, &quot;&lt;p style=&#39;color:red&#39;&gt;本站点所有文章均为原创，转载请注明出处！&lt;/p&gt;&quot; ); } //定义插件停用时候调用的方法 register_deactivation_hook( __FILE__, &#39;hanchang_copyright_deactivation&#39;); function hanchang_copyright_deactivation() { //插件停用，设置停用标识为1 update_option( &quot;hanchang_copyright_deactivation&quot;, &quot;yes&quot; ); } //为 wp_footer 钩子挂载一个新的动作 hc_copyright_insert add_action( &quot;wp_footer&quot;, &quot;hc_copyright_insert&quot; ); function hc_copyright_insert(){ //输出一段字符串 echo get_option( &quot;hc_copyright_text&quot; ); } add_action( &quot;wp_head&quot;, &quot;hanchang_copyright_insert_new&quot; ); function hanchang_copyright_insert_new() { echo &quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;; } add_action( &#39;save_post&#39;, &#39;save_post_meta&#39;, 10, 2 ); function save_post_meta( $post_id, $post ) { update_post_meta( $post_id, &quot;save-time&quot;, &quot;更新时间：&quot; . date(&quot;Y-m-d H:i:s&quot;) ); } //在输出内容之前，给页面管理添加摘要功能 add_action( &#39;init&#39;, &#39;hc_add_excerpts_to_pages&#39; ); function hc_add_excerpts_to_pages() { //给页面管理添加摘要的功能 add_post_type_support( &#39;page&#39;, array( &#39;excerpt&#39; ) ); } //wp_head钩子 add_action(&#39;wp_head&#39;,&#39;hc_wp_head&#39;); function hc_wp_head() { //只有首页输出描述 if( is_home() ){ ?&gt; &lt;meta name=&quot;description&quot; content=&quot;&lt;? bloginfo(&#39;description&#39;); ?&gt;&quot; /&gt; &lt;? } } //自定义引用样式表 function hc_enqueue_style() { wp_enqueue_style( &#39;core&#39;, plugins_url(&#39;css/hc_copyrighy.css&#39;, __FILE__) , false ); } //自定义引用脚本文件 function hc_enqueue_script() { wp_enqueue_script( &#39;my-js&#39;, plugins_url(&#39;js/hc_copyrighy.js&#39;, __FILE__), false ); } //引用文件的钩子 add_action( &#39;wp_enqueue_scripts&#39;, &#39;hc_enqueue_style&#39;, 5 ); add_action( &#39;wp_enqueue_scripts&#39;, &#39;hc_enqueue_script&#39;, 7 ); //删除所有挂载在 wp_enqueue_scripts 钩子上的方法 remove_all_actions( &#39;wp_enqueue_scripts&#39;, 5 ); //评论被添加的时候触发 add_action( &#39;wp_insert_comment&#39;, &#39;comment_inserted&#39;, 10, 2 ); //移除 wp_insert_comment 钩子上的 comment_inserted 方法 remove_action( &#39;wp_insert_comment&#39;, &#39;comment_inserted&#39;, 10 ); function comment_inserted($comment_id, $comment_object ) { //获取该评论所在文章的评论总数 $comments_count = wp_count_comments( $comment_object-&gt;comment_post_ID ); $commentarr = array(); $commentarr[&#39;comment_ID&#39;] = $comment_id; //修改评论的内容，在评论内容前加上 “第{$comments_count-&gt;total_comments}个评论：” 这么一段字符串 $commentarr[&#39;comment_content&#39;] = &quot;第{$comments_count-&gt;total_comments}个评论：&quot; . $comment_object-&gt;comment_content; wp_update_comment( $commentarr ); } add_action( &#39;user_register&#39;, &#39;myplugin_registration_save&#39;, 10, 1 ); function myplugin_registration_save( $user_id ) { //将新用户的个人说明，设置为注册时间 wp_update_user( array( &#39;ID&#39; =&gt; $user_id, &#39;description&#39; =&gt; &quot;注册时间：&quot; . date(&quot;Y-m-d H:i:s&quot;) ) ); } ?&gt; 过滤器 add_filter($tag过滤器名称, $function_to_add需要添加的函数, $priority优先级, $acceptedargs添加的参数数量) # hanchang-copyright.php //一开始，我们设置一个变量 $value = &quot;hello&quot;; //给名为 hc_filter 的过滤器，挂载一个 hc_filter_fun 方法，传递给 hc_filter 的变量都会经过 hc_filter_fun 方法进行过滤 //add_filter( &quot;hc_filter&quot;, &quot;hc_filter_fun&quot; ); //给名为 hc_filter 的过滤器，再挂载一个 hc_filter_fun_add_time 方法，传递给 hc_filter 的变量都会经过 hc_filter_fun、hc_filter_fun_add_time 两个方法进行过滤 //add_filter( &quot;hc_filter&quot;, &quot;hc_filter_fun_add_time&quot; ); //对 $value 值使用名为 hc_filter 的过滤器进行过滤，这个时候，由于 hc_filter 过滤器只挂载了 hc_filter_fun 方法，因此，只使用 hc_filter_fun 方法 过滤了一次，并且返回给 $myvar 变量 //$myvar = apply_filters( &quot;hc_filter&quot;, $value ); add_filter( &quot;the_content&quot;, &quot;hc_filter_fun&quot; ); add_filter( &quot;the_content&quot;, &quot;hc_filter_fun_add_time&quot; ); 带参数的过滤器 # hanchang-copyright.php function suppress_if_blurb( $title, $id = null ) { if ( in_category(&#39;wpcj&#39;, $id ) ) { return &#39;不显示标题&#39;; } return $title . &quot;...&quot;; } //对 the_title 过滤器挂载一个 suppress_if_blurb 方法，优先级为10，传递的参数有2个 add_filter( &#39;the_title&#39;, &#39;suppress_if_blurb&#39;, 10, 2 ); 常见过滤器 the_content 文章内容 content_save_pre 文章保存前 the_title 文章标题 wp_handle_upload_prefilter 上传文件之前 创建菜单 add_menu_page # 添加菜单 add_submenu_page # 添加子菜单 # hanchang-copyright.php // admin_menu钩子挂载创建菜单方法 add_action( &#39;admin_menu&#39;, &#39;hc_create_menu&#39; ); function hc_create_menu() { // 创建顶级菜单 add_menu_page( &#39;Hanchang的插件首页&#39;, // 菜单title标题 &#39;hanchang-copyright&#39;, // 菜单名称，显示在后台管理页面侧边栏 &#39;manage_options&#39;, // 浏览插件所需要的权限=管理员权限 &#39;hanchang_copyright&#39; , // 菜单别名，不能与其他插件冲突 &#39;hanchang_settings_page&#39;, // 菜单需要显示的页面，调用的哪个方法 plugins_url( &#39;/images/icon.png&#39;, __FILE__ ) // 调用图标 ); // 创建子菜单 add_submenu_page( &#39;hanchang_copyright&#39;, // 父级菜单别名 &#39;关于HC的插件&#39;, // 菜单title标题 &#39;关于&#39;, // 菜单名称，显示在后台管理页面侧边栏 &#39;manage_options&#39;, // 浏览插件所需要的权限=管理员权限 &#39;hc_copyright_about&#39;, // 菜单别名，不能与其他插件冲突 &#39;hc_create_submenu_menu&#39; // 调用方法 ); } function hanchang_settings_page() { ?&gt; &lt;h2&gt;插件顶级菜单&lt;/h2&gt; &lt;? } function hc_create_submenu_menu() { ?&gt; &lt;h2&gt;子菜单&lt;/h2&gt; &lt;? } #开发 小工具 #hanchang-copyright.php // 使用 widgets_init 动作钩子来执行自定义的函数 add_action( &#39;widgets_init&#39;, &#39;hc_register_widgets&#39; ); // 注册小工具 function hc_register_widgets() { register_widget( &#39;hc_widget_info&#39; ); } //使用 WP_Widget 类来创建小工具 class hc_widget_info extends WP_Widget { //构造函数 public function __construct() { $widget_ops = array( &#39;classname&#39; =&gt; &#39;hc_widget_info&#39;, &#39;description&#39; =&gt; &#39;显示作者的个人信息&#39; ); $this-&gt;WP_Widget( &#39;显示作者个人信息&#39;, &#39;作者的小工具&#39;, $widget_ops ); } //小工具管理界面 public function form( $instance ) { $defaults = array( &#39;title&#39; =&gt; &#39;作者的个人信息&#39;, &#39;xingming&#39; =&gt; &#39;作者&#39;, &#39;book&#39; =&gt; &#39;《作者》&#39; ); $instance = wp_parse_args( (array) $instance, $defaults ); $title = $instance[&#39;title&#39;]; $xingming = $instance[&#39;xingming&#39;]; $book = $instance[&#39;book&#39;]; ?&gt; &lt;p&gt;标题: &lt;input class=&quot;widefat&quot; name=&quot;&lt;?php echo $this-&gt;get_field_name( &#39;title&#39; ); ?&gt;&quot; type=&quot;text&quot; value=&quot;&lt;?php echo esc_attr( $title ); ?&gt;&quot; /&gt;&lt;/p&gt; &lt;p&gt;姓名: &lt;input class=&quot;widefat&quot; name=&quot;&lt;?php echo $this-&gt;get_field_name( &#39;xingming&#39; ); ?&gt; &quot;type=&quot;text&quot; value=&quot;&lt;?php echo esc_attr( $xingming ); ?&gt; &quot; /&gt;&lt;/p&gt; &lt;p&gt;著作: &lt;textarea class=&quot;widefat&quot; name=&quot; &lt;?php echo $this-&gt;get_field_name( &#39;book&#39; ); ?&gt; &quot; /&gt;&lt;?php echo esc_attr( $book ); ?&gt;&lt;/textarea&gt; &lt;/p&gt; &lt;?php } //保存小工具设置 public function update( $new_instance, $old_instance ) { $instance = $old_instance; $instance[&#39;title&#39;] = strip_tags( trim( $new_instance[&#39;title&#39;] ) ); $instance[&#39;xingming&#39;] = strip_tags( trim( $new_instance[&#39;xingming&#39;] ) ); $instance[&#39;book&#39;] = strip_tags( trim( $new_instance[&#39;book&#39;] ) ); return $instance; } //显示小工具 public function widget( $args, $instance ) { extract( $args ); $title = apply_filters( &#39;widget_title&#39;, $instance[&#39;title&#39;] ); $xingming = empty( $instance[&#39;xingming&#39;] ) ? &#39; &#39; : $instance[&#39;xingming&#39;]; $book = empty( $instance[&#39;book&#39;] ) ? &#39; &#39; : $instance[&#39;book&#39;]; echo &#39;&lt;p&gt; 标题: &#39; . $title . &#39;&lt;/p&gt;&#39;; echo &#39;&lt;p&gt; 姓名: &#39; . $xingming . &#39;&lt;/p&gt;&#39;; echo &#39;&lt;p&gt; 著作: &#39; . $book . &#39;&lt;/p&gt;&#39;; } } 添加元数据框 # hanchang-copyright.php /** * 添加一个元数据框到 post 和 page 的管理界面中 */ function myplugin_add_meta_box() { $screens = array( &#39;post&#39;, &#39;page&#39; ); add_meta_box( &#39;myplugin_sectionid&#39;, // 元数据框的html代码中的id值 &#39;转载自&#39;, // 元数据框标题 &#39;myplugin_meta_box_callback&#39;, // 回调函数名称，输出元数据框中的内容 $screens // 元数据框需要添加在哪个分类内的（文章或者页面） ); } //需要给 add_meta_boxes 钩子，挂载一个自定义的方法 add_action( &#39;add_meta_boxes&#39;, &#39;myplugin_add_meta_box&#39; ); /** * 元数据框展示代码 */ function myplugin_meta_box_callback( $post ) { // 添加一个验证信息，这个在保存元数据的时候用到 wp_nonce_field( &#39;myplugin_save_meta_box_data&#39;, &#39;myplugin_meta_box_nonce&#39; ); /* * 输出元数据信息 */ $value = get_post_meta( $post-&gt;ID, &#39;_zzurl&#39;, true ); echo &#39;&lt;label for=&quot;myplugin_new_field&quot;&gt;&#39;; _e( &#39;本文章转载自：&#39; ); echo &#39;&lt;/label&gt; &#39;; echo &#39;&lt;input type=&quot;text&quot; id=&quot;_zzurl&quot; name=&quot;_zzurl&quot; value=&quot;&#39; . esc_attr( $value ) . &#39;&quot; size=&quot;25&quot; /&gt;&#39;; } function myplugin_save_meta_box_data( $post_id ) { //验证是否为有效信息 if ( ! isset( $_POST[&#39;myplugin_meta_box_nonce&#39;] ) ) { return; } if ( ! wp_verify_nonce( $_POST[&#39;myplugin_meta_box_nonce&#39;], &#39;myplugin_save_meta_box_data&#39; ) ) { return; } if ( defined( &#39;DOING_AUTOSAVE&#39; ) &amp;&amp; DOING_AUTOSAVE ) { return; } // Check the user&#39;s permissions. if ( isset( $_POST[&#39;post_type&#39;] ) &amp;&amp; &#39;page&#39; == $_POST[&#39;post_type&#39;] ) { if ( ! current_user_can( &#39;edit_page&#39;, $post_id ) ) { return; } } else { if ( ! current_user_can( &#39;edit_post&#39;, $post_id ) ) { return; } } if ( ! isset( $_POST[&#39;_zzurl&#39;] ) ) { return; } $my_data = sanitize_text_field( $_POST[&#39;_zzurl&#39;] ); update_post_meta( $post_id, &#39;_zzurl&#39;, $my_data ); } //文章保存的时候，会调用 save_post 钩子，因此我们要借助这个钩子来保存元数据框内的数据 add_action( &#39;save_post&#39;, &#39;myplugin_save_meta_box_data&#39; ); 后台常见css样式表 # copyright.php function hanchang_settings_page() { ?&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;h2&gt;插件顶级菜单&lt;/h2&gt; &lt;div id=&quot;message&quot; class=&quot;updated&quot;&gt;设置保存成功&lt;/div&gt; &lt;div id=&quot;message&quot; class=&quot;error&quot;&gt;保存出现错误&lt;/div&gt; &lt;p&gt; &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; /&gt; &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button&quot; /&gt; &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-primary&quot; /&gt; &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-secondary&quot; /&gt; &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-large&quot; /&gt; &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-small&quot; /&gt; &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-hero&quot; /&gt; &lt;/p&gt; &lt;p&gt; &lt;a href=&quot;#&quot;&gt;搜索&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;button&quot;&gt;搜索&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;button button-primary&quot;&gt;搜索&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;button button-secondary&quot;&gt;搜索&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;button button-large&quot;&gt;搜索&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;button button-small&quot;&gt;搜索&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;button button-hero&quot;&gt;搜索&lt;/a&gt; &lt;/p&gt; &lt;form method=&quot;POST&quot; action=&quot;&quot;&gt; &lt;table class=&quot;form-table&quot;&gt; &lt;tr valign=&quot;top&quot;&gt; &lt;th&gt;&lt;label for=&quot;xingming&quot;&gt;姓名：&lt;/label&gt;&lt;/th&gt; &lt;td&gt;&lt;input id=&quot;xingming&quot; name=&quot;xingming&quot; /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr valign=&quot;top&quot;&gt; &lt;th&gt;&lt;label for=&quot;shenfen&quot;&gt;身份：&lt;/label&gt;&lt;/th&gt; &lt;td&gt; &lt;select name=&quot;shenfen&quot;&gt; &lt;option value=&quot;在校&quot;&gt;在校&lt;/option&gt; &lt;option value=&quot;毕业&quot;&gt;毕业&lt;/option&gt; &lt;/select&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr valign=&quot;top&quot;&gt; &lt;th&gt;&lt;label for=&quot;tongyi&quot;&gt;同意注册&lt;/label&gt;&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;tongyi&quot; /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr valign=&quot;top&quot;&gt; &lt;th&gt;&lt;label for=&quot;xingbie&quot;&gt;性别&lt;/label&gt;&lt;/th&gt; &lt;td&gt; &lt;input type=&quot;radio&quot; name=&quot;xingbie&quot; value=&quot;男&quot; /&gt; 男 &lt;input type=&quot;radio&quot; name=&quot;xingbie&quot; value=&quot;女&quot; /&gt; 女 &lt;/td&gt; &lt;/tr&gt; &lt;tr valign=&quot;top&quot;&gt; &lt;th&gt;&lt;label for=&quot;beizhu&quot;&gt;备注&lt;/label&gt;&lt;/th&gt; &lt;td&gt;&lt;textarea name=&quot;beizhu&quot;&gt;&lt;/textarea&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr valign=&quot;top&quot;&gt; &lt;td&gt; &lt;input type=&quot;submit&quot; name=&quot;save&quot; value=&quot;保存&quot; class=&quot;button-primary&quot; /&gt; &lt;input type=&quot;submit&quot; name=&quot;reset&quot; value=&quot;重置&quot; class=&quot;button-secondary&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;table class=&quot;widefat striped&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;序号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;黄聪&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;黄聪&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;黄聪&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;th&gt;序号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;/table&gt; &lt;div class=&quot;tablenav&quot;&gt; &lt;div class=&quot;tablenav-pages&quot;&gt; &lt;span class=&quot;displaying-num&quot;&gt;第1页，共458页&lt;/span&gt; &lt;span class=&quot;page-numbers current&quot;&gt;1&lt;/span&gt; &lt;a href=&quot;#&quot; class=&quot;page-numbers&quot;&gt;2&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;page-numbers&quot;&gt;3&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;page-numbers&quot;&gt;4&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;next page-numbers&quot;&gt;»&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;? } 保存插件设置到数据库中 ├── hc-test │ ├── css │ ├── hc-test.php │ ├── images │ └── js hc-test.php &lt;?php /* Plugin Name: hc-test Plugin URI: http://zhuohc.com Description: 测试插件 Version: 1.0 Author: hc Author URI: http://zhuohc.com License: GPLv2 */ //设置时区为 亚洲/上海 date_default_timezone_set(&#39;Asia/Shanghai&#39;); //定义插件启动时候调用的方法 register_activation_hook( __FILE__, &#39;hc_test_install&#39;); function hc_test_install() { global $wpdb; if( $wpdb-&gt;get_var( &quot;SHOW TABLES LIKE &#39;{$wpdb-&gt;prefix}test&#39;&quot; ) != &quot;{$wpdb-&gt;prefix}test&quot; ) { $sql = &quot;CREATE TABLE IF NOT EXISTS `{$wpdb-&gt;prefix}test` ( `id` int(11) NOT NULL auto_increment COMMENT &#39;编号&#39;, `color` varchar(10) DEFAULT &#39;&#39; COMMENT &#39;字体颜色&#39;, `size` varchar(10) DEFAULT &#39;&#39; COMMENT &#39;字体大小&#39;, PRIMARY KEY (`id`) ) DEFAULT CHARSET=utf8 AUTO_INCREMENT=0;&quot;; $wpdb-&gt;query( $sql ); $sql = &quot;REPLACE INTO `{$wpdb-&gt;prefix}test` VALUES (1, &#39;#FF0000&#39;,&#39;20&#39;);&quot;; $wpdb-&gt;query( $sql ); } } add_action( &#39;admin_menu&#39;, &#39;hc_test_create_menu&#39; ); function hc_test_create_menu() { //创建顶级菜单 add_menu_page( &#39;HC-TEST&#39;, &#39;HC的插件&#39;, &#39;manage_options&#39;, &#39;hc_test&#39; , &#39;hc_settings_page&#39;, plugins_url( &#39;/images/icon.png&#39;, __FILE__ ) ); } function hc_settings_page() { global $wpdb; //当提交了，并且验证信息正确 if( !empty( $_POST ) &amp;&amp; check_admin_referer( &#39;hc_test_nonce&#39; ) ) { //更新设置 update_option( &#39;hc_test_bold&#39;, $_POST[&#39;hc_test_bold&#39;] ); $wpdb-&gt;update( &quot;{$wpdb-&gt;prefix}test&quot;, array( &#39;color&#39; =&gt; $_POST[&#39;color&#39;], &#39;size&#39; =&gt; $_POST[&#39;size&#39;] ), array( &#39;id&#39; =&gt; 1 ) ); ?&gt; &lt;div id=&quot;message&quot; class=&quot;updated&quot;&gt; &lt;p&gt;&lt;strong&gt;保存成功！&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;? } $sql = &quot;SELECT * FROM `{$wpdb-&gt;prefix}test`&quot;; $row = $wpdb-&gt;get_row( $sql, ARRAY_A ); $color = $row[&#39;color&#39;]; $size = $row[&#39;size&#39;]; ?&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;h2&gt;插件顶级菜单&lt;/h2&gt; &lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;p&gt;&lt;label for=&quot;color&quot;&gt;字体颜色：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;color&quot; value=&quot;&lt;?php echo $color; ?&gt;&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;label for=&quot;size&quot;&gt;字体大小：&lt;/label&gt; &lt;select name=&quot;size&quot;&gt; &lt;option value=&quot;12&quot; &lt;? selected( &#39;12&#39;, $size ); ?&gt;&gt;12&lt;/option&gt; &lt;option value=&quot;14&quot; &lt;? selected( &#39;14&#39;, $size ); ?&gt;&gt;14&lt;/option&gt; &lt;option value=&quot;16&quot; &lt;? selected( &#39;16&#39;, $size ); ?&gt;&gt;16&lt;/option&gt; &lt;option value=&quot;18&quot; &lt;? selected( &#39;18&#39;, $size ); ?&gt;&gt;18&lt;/option&gt; &lt;option value=&quot;20&quot; &lt;? selected( &#39;20&#39;, $size ); ?&gt;&gt;20&lt;/option&gt; &lt;/select&gt;&lt;/p&gt; &lt;p&gt;&lt;label for=&quot;hc_test_obold&quot;&gt;字体加粗：&lt;/label&gt;&lt;input name=&quot;hc_test_bold&quot; type=&quot;checkbox&quot; value=&quot;1&quot; &lt;? checked( 1, get_option( &#39;hc_test_bold&#39; ) ); ?&gt; /&gt; 加粗&lt;/p&gt; &lt;p&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;保存设置&quot; /&gt;&lt;/p&gt; &lt;? //输出一个验证信息 wp_nonce_field(&#39;hc_test_nonce&#39;); ?&gt; &lt;/form&gt; &lt;/div&gt; &lt;? } add_action( &#39;wp_head&#39;, &#39;hc_test_head_fun&#39; ); function hc_test_head_fun() { global $wpdb; //获取自定义数据库中的设置 $sql = &quot;SELECT * FROM `{$wpdb-&gt;prefix}test`&quot;; $row = $wpdb-&gt;get_row( $sql, ARRAY_A ); //获取options表中的设置选项 $bold = get_option( &quot;hc_test_bold&quot; ) == 1 ? &quot;bold&quot; : &quot;normal&quot;; ?&gt;&lt;style&gt;body{color:&lt;? echo $row[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $row[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;? } 使用wordpress内置api设置插件属性 # hc-test.php &lt;?php /* Plugin Name: hc-test Plugin URI: http://zhuohc.com Description: 测试插件 Version: 1.0 Author: hc Author URI: http://zhuohc.com License: GPLv2 */ //设置时区为 亚洲/上海 date_default_timezone_set(&#39;Asia/Shanghai&#39;); add_action( &#39;admin_menu&#39;, &#39;test_create_menu&#39; ); function test_create_menu() { //创建顶级菜单 add_menu_page( &#39;HC的插件首页&#39;, &#39;HC的插件&#39;, &#39;manage_options&#39;, &#39;hc_test&#39; , &#39;hc_settings_page&#39;, plugins_url( &#39;/images/icon.png&#39;, __FILE__ ) ); } add_action( &#39;admin_init&#39;, &#39;register_hc_test_setting&#39; ); //使用register_setting()注册要存储的字段 function register_hc_test_setting() { //注册一个选项，用于装载所有插件设置项 $option_group = &quot;hc_test_group&quot;; register_setting( $option_group, &#39;hc_test_option&#39; ); //添加选项设置区域 $setting_section = &quot;hc_test_setting_section&quot;; add_settings_section( $setting_section, &#39;设置&#39;, // 标题 &#39;hc_test_setting_section_function&#39;, // 调用方法，自定义输出 $option_group ); //设置字体颜色 add_settings_field( &#39;hc_test_color&#39;, // 字段id &#39;字体颜色&#39;, // 字段标题 &#39;hc_test_color_function&#39;, // 字段对应函数方法 $option_group, // 字段对应分组 $setting_section // 字段对应设置选项 ); //设置字体大小 add_settings_field( &#39;hc_test_size&#39;, &#39;字体大小&#39;, &#39;hc_test_size_function&#39;, $option_group, $setting_section ); //设置字体加粗 add_settings_field( &#39;hc_test_bold&#39;, &#39;字体加粗&#39;, &#39;hc_test_bold_function&#39;, $option_group, $setting_section ); } function hc_test_bold_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); ?&gt; &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot; value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; 加粗 &lt;? } function hc_test_size_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); $size = $hc_test_option[&quot;size&quot;]; ?&gt; &lt;select name=&quot;hc_test_option[size]&quot;&gt; &lt;option value=&quot;12&quot; &lt;? selected( &#39;12&#39;, $size ); ?&gt;&gt;12&lt;/option&gt; &lt;option value=&quot;14&quot; &lt;? selected( &#39;14&#39;, $size ); ?&gt;&gt;14&lt;/option&gt; &lt;option value=&quot;16&quot; &lt;? selected( &#39;16&#39;, $size ); ?&gt;&gt;16&lt;/option&gt; &lt;option value=&quot;18&quot; &lt;? selected( &#39;18&#39;, $size ); ?&gt;&gt;18&lt;/option&gt; &lt;option value=&quot;20&quot; &lt;? selected( &#39;20&#39;, $size ); ?&gt;&gt;20&lt;/option&gt; &lt;/select&gt; &lt;? } function hc_test_color_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); ?&gt; &lt;input name=&#39;hc_test_option[color]&#39; type=&#39;text&#39; value=&#39;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&#39; /&gt; &lt;? } function hc_settings_page() { ?&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;h2&gt;插件顶级菜单&lt;/h2&gt; &lt;form action=&quot;options.php&quot; method=&quot;post&quot;&gt; &lt;? $option_group = &quot;hc_test_group&quot;; //输出一些必要的字段，包括验证信息等 settings_fields( $option_group ); //输出选项设置区域 do_settings_sections( $option_group ); //输出按钮 submit_button(); ?&gt; &lt;/form&gt; &lt;/div&gt; &lt;? } add_action( &#39;wp_head&#39;, &#39;hc_test_head_fun&#39; ); function hc_test_head_fun() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;; ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;? } 将插件改写成类的形式 #hc-test.php &lt;?php /* Plugin Name: hc-test Plugin URI: http://zhuohc.com Description: 测试插件 Version: 1.0 Author: hc Author URI: http://zhuohc.com License: GPLv2 */ //设置时区为 亚洲/上海 date_default_timezone_set(&#39;Asia/Shanghai&#39;); class hcsem_change_font_style { //声明类里面的属性，用 var 开头 var $icon_url = &quot;/images/icon.png&quot;; var $option_group = &quot;hc_test_group&quot;; //构造方法，创建类的时候调用 function hcsem_change_font_style() { //创建菜单 add_action( &#39;admin_menu&#39;, array( $this, &#39;hc_create_menu&#39; ) ); add_action( &#39;admin_init&#39;, array( $this, &#39;register_hc_test_setting&#39; ) ); add_action( &#39;wp_head&#39;, array( $this, &#39;hc_test_head_fun&#39; ) ); } //使用register_setting()注册要存储的字段 function register_hc_test_setting() { //注册一个选项，用于装载所有插件设置项 register_setting( $this-&gt;option_group, &#39;hc_test_option&#39; ); //添加选项设置区域 $setting_section = &quot;hc_test_setting_section&quot;; add_settings_section( $setting_section, &#39;&#39;, &#39;&#39;, $this-&gt;option_group ); //设置字体颜色 add_settings_field( &#39;hc_test_color&#39;, &#39;字体颜色&#39;, array( $this, &#39;hc_test_color_function&#39; ), $this-&gt;option_group, $setting_section ); //设置字体大小 add_settings_field( &#39;hc_test_size&#39;, &#39;字体大小&#39;, array( $this, &#39;hc_test_size_function&#39; ), $this-&gt;option_group, $setting_section ); //设置字体加粗 add_settings_field( &#39;hc_test_bold&#39;, &#39;字体加粗&#39;, array( $this, &#39;hc_test_bold_function&#39; ), $this-&gt;option_group, $setting_section ); } function hc_test_bold_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); ?&gt; &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot; value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; 加粗 &lt;? } function hc_test_size_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); $size = $hc_test_option[&quot;size&quot;]; ?&gt; &lt;select name=&quot;hc_test_option[size]&quot;&gt; &lt;option value=&quot;12&quot; &lt;? selected( &#39;12&#39;, $size ); ?&gt;&gt;12&lt;/option&gt; &lt;option value=&quot;14&quot; &lt;? selected( &#39;14&#39;, $size ); ?&gt;&gt;14&lt;/option&gt; &lt;option value=&quot;16&quot; &lt;? selected( &#39;16&#39;, $size ); ?&gt;&gt;16&lt;/option&gt; &lt;option value=&quot;18&quot; &lt;? selected( &#39;18&#39;, $size ); ?&gt;&gt;18&lt;/option&gt; &lt;option value=&quot;20&quot; &lt;? selected( &#39;20&#39;, $size ); ?&gt;&gt;20&lt;/option&gt; &lt;/select&gt; &lt;? } function hc_test_color_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); ?&gt; &lt;input name=&#39;hc_test_option[color]&#39; type=&#39;text&#39; value=&#39;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&#39; /&gt; &lt;? } function hc_create_menu() { //创建顶级菜单 add_menu_page( &#39;HC的插件首页&#39;, &#39;HC的插件&#39;, &#39;manage_options&#39;, &#39;hc_test&#39; , array( $this, &#39;hc_settings_page&#39; ), plugins_url( $this-&gt;icon_url, __FILE__ ) ); } function hc_settings_page() { ?&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;h2&gt;插件顶级菜单&lt;/h2&gt; &lt;form action=&quot;options.php&quot; method=&quot;post&quot;&gt; &lt;? //输出一些必要的字段，包括验证信息等 settings_fields( $this-&gt;option_group ); //输出选项设置区域 do_settings_sections( $this-&gt;option_group ); //输出按钮 submit_button(); ?&gt; &lt;/form&gt; &lt;/div&gt; &lt;? } function hc_test_head_fun() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;; ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;? } } new hcsem_change_font_style(); 将插件设置内容转移到wordpress设置里 # hc-test.php class hcsem_change_font_style { var $option_group = &quot;general&quot;; // general常规 writing撰写 reading阅读 discussion讨论 media多媒体 permalink固定链接 //构造方法，创建类的时候调用 function hcsem_change_font_style() { add_action( &#39;admin_init&#39;, array( $this, &#39;register_hc_test_setting&#39; ) ); add_action( &#39;wp_head&#39;, array( $this, &#39;hc_test_head_fun&#39; ) ); } //使用register_setting()注册要存储的字段 function register_hc_test_setting() { //注册一个选项，用于装载所有插件设置项 register_setting( $this-&gt;option_group, &#39;hc_test_option&#39; ); //设置字体颜色 add_settings_field( &#39;hc_test_color&#39;, &#39;字体颜色&#39;, array( $this, &#39;hc_test_color_function&#39; ), $this-&gt;option_group ); //设置字体大小 add_settings_field( &#39;hc_test_size&#39;, &#39;字体大小&#39;, array( $this, &#39;hc_test_size_function&#39; ), $this-&gt;option_group ); //设置字体加粗 add_settings_field( &#39;hc_test_bold&#39;, &#39;字体加粗&#39;, array( $this, &#39;hc_test_bold_function&#39; ), $this-&gt;option_group ); } function hc_test_bold_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); ?&gt; &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot; value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; 加粗 &lt;? } function hc_test_size_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); $size = $hc_test_option[&quot;size&quot;]; ?&gt; &lt;select name=&quot;hc_test_option[size]&quot;&gt; &lt;option value=&quot;12&quot; &lt;? selected( &#39;12&#39;, $size ); ?&gt;&gt;12&lt;/option&gt; &lt;option value=&quot;14&quot; &lt;? selected( &#39;14&#39;, $size ); ?&gt;&gt;14&lt;/option&gt; &lt;option value=&quot;16&quot; &lt;? selected( &#39;16&#39;, $size ); ?&gt;&gt;16&lt;/option&gt; &lt;option value=&quot;18&quot; &lt;? selected( &#39;18&#39;, $size ); ?&gt;&gt;18&lt;/option&gt; &lt;option value=&quot;20&quot; &lt;? selected( &#39;20&#39;, $size ); ?&gt;&gt;20&lt;/option&gt; &lt;/select&gt; &lt;? } function hc_test_color_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); ?&gt; &lt;input name=&#39;hc_test_option[color]&#39; type=&#39;text&#39; value=&#39;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&#39; /&gt; &lt;? } function hc_test_head_fun() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;; ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;? } } new hcsem_change_font_style(); 调用ajax # hc-test.php &lt;?php /* Plugin Name: hc-test Plugin URI: http://zhuohc.com Description: 测试插件 Version: 1.0 Author: hc Author URI: http://zhuohc.com License: GPLv2 */ //设置时区为 亚洲/上海 date_default_timezone_set(&#39;Asia/Shanghai&#39;); class hcsem_change_font_style { //声明类里面的属性，用 var 开头 var $icon_url = &quot;/images/icon.png&quot;; var $option_group = &quot;hc_test_group&quot;; //构造方法，创建类的时候调用 function hcsem_change_font_style() { //创建菜单 add_action( &#39;admin_menu&#39;, array( $this, &#39;hc_create_menu&#39; ) ); add_action( &#39;admin_init&#39;, array( $this, &#39;register_hc_test_setting&#39; ) ); add_action( &#39;wp_head&#39;, array( $this, &#39;hc_test_head_fun&#39; ) ); //使用ajax校验信息 wp_enqueue_script( &#39;hc_test&#39;, plugins_url(&#39;js/hc_test.js&#39;, __FILE__), array(&#39;jquery&#39;) ); wp_localize_script( &#39;hc_test&#39;, &#39;ajax_object&#39;, array( &#39;ajax_url&#39; =&gt; admin_url( &#39;admin-ajax.php&#39; ) ) ); add_action( &#39;wp_ajax_color_check_action&#39; , array( $this, &#39;color_check_action_fun&#39;) ); add_action( &#39;wp_ajax_nopriv_hcsem_description&#39; , array( $this, &#39;hcsem_description_fun&#39;) ); } function color_check_action_fun(){ if( trim( $_POST[&#39;color&#39;] ) != &quot;&quot; ){ echo &quot;ok&quot;; } wp_die(); } function hcsem_description_fun() { echo &quot;hc的笔记本：&quot; . $_POST[&#39;description&#39;]; wp_die(); } //使用register_setting()注册要存储的字段 function register_hc_test_setting() { //注册一个选项，用于装载所有插件设置项 register_setting( $this-&gt;option_group, &#39;hc_test_option&#39; ); //添加选项设置区域 $setting_section = &quot;hc_test_setting_section&quot;; add_settings_section( $setting_section, &#39;&#39;, &#39;&#39;, $this-&gt;option_group ); //设置字体颜色 add_settings_field( &#39;hc_test_color&#39;, &#39;字体颜色&#39;, array( $this, &#39;hc_test_color_function&#39; ), $this-&gt;option_group, $setting_section ); //设置字体大小 add_settings_field( &#39;hc_test_size&#39;, &#39;字体大小&#39;, array( $this, &#39;hc_test_size_function&#39; ), $this-&gt;option_group, $setting_section ); //设置字体加粗 add_settings_field( &#39;hc_test_bold&#39;, &#39;字体加粗&#39;, array( $this, &#39;hc_test_bold_function&#39; ), $this-&gt;option_group, $setting_section ); } function hc_test_bold_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); ?&gt; &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot; value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; 加粗 &lt;? } function hc_test_size_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); $size = $hc_test_option[&quot;size&quot;]; ?&gt; &lt;select name=&quot;hc_test_option[size]&quot;&gt; &lt;option value=&quot;12&quot; &lt;? selected( &#39;12&#39;, $size ); ?&gt;&gt;12&lt;/option&gt; &lt;option value=&quot;14&quot; &lt;? selected( &#39;14&#39;, $size ); ?&gt;&gt;14&lt;/option&gt; &lt;option value=&quot;16&quot; &lt;? selected( &#39;16&#39;, $size ); ?&gt;&gt;16&lt;/option&gt; &lt;option value=&quot;18&quot; &lt;? selected( &#39;18&#39;, $size ); ?&gt;&gt;18&lt;/option&gt; &lt;option value=&quot;20&quot; &lt;? selected( &#39;20&#39;, $size ); ?&gt;&gt;20&lt;/option&gt; &lt;/select&gt; &lt;? } function hc_test_color_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); ?&gt; &lt;input name=&#39;hc_test_option[color]&#39; type=&#39;text&#39; value=&#39;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&#39; /&gt; &lt;font id=&quot;error_color&quot;&gt;&lt;/font&gt;&lt;/div&gt; &lt;? } function hc_create_menu() { //创建顶级菜单 add_menu_page( &#39;HC的插件首页&#39;, &#39;HC的插件&#39;, &#39;manage_options&#39;, &#39;hc_test&#39; , array( $this, &#39;hc_settings_page&#39; ), plugins_url( $this-&gt;icon_url, __FILE__ ) ); } function hc_settings_page() { ?&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;h2&gt;插件顶级菜单&lt;/h2&gt; &lt;form action=&quot;options.php&quot; method=&quot;post&quot;&gt; &lt;? //输出一些必要的字段，包括验证信息等 settings_fields( $this-&gt;option_group ); //输出选项设置区域 do_settings_sections( $this-&gt;option_group ); //输出按钮 submit_button(); ?&gt; &lt;/form&gt; &lt;/div&gt; &lt;? } function hc_test_head_fun() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;; ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;? } } new hcsem_change_font_style(); # js/hc_test.js jQuery(document).ready( function($) { $(&quot;input[name=&#39;hc_test_option[color]&#39;]&quot;).blur( function() { $.ajax({ type: &quot;POST&quot;, data: &quot;color=&quot; + $(this).val() + &quot;&amp;action=hc_color_check&quot;, url: ajax_object.ajax_url, beforeSend: function() { $(&#39;#error_color&#39;).html(&#39;校验中...&#39;); }, success: function( $data ) { if( $data == &#39;ok&#39;){ $(&#39;#error_color&#39;).html(&#39;输入正确&#39;); } else { $(&#39;#error_color&#39;).html(&#39;颜色不能为空！&#39;); } } }); }); }); jQuery(document).ready( function($) { $(&quot;.description&quot;).click( function() { $.ajax({ type: &quot;POST&quot;, data: &quot;description=&quot; + $(this).text() + &quot;&amp;action=hcsem_description&quot;, url: ajax_object.ajax_url, success : function( $data ) { if( $data != &quot;0&quot; ) { $(&quot;.description&quot;).text( $data ); } } }); }); }); 实现插件翻译功能 . ├── css │ └── hc_copyrighy.css ├── hc-test.php ├── images │ └── icon.png ├── js │ └── hc_test.js └── languages ├── zh_CN.mo └── zh_CN.po # hc-test.php &lt;?php /* Plugin Name: hc-test Plugin URI: http://zhuohc.com Description: 测试插件 Version: 1.0 Author: hc Author URI: http://zhuohc.com License: GPLv2 */ //设置时区为 亚洲/上海 date_default_timezone_set(&#39;Asia/Shanghai&#39;); class hcsem_change_font_style { //声明类里面的属性，用 var 开头 var $icon_url = &quot;/images/icon.png&quot;; var $option_group = &quot;hc_test_group&quot;; //构造方法，创建类的时候调用 function hcsem_change_font_style() { //创建菜单 add_action( &#39;admin_menu&#39;, array( $this, &#39;hc_create_menu&#39; ) ); add_action( &#39;admin_init&#39;, array( $this, &#39;register_hc_test_setting&#39; ) ); add_action( &#39;wp_head&#39;, array( $this, &#39;hc_test_head_fun&#39; ) ); //使用ajax校验信息 wp_enqueue_script( &#39;hc_test&#39;, plugins_url(&#39;js/hc_test.js&#39;, __FILE__), array(&#39;jquery&#39;) ); wp_localize_script( &#39;hc_test&#39;, &#39;ajax_object&#39;, array( &#39;ajax_url&#39; =&gt; admin_url( &#39;admin-ajax.php&#39; ) ) ); add_action( &#39;wp_ajax_color_check_action&#39; , array( $this, &#39;color_check_action_fun&#39;) ); add_action( &#39;wp_ajax_nopriv_hcsem_description&#39; , array( $this, &#39;hcsem_description_fun&#39;) ); add_action( &#39;init&#39;, array( $this, &#39;hcsem_load_textdomain&#39; ) ); } function hcsem_load_textdomain() { //加载 languages 目录下的翻译文件 zh_CN $currentLocale = get_locale(); if( !empty( $currentLocale ) ) { $moFile = dirname(__FILE__) . &quot;/languages/{$currentLocale}.mo&quot;; if( @file_exists( $moFile ) &amp;&amp; is_readable( $moFile ) ) load_textdomain( &#39;hc-test&#39;, $moFile ); } } function color_check_action_fun(){ if( trim( $_POST[&#39;color&#39;] ) != &quot;&quot; ){ echo &quot;ok&quot;; } wp_die(); } function hcsem_description_fun() { echo &quot;HC的笔记本：&quot; . $_POST[&#39;description&#39;]; wp_die(); } //使用register_setting()注册要存储的字段 function register_hc_test_setting() { //注册一个选项，用于装载所有插件设置项 register_setting( $this-&gt;option_group, &#39;hc_test_option&#39; ); //添加选项设置区域 $setting_section = &quot;hc_test_setting_section&quot;; add_settings_section( $setting_section, &#39;&#39;, &#39;&#39;, $this-&gt;option_group ); //设置字体颜色 add_settings_field( &#39;hc_test_color&#39;, __( &#39;color&#39;, &#39;hc-test&#39; ), array( $this, &#39;hc_test_color_function&#39; ), $this-&gt;option_group, $setting_section ); //设置字体大小 add_settings_field( &#39;hc_test_size&#39;, __( &#39;size&#39;, &#39;hc-test&#39; ), array( $this, &#39;hc_test_size_function&#39; ), $this-&gt;option_group, $setting_section ); //设置字体加粗 add_settings_field( &#39;hc_test_bold&#39;, __( &#39;bold&#39;, &#39;hc-test&#39; ), array( $this, &#39;hc_test_bold_function&#39; ), $this-&gt;option_group, $setting_section ); } function hc_test_bold_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); ?&gt; &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot; value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; &lt;? _e( &#39;set bold&#39;, &#39;hc-test&#39; ); ?&gt; &lt;? } function hc_test_size_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); $size = $hc_test_option[&quot;size&quot;]; ?&gt; &lt;select name=&quot;hc_test_option[size]&quot;&gt; &lt;option value=&quot;12&quot; &lt;? selected( &#39;12&#39;, $size ); ?&gt;&gt;12&lt;/option&gt; &lt;option value=&quot;14&quot; &lt;? selected( &#39;14&#39;, $size ); ?&gt;&gt;14&lt;/option&gt; &lt;option value=&quot;16&quot; &lt;? selected( &#39;16&#39;, $size ); ?&gt;&gt;16&lt;/option&gt; &lt;option value=&quot;18&quot; &lt;? selected( &#39;18&#39;, $size ); ?&gt;&gt;18&lt;/option&gt; &lt;option value=&quot;20&quot; &lt;? selected( &#39;20&#39;, $size ); ?&gt;&gt;20&lt;/option&gt; &lt;/select&gt; &lt;? } function hc_test_color_function() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); ?&gt; &lt;input name=&#39;hc_test_option[color]&#39; type=&#39;text&#39; value=&#39;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&#39; /&gt; &lt;font id=&quot;error_color&quot;&gt;&lt;/font&gt;&lt;/div&gt; &lt;? } function hc_create_menu() { //创建顶级菜单 add_menu_page( &#39;hc的插件首页&#39;, &#39;hc的插件&#39;, &#39;manage_options&#39;, &#39;hc_test&#39; , array( $this, &#39;hc_settings_page&#39; ), plugins_url( $this-&gt;icon_url, __FILE__ ) ); } function hc_settings_page() { ?&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;h2&gt;插件顶级菜单&lt;/h2&gt; &lt;form action=&quot;options.php&quot; method=&quot;post&quot;&gt; &lt;? //输出一些必要的字段，包括验证信息等 settings_fields( $this-&gt;option_group ); //输出选项设置区域 do_settings_sections( $this-&gt;option_group ); //输出按钮 submit_button(); ?&gt; &lt;/form&gt; &lt;/div&gt; &lt;? } function hc_test_head_fun() { $hc_test_option = get_option( &quot;hc_test_option&quot; ); $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;; ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;? } } new hcsem_change_font_style();]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pythontkinter入门基础]]></title>
    <url>%2F2016%2F11%2F10%2Fpythontkinter%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[python基础环境 sudo apt-get install python sudo apt-get install python-pip Tkinter安装 sudo apt-get install python-tk 配置组件外观 #!/usr/bin/python # -*- coding: UTF-8 -*- from Tkinter import * root = Tk() # 定义图标 if sys.platform == &#39;win32&#39;: root.iconbitmap(&#39;favicon.ico&#39;) else: icon = PhotoImage(file=&#39;phone.gif&#39;) root.tk.call(&#39;wm&#39;, &#39;iconphoto&#39;, root._w, icon) # 定义字体，字号，类型 label_font = (&#39;Ubuntu&#39;, 20, &#39;bold underline italic&#39;) # 创建组件 widget = Label(root, text=&#39;Hello,云克隆&#39;, padx=100, pady=20) # 配置组件字体 widget.config(font=label_font) # 组件宽，高 widget.config(height=3, width=20) # 组件背景颜色 widget.config(bg=&#39;#FF0&#39;) # 组件字体颜色 widget.config(fg=&#39;#F0F&#39;) # 组件边框宽度 widget.config(bd=3) # 组件边框外形, FLAT扁平, SUNKEN凹陷, RAISED凸起, GROOVE凹槽, SOLID加粗, RIDGE脊状, widget.config(relief=SUNKEN) # 组件鼠标手势, &#39;gumby&#39;, &#39;watch&#39;, &#39;pencil&#39;, &#39;crdss&#39;, hand2 widget.config(cursor=&#39;gumby&#39;) # 组件状态, DISABLE禁用, NORMAL正常, READONLY只读 widget.config(state=DISABLED) # 布置组件 # expand设置是否可以扩展，fill表示随父组件扩展方向，可以设置BOTH, X, Y # 设置组件padding值 # side表示按钮布置窗口的位置 widget.pack(expand=True, fill=X, padx=10, pady=50, side=LEFT) root.mainloop() 标准弹出框 # -*- coding: UTF-8 -*- from Tkinter import * from tkMessageBox import * # python3 # from Tkinter.messagebox import * def callback(): if askyesno(&#39;Verify&#39;, &#39;Do you ready want to quit?&#39;): showwarning(&#39;Yes&#39;, &#39;Quit not yet&#39;) else: showinfo(&#39;No&#39;, &#39;Quit has been cancelled&#39;) errmsg = &#39;Sorry, no spam allowed&#39; Button(None, text=&#39;Quit&#39;, command=callback).pack(fill=X) Button(None, text=&#39;spam&#39;, command=(lambda: showerror(&#39;spam&#39;, errmsg))).pack(fill=X) mainloop() 常见弹框 # gui6.py # -*- coding: UTF-8 -*- from Tkinter import * from tkMessageBox import * from tkFileDialog import * from tkColorChooser import * from tkSimpleDialog import * demos = { &#39;Open&#39;: askopenfilename, &#39;Color&#39;: askcolor, &#39;Query&#39;: lambda: askquestion(&#39;Warning&#39;, &#39;You typed &quot;rm *&quot;\nconfirm?&#39;), &#39;Error&#39;: lambda: showerror(&#39;Error!&#39;, &#39;He is dead&#39;), &#39;Input&#39;: lambda: askfloat(&#39;Entry&#39;, &#39;Enter credit card number&#39;) } class Demo(Frame): def __init__(self, parent=None, **options): Frame.__init__(self, parent, **options) self.pack() Label(self, text=&#39;Basic demos&#39;).pack() for (key, value) in demos.items(): Button(self, text=key, command=value).pack(side=TOP, fill=BOTH) if __name__ == &#39;__main__&#39;: Demo().mainloop() 自定义弹框 # -*- coding: UTF-8 -*- import sys from Tkinter import * makemodal = (len(sys.argv) &gt; 1) def dialog(): win = Toplevel() Label(win, text=&#39;Hard drive reformatted!&#39;).pack() Button(win, text=&#39;OK&#39;, command=win.destroy).pack() if makemodal: # 获取输入的焦点 win.focus_set() # 打开的时候，禁用其他窗口 win.grab_set() # 在win销毁之前，继续等待 win.wait_window() print &#39;dialog exit&#39; root = Tk() Button(root, text=&#39;popup&#39;, command=dialog).pack() root.mainloop() 绑定事件 # -*- coding: UTF-8 -*- from Tkinter import * def showPosEvent(event): print(&#39;Widget=%s, X=%s, Y=%s&#39; % (event.widget, event.x, event.y)) def showAllEvent(event): print(event) for attr in dir(event): if not attr.startswith(&#39;__&#39;): print(attr, &#39;=&gt;&#39;, getattr(event, attr)) def onKeyPress(event): print(&#39;Got key press: &#39;, event.char) def onArrowKey(event): print(&#39;Got up arrow key press&#39;) def onReturnKey(event): print(&#39;Got return key press&#39;) def onLeftClick(event): print(&#39;Got left mouse button click: &#39;) showPosEvent(event) def onRightClick(event): print(&#39;Got right mouse button click: &#39;) showPosEvent(event) def onMiddleClick(event): print(&#39;Got middle mouse button click: &#39;) showPosEvent(event) showAllEvent(event) def onLeftDrag(event): print(&#39;Got left mouse drag click: &#39;) showPosEvent(event) def onDoubleLeftClick(event): print(&#39;Got double left mouse click: &#39;) showPosEvent(event) tkroot.quit() tkroot = Tk() labelfont = (&#39;courier&#39;, 20, &#39;bold&#39;) widget = Label(tkroot, text=&#39;Hello bind world&#39;) widget.config(bg=&#39;red&#39;, font=labelfont) widget.config(height=5, width=20) widget.pack(expand=YES, fill=BOTH) # 绑定单击左键 widget.bind(&#39;&lt;Button-1&gt;&#39;, onLeftClick) # 绑定单击右键 widget.bind(&#39;&lt;Button-3&gt;&#39;, onRightClick) # 绑定单击中键 widget.bind(&#39;&lt;Button-2&gt;&#39;, onMiddleClick) # 绑定双击左键 widget.bind(&#39;&lt;Double-1&gt;&#39;, onDoubleLeftClick) # 绑定拖拽 B1表示点击左键，Motion表示拖拽 widget.bind(&#39;&lt;B1-Motion&gt;&#39;, onLeftDrag) # 绑定键盘按键 widget.bind(&#39;&lt;KeyPress&gt;&#39;, onKeyPress) # 绑定按下箭头键 widget.bind(&#39;&lt;Up&gt;&#39;, onArrowKey) # 绑定回车，返回键 widget.bind(&#39;&lt;Return&gt;&#39;, onReturnKey) widget.focus() tkroot.title(&#39;CLICK ME&#39;) tkroot.mainloop() # &lt;ButtonPress&gt; 按下按钮 # &lt;ButtonRelease&gt; 松开按钮 # &lt;Motion&gt; 鼠标指针移动 # &lt;Configure&gt; 窗口大小，位置改变时候 # &lt;Destroy&gt; 销毁窗口 # &lt;FocusIn&gt; 获取焦点 # &lt;FocusOut&gt; 失去焦点 # &lt;Map&gt; 窗口打开 # &lt;Unmap&gt; 窗口最小化 # &lt;Escape&gt;, &lt;BackSpace&gt;, &lt;Tab&gt; 捕获特点ESC键，回车键，tab键 # &lt;Down&gt;, &lt;Up&gt;, &lt;Left&gt;, &lt;Right&gt; 捕获方向键 # &lt;B1-Motion&gt; 按下左键并拖拽 # &lt;KeyPress-a&gt; 按下按键“a”，大小写敏感 输入框 # -*- coding: UTF-8 -*- from Tkinter import * from quitGui import Quitter fields = &#39;Name&#39;, &#39;Job&#39;, &#39;Pay&#39; def fetch(entries): for entry in entries: print(&#39;Input =&gt; %s&#39; % entry.get()) # 获取文本信息 def makeform(root, fields): entries = [] for field in fields: row = Frame(root) lab = Label(row, width=5, text=field) ent = Entry(row) row.pack(side=TOP, fill=X) lab.pack(side=LEFT) ent.pack(side=RIGHT, expand=YES, fill=X) entries.append(ent) return entries def show(entries, popup): fetch(entries) # 必须在销毁前取出 popup.destroy() # 如果修改了stmt， order， msgs会随之失败 def ask(): popup = Toplevel() # 在模拟对话框窗口中显示表单 ents = makeform(popup, fields) Button(popup, text=&#39;OK&#39;, command=(lambda: show(ents, popup))).pack() popup.grab_set() # 打开的时候，禁用其他窗口 popup.focus_set() # 获取输入的焦点 popup.wait_window() # 在这里等待销毁 if __name__ == &#39;__main__&#39;: root = Tk() Button(root, text=&#39;Dialog&#39;, command=ask).pack() root.mainloop() 复选框 # gui13.py # -*- coding: UTF-8 -*- from Tkinter import * from gui6 import demos from quitGui import Quitter class Demo(Frame): def __init__(self, parent=None, **options): Frame.__init__(self, parent, **options) self.pack() self.tools() Label(self, text=&#39;Ckech demos&#39;).pack() self.vars = [] for key in demos: var = IntVar() Checkbutton(self, text=key, variable=var, command=demos[key]).pack(side=LEFT) self.vars.append(var) def report(self): for var in self.vars: print(var.get()) # 当前开关设置1或者0 print() def tools(self): frm = Frame(self) frm.pack(side=RIGHT) Button(frm, text=&#39;State&#39;, command=self.report).pack(fill=X) Quitter(frm).pack(fill=X) if __name__ == &#39;__main__&#39;: Demo().mainloop() 单选按钮 #gui14.py # -*- coding: UTF-8 -*- from Tkinter import * from gui6 import demos from quitGui import Quitter class Demo(Frame): def __init__(self, parent=None, **options): Frame.__init__(self, parent, **options) self.pack() Label(self, text=&#39;Radio demos&#39;).pack(side=TOP) self.var = StringVar() # variable表示单选按钮的变量，相当与html的name标签 # value表示单选按钮的变量值，相当与html的value标签 for key in demos: Radiobutton(self, text=key, command=self.onPress, variable=self.var, value=key).pack(anchor=NW) self.var.set(key) # 选中最后一个开始 Button(self, text=&#39;State&#39;, command=self.report).pack(fill=X) Quitter(self).pack(fill=X) def onPress(self): pick = self.var.get() print(&#39;you pressed&#39;, pick) print(&#39;result: &#39;, demos[pick]()) # 按钮使用返回的值 def report(self): print(self.var.get()) if __name__ == &#39;__main__&#39;: Demo().mainloop() 标尺滚动条 # gui16.py # -*- coding: UTF-8 -*- from Tkinter import * from gui6 import demos from quitGui import Quitter class Demo(Frame): def __init__(self, parent=None, **options): Frame.__init__(self, parent, **options) self.pack() Label(self, text=&#39;Scale demos&#39;).pack() self.var = IntVar() Scale(self, label=&#39;Pick demo number&#39;, command=self.onMove, variable=self.var, from_=0, to=len(demos)-1).pack() Scale(self, label=&#39;Pick demo number&#39;, # 标尺的文本 command=self.onMove, # 绑定回调 variable=self.var, # 变量 from_=0, # 标尺最小值 to=len(demos) - 1, # 标尺最大值 length = 200, # 长度 tickinterval = 2, # 每隔几个单位显示标记单位 showvalue = YES, # 显示或隐藏标尺滑动条旁边的当前值 orient = &#39;horizontal&#39; # 横向展示 ).pack() Quitter(self).pack(side=RIGHT) Button(self, text=&#39;Run demo&#39;, command=self.onRun).pack(side=LEFT) Button(self, text=&#39;State&#39;, command=self.report).pack(side=RIGHT) def onMove(self, value): print(&#39;in onMove&#39;, value) def onRun(self): pos = self.var.get() print(&#39;you picked&#39;, pos) demo = list(demos.values())[pos] print(demo()) def report(self): print(self.var.get()) if __name__ == &#39;__main__&#39;: print(list(demos.keys())) Demo().mainloop() 创建图片 # gui17.py # -*- coding: UTF-8 -*- from Tkinter import * gifdir = &#39;./gif/&#39; win = Tk() igm = PhotoImage(file=gifdir + &#39;logo.png&#39;) # 按钮上绑定图片 # Button(win, image=igm).pack() # win.mainloop() # 创建画布 can = Canvas(win) can.pack(fill=BOTH) can.config(width=igm.width() + 4, height=igm.height() + 4) can.create_image(2, # x坐标 2, # y坐标 image=igm, anchor=NW) win.mainloop() 按钮随机读取图片 # gui18.py # -*- coding: UTF-8 -*- from glob import glob from gui13 import * import random gifdir = &#39;./gif/&#39; &quot; 按钮随机读取图片 &quot; class ButtonPicsDemo(Frame): def __init__(self, gifdir=gifdir, parent=None): Frame.__init__(self, parent) self.pack() self.lbl = Label(self, text=&#39;none&#39;, bg=&#39;blue&#39;, fg=&#39;red&#39;) self.pix = Button(self, text=&#39;press me&#39;, command=self.draw, bg=&#39;white&#39;) self.lbl.pack(fill=BOTH) self.pix.pack(pady=10) Demo(self, relief=SUNKEN, bd=2).pack(fill=BOTH) # glob模块， glob方法，返回所有匹配的文件列表 files = glob(gifdir + &#39;*.png&#39;) self.images = [(x, PhotoImage(file=x)) for x in files] print(files) def draw(self): name, photo = random.choice(self.images) self.lbl.config(text=name) self.pix.config(image=photo) if __name__ == &#39;__main__&#39;: if __name__ == &#39;__main__&#39;: ButtonPicsDemo().mainloop() 缩略图 # gui19.py # -*- coding: UTF-8 -*- import os import math import PIL from PIL import Image from Tkinter import * def make_thumbs(img_dir, size=(100, 100), subdir=&#39;thumbs&#39;): thumb_dir = os.path.join(img_dir, subdir) if not os.path.exists(thumb_dir): os.mkdir(thumb_dir) thumbs = [] for img_file in os.listdir(img_dir): thumb_path = os.path.join(thumb_dir, img_file) if os.path.exists(thumb_path): thumb_obj = PIL.Image.open(thumb_path) thumbs.append((img_file, thumb_obj)) else: print(&#39;making&#39;, thumb_path) img_path = os.path.join(img_dir, img_file) try: img_obj = PIL.Image.open(img_path) img_obj.thumbnail(size, PIL.Image.ANTIALIAS) img_obj.save(thumb_path) thumbs.append((img_file, img_obj)) except Exception, e: print(&#39;skipping: &#39;, img_path) print e return thumbs class ViewOne(Toplevel): def __init__(self, img_dir, img_file): Toplevel.__init__(self) self.title(img_file) img_path = os.path.join(img_dir, img_file) img_obj = PhotoImage(file=img_path) Label(self, image=img_obj).pack() print(img_path, img_obj.width(), img_obj.height()) self.savephoto = img_obj def viewer(img_dir, kind=Toplevel, cols=None): win = kind() win.title(&#39;VIEWER: &#39; + img_dir) thumbs = make_thumbs(img_dir) if not cols: # 固定大小 或者N×N cols = int(math.ceil(math.sqrt(len(thumbs)))) savephotos = [] while thumbs: thumbs_row, thumbs = thumbs[:cols], thumbs[cols:] row = Frame(win) row.pack(fill=BOTH) for(img_file, img_obj) in thumbs_row: size = max(img_obj.size) photo = PhotoImage(file=os.path.join(img_dir, &#39;thumbs&#39;, img_file)) link = Button(row, image=photo) handler = lambda savefile=img_file: ViewOne(img_dir, savefile) link.config(command=handler, width=size, height=size) link.pack(side=LEFT, expand=YES) savephotos.append(photo) Button(win, text=&#39;Quit&#39;, command=win.quit, bg=&#39;beige&#39;).pack(fill=X) return win, savephotos if __name__ == &#39;__main__&#39;: img_dir = len(sys.argv) &gt; 1 and sys.argv[1] or &#39;gif&#39; main, save = viewer(img_dir, kind=Tk) main.mainloop() 创建基础顶级菜单 # gui20.py # -*- coding: UTF-8 -*- from Tkinter import * from tkMessageBox import * def not_done(): showerror(&#39;Not implemented&#39;, &#39;Not yet available&#39;) def make_menu(win): top = Menu(win) # 定义顶级菜单 win.config(menu=top) file = Menu(top, tearoff=True) # 一级菜单 tearoff:设置菜单下的虚线是否显示 file.add_command(label=&#39;New...&#39;, command=not_done, underline=0) file.add_command(label=&#39;Open...&#39;, command=not_done, underline=0) file.add_command(label=&#39;Quit...&#39;, command=win.quit, underline=0) top.add_cascade(label=&#39;File&#39;, menu=file, underline=0) # 在顶级菜单中添加一级菜单 edit = Menu(top, tearoff=False) # 一级菜单 edit.add_command(label=&#39;Cut&#39;, command=not_done, underline=0) edit.add_command(label=&#39;Paste&#39;, command=not_done, underline=0) edit.add_separator() # 添加下划线 top.add_cascade(label=&#39;Edit&#39;, menu=edit, underline=0) submenu = Menu(edit, tearoff=True) # 二级菜单 submenu.add_command(label=&#39;Spam&#39;, command=win.quit, underline=0) submenu.add_command(label=&#39;Eggs&#39;, command=not_done, underline=0) edit.add_cascade(label=&#39;Stuff&#39;, menu=submenu, underline=0) # 在一级菜单中添加二级菜单 if __name__ == &#39;__main__&#39;: root = Tk() root.title(&#39;menu_win&#39;) make_menu(root) msg = Label(root, text=&#39;Window menu basic&#39;) msg.pack(expand=YES, fill=BOTH) msg.config(relief=SUNKEN, width=40, height=7, bg=&#39;beige&#39;) root.mainloop() 创建框架级别菜单 # gui21.py # -*- coding: UTF-8 -*- from Tkinter import * from tkMessageBox import * def not_done(): showerror(&#39;Not implemented&#39;, &#39;Not yet available&#39;) def make_menu(parent): menu_bar = Frame(parent) menu_bar.pack(side=TOP, fill=X) f_button = Menubutton(menu_bar, text=&#39;File&#39;, underline=0) f_button.pack(side=LEFT) file = Menu(f_button) file.add_command(label=&#39;New...&#39;, command=not_done, underline=0) file.add_command(label=&#39;Open...&#39;, command=not_done, underline=0) file.add_command(label=&#39;Quit...&#39;, command=parent.quit, underline=0) f_button.config(menu=file) e_button = Menubutton(menu_bar, text=&#39;Edit&#39;, underline=0) e_button.pack(side=LEFT) edit = Menu(e_button) edit.add_command(label=&#39;Cut&#39;, command=not_done, underline=0) edit.add_command(label=&#39;Paste&#39;, command=not_done, underline=0) edit.add_separator() e_button.config(menu=edit) sub_menu = Menu(edit, tearoff=True) sub_menu.add_command(label=&#39;Spam&#39;, command=parent.quit, underline=0) sub_menu.add_command(label=&#39;Eggs&#39;, command=not_done, underline=0) edit.add_cascade(label=&#39;Stuff&#39;, menu=sub_menu, underline=0) return menu_bar if __name__ == &#39;__main__&#39;: root = Tk() root.title(&#39;menu_fra&#39;) for i in range(2): mnu = make_menu(root) mnu.config(bd=2, relief=RAISED) Label(root, bg=&#39;black&#39;, height=5, width=25).pack(expand=YES, fill=BOTH) Button(root, text=&#39;Bye&#39;, command=root.quit).pack() root.mainloop() 图片菜单 # gui22.py # -*- coding:UTF-8 -*- from Tkinter import * from tkMessageBox import * class NewMenuDemo(Frame): def __init__(self, parent=None): Frame.__init__(self, parent) self.pack(expand=YES, fill=BOTH) self.create_widgets() def create_widgets(self): self.make_menubar() self.make_toolbar() l = Label(self, text=&#39;Menu and Toolbar Demo&#39;) l.config(relief=SUNKEN, width=40, height=10, bg=&#39;white&#39;) l.pack(expand=YES, fill=BOTH) def make_toolbar(self, size=(30, 30)): toolbar = Frame(self, cursor=&#39;hand2&#39;, relief=SUNKEN, bd=2) toolbar.pack(side=BOTTOM, fill=X) Button(toolbar, text=&#39;Quit&#39;, command=self.quit).pack(side=RIGHT) photo_files = (&#39;at.png&#39;, &#39;bd.png&#39;, &#39;dk.png&#39;) self.tool_photo_objs = [] for file in photo_files: img = PhotoImage(file=&#39;./gif/thumbs/&#39; + file) btn = Button(toolbar, image=img, command=self.greeting) btn.config(bd=5, relief=RIDGE) btn.config(width=size[0], height=size[0]) btn.pack(side=LEFT) self.tool_photo_objs.append(img) Button(toolbar, text=&#39;Hello&#39;, command=self.greeting).pack(side=LEFT) def make_menubar(self): self.menubar = Menu(self.master) self.master.config(menu=self.menubar) self.file_menu() self.edit_menu() self.image_menu() def file_menu(self): pulldown = Menu(self.menubar) pulldown.add_command(label=&#39;OPEN...&#39;, command=self.notdone) pulldown.add_command(label=&#39;QUIT&#39;, command=self.quit) self.menubar.add_cascade(label=&#39;FILE&#39;, underline=0, menu=pulldown) def edit_menu(self): pulldown = Menu(self.menubar) pulldown.add_command(label=&#39;PASTE&#39;, command=self.notdone) pulldown.add_command(label=&#39;SPAM&#39;, command=self.greeting) pulldown.add_separator() pulldown.add_command(label=&#39;DELETE&#39;, command=self.greeting) pulldown.entryconfig(4, state=DISABLED) self.menubar.add_cascade(label=&#39;EDIT&#39;, underline=0, menu=pulldown) def image_menu(self): photo_files = (&#39;at.png&#39;, &#39;bd.png&#39;, &#39;dk.png&#39;) pulldown = Menu(self.menubar) self.photo_objs = [] for file in photo_files: img = PhotoImage(file=&#39;./gif/&#39; + file) pulldown.add_command(image=img, command=self.notdone) self.photo_objs.append(img) self.menubar.add_cascade(label=&#39;IMAGE&#39;, underline=0, menu=pulldown) def greeting(self): showinfo(&#39;greeting&#39;, &#39;GREETING&#39;) def notdone(self): showerror(&#39;NOT DONE&#39;, &#39;NOT DONE&#39;) def quit(self): if askyesno(&#39;Verify quit&#39;, &#39;Sure?&#39;): Frame.quit(self) if __name__ == &#39;__main__&#39;: NewMenuDemo().mainloop() 滚动条与列表 # gui23.py # -*- coding: UTF-8 -*- from Tkinter import * class ScrolledList(Frame): def __init__(self, options, parent=None): Frame.__init__(self, parent) self.pack(expand=YES, fill=BOTH) self.makeWidgets(options) def handle_list(self, event): index = self.listbox.curselection() # 鼠标选中的行 label = self.listbox.get(index) # 获取鼠标选中的值 self.runCommand(label) # 打印出值 def makeWidgets(self, options): # sbar = Scrollbar(self, orient=&#39;horizontal&#39;) # 横向滚动 sbar = Scrollbar(self) list = Listbox(self, relief=SUNKEN) sbar.config(command=list.yview) # 移动滚动条启用回调： 按比例调节列表框的显示， list.config(yscrollcommand=sbar.set) # 移动列表框启用回调：按比例调节滚动条 sbar.pack(side=RIGHT, fill=Y) list.pack(side=LEFT, expand=YES, fill=BOTH) pos = 0 for label in options: list.insert(pos, label) pos += 1 # selectmode 选择模式SINGLE(单选), BROWSE(默认单选), MULTIPLE(多选), EXTENDED(多选) # 启用多选时， curselection返回列表 # 启用单选时， curselection返回字符串 list.config(selectmode=EXTENDED, setgrid=1) list.bind(&#39;&lt;Double-1&gt;&#39;, self.handle_list) self.listbox = list def runCommand(self, selection): print(&#39;YOU SELECTED:&#39;, selection) if __name__ == &#39;__main__&#39;: options = ((&#39;Lumberjack-%s&#39; % x) for x in range(20)) ScrolledList(options).mainloop() TEXT组件 gui24.py # -*- coding: UTF-8 -*- from Tkinter import * class ScrollText(Frame): def __init__(self, parent=None, text=&#39;&#39;, file=None): Frame.__init__(self, parent) self.pack(expand=YES, fill=BOTH) self.make_widgets() self.set_text(text, file) def make_widgets(self): sbar = Scrollbar(self) text = Text(self, relief=SUNKEN) sbar.config(command=text.yview) text.config(yscrollcommand=sbar.set) sbar.pack(side=RIGHT, fill=Y) text.pack(side=LEFT, expand=YES, fill=BOTH) self.text = text def set_text(self, text=&#39;&#39;, file=None): if file: text = open(file, &#39;r&#39;).read() # 1.0表示第一行，第0列（行从1开始，列从0开始） # END表示最末一个字符后面第一个位置 self.text.delete(&#39;1.0&#39;, END) # 删除从第一行第0列开始到最后的字符串，即删除全部 self.text.insert(&#39;1.0&#39;, text) # 从第一行第0列开始填充数据 # mark_set 设置text标志 self.text.mark_set(INSERT, &#39;1.0&#39;) # 设置将光标设置在文本开始位置 # self.text.mark_set(&#39;line_two&#39;, &#39;2.2&#39;) # 自定义标志位置 可以用mark_unset取消 self.text.focus() # TEXT的tag标签 # SEL是内置的标签，表示当前选中的文本 # text = self.text.get(SEL_FIRST, SEL_LAST) # text = self.text.get(&#39;sel.first&#39;, &#39;sel.last&#39;) # self.text.tag_add(&#39;alltext&#39;, &#39;1.0&#39;, END) # 选中所有文本 # self.text.tag_add(SEL, index1, index2) # 将一定范围内的文本添加到内建的SEL标签 # self.text.tag_remove(SEL, &#39;1.0&#39;, END) # 将字符串所有字符从SEL标签中删除 # self.text.tag_delete(SEL) # 删除SEL标签 # self.text.tag_add(&#39;demo&#39;, &#39;1.5&#39;, &#39;1.7&#39;) # self.text.tag_add(&#39;demo&#39;, &#39;3.0&#39;, &#39;5.7&#39;) # self.text.tag_config(&#39;demo&#39;, background=&#39;purple&#39;) # self.text.tag_config(&#39;demo&#39;, fontground=&#39;white&#39;) # self.text.tag_config(&#39;demo&#39;, font=(&#39;times&#39;, 16, &#39;underline&#39;)) # self.text.tag_bind(&#39;demo&#39;, &#39;&lt;Double-1&gt;&#39;, func) # see方法 # self.text.see(&#39;1.0&#39;) # 滚动到第一行第0列 # self.text.see(INSERT) # 滚动到光标插入处 # self.text.see(SEL_FIRST) # 滚动到选中文本第一个字符串 def get_text(self): # -1c 表示往回数一个字符串 # +1l 表示往前数一行 return self.text.get(&#39;1.0&#39;, END + &#39;-1c&#39;) if __name__ == &#39;__main__&#39;: root = Tk() if len(sys.argv) &gt; 1: st = ScrollText(file=sys.argv[1]) else: st = ScrollText(text=&#39;Words\ngo here&#39;) def show(event): print(repr(st.get_text())) root.bind(&#39;&lt;Key-Escape&gt;&#39;, show) root.mainloop() 简单的文本编辑器 # gui25.py # -*- coding: UTF-8 -*- from Tkinter import * from tkSimpleDialog import askstring from tkFileDialog import asksaveasfilename from quitGui import Quitter from gui24 import ScrollText class SimpleEditor(ScrollText): def __init__(self, parent=None, file=None): frm = Frame(parent) frm.pack(fill=X) Button(frm, text=&#39;Save&#39;, command=self.on_save).pack(side=LEFT) Button(frm, text=&#39;Cut&#39;, command=self.on_cut).pack(side=LEFT) Button(frm, text=&#39;Paste&#39;, command=self.on_paste).pack(side=LEFT) Button(frm, text=&#39;Find&#39;, command=self.on_find).pack(side=LEFT) Quitter(frm).pack(side=LEFT) ScrollText.__init__(self, parent, file=file) self.text.config(font=(&#39;courier&#39;, 9, &#39;normal&#39;)) def on_save(self): filename = asksaveasfilename() if filename: alltext = self.get_text() open(filename, &#39;w&#39;).write(alltext) def on_cut(self): text = self.text.get(SEL_FIRST, SEL_LAST) self.text.delete(SEL_FIRST, SEL_LAST) self.clipboard_clear() self.clipboard_append(text) def on_paste(self): try: text = self.selection_get(selection=&#39;CLIPBOARD&#39;) self.text.insert(INSERT, text) except TclError: pass def on_find(self): target = askstring(&#39;SimpleEdit&#39;, &#39;Search string?&#39;) if target: where = self.text.search(target, INSERT, END) if where: print(where) pastit = where + (&#39;+%dc&#39; % len(target)) self.text.tag_remove(SEL, &#39;1.0&#39;, END) self.text.tag_add(SEL, where, pastit) self.text.mark_set(INSERT, pastit) self.text.see(INSERT) self.text.focus() if __name__ == &#39;__main__&#39;: if len(sys.argv) &gt; 1: SimpleEditor(file=sys.argv[1]).mainloop() else: SimpleEditor().mainloop() 创建基础画布 # gui26.py # -*- coding: UTF-8 -*- from Tkinter import * canvas = Canvas(width=525, height=300, bg=&#39;white&#39;) canvas.pack(expand=YES, fill=BOTH) canvas.create_line(100, 100, 200, 200) canvas.create_line(100, 200, 200, 300) for i in range(1, 20, 2): canvas.create_line(0, i, 50, i) canvas.create_oval(20, 20, 300, 100, width=10, fill=&#39;yellow&#39;) d = {1:PIESLICE,2:CHORD,3:ARC} for i in d: canvas.create_arc( (10,10 + 60*i,110,110 + 60*i), style=d[i], #指定样式 start=30, #指定起始角度 extent=30 #指定角度偏移量 ) canvas.create_arc(0, 0, 100, 200, fill=&#39;black&#39;) canvas.create_rectangle(200, 200, 300, 300, width=5, fill=&#39;red&#39;) canvas.create_line(0, 300, 150, 150, width=10, fill=&#39;green&#39;) photo = PhotoImage(file=&#39;./gif/lightmachine.png&#39;) canvas.create_image(325,25, image=photo, anchor=NW) widget = Label(canvas, text=&#39;Spam&#39;, fg=&#39;white&#39;, bg=&#39;black&#39;) widget.pack() canvas.create_window(100, 100, window=widget) canvas.create_text(100, 280, text=&#39;CLOUD CLONE CORP.&#39;) # id = canvas.create_line(fromX, fromY, toX, toY) # 创建直线 # id = canvas.create_oval(fromX, fromY, toX, toY) # 创建椭圆 # id = canvas.create_arc(fromX, fromY, toX, toY) # 创建扇形 # id =canvas.create_rectangle(fromX, fromY, toX, toY) # 创建矩形 # canvas.move(id, offsetX, offsetY) # 移动对象 # canvas.delete(id) # 删除对象 # canvas.tkraise(id) # 将对象移动到前端 # canvas.lower(id) # 将对象移动到底部 # canvas.itemconfig(id, fill=&#39;red&#39;) # 修改对象属性 # 画布标签 # canvas.create_line(fromX, fromY, toX, toY, tag=&#39;bubbles&#39;) # canvas.create_line(fromX, fromY, toX, toY, tag=&#39;bubbles&#39;) # id = canvas.create_line(fromX, fromY, toX, toY) # canvas.addtag_withtag(&#39;bubbles&#39;, id) # canvas.move(&#39;bubbles&#39;, diffX, diffY) mainloop() canvas与滚动条 # gui27.py # -*- coding: UTF-8 -*- from Tkinter import * class ScrolledCanvas(Frame): def __init__(self, parent=None, color=&#39;brown&#39;): Frame.__init__(self, parent) self.pack(expand=YES, fill=BOTH) canv = Canvas(self, bg=color, relief=SUNKEN) canv.config(width=300, height=200) canv.config(scrollregion=(0, 0, 300, 1000)) canv.config(highlightthickness=0) sbar = Scrollbar(self) sbar.config(command=canv.yview) canv.config(yscrollcommand=sbar.set) sbar.pack(side=RIGHT, fill=Y) canv.pack(side=LEFT, expand=YES, fill=BOTH) self.fillContent(canv) canv.bind(&#39;&lt;Double-1&gt;&#39;, self.onDoubleClick) self.canvas = canv def fillContent(self, canv): for i in range(10): canv.create_text(150, 50+(i*100), text=&#39;spam&#39;+str(i), fill=&#39;beige&#39;) def onDoubleClick(self, event): print(event.x, event.y) print(self.canvas.canvasx(event.x), self.canvas.canvasy(event.y)) if __name__ == &#39;__main__&#39;: ScrolledCanvas().mainloop() canvas绑定事件 # gui28.py # -*- coding: UTF-8 -*- from Tkinter import * trace = False class CanvasEventDemo: def __init__(self, parent=None): canvas = Canvas(width=300, height=300, bg=&#39;beige&#39;) canvas.pack() canvas.bind(&#39;&lt;ButtonPress-1&gt;&#39;, self.on_start) canvas.bind(&#39;&lt;B1-Motion&gt;&#39;, self.on_grow) canvas.bind(&#39;&lt;Double-1&gt;&#39;, self.on_clear) canvas.bind(&#39;&lt;ButtonPress-3&gt;&#39;, self.on_move) self.canvas = canvas self.drawn = None self.kinds = [canvas.create_oval, canvas.create_rectangle] def on_start(self, event): self.shape =self.kinds[0] self.kinds = self.kinds[1:] + self.kinds[:1] self.start = event self.drawn = None def on_grow(self, event): canvas = event.widget if self.drawn: canvas.delete(self.drawn) object_id = self.shape(self.start.x, self.start.y, event.x, event.y) if trace: print(object_id) self.drawn = object_id def on_clear(self, event): event.widget.delete(&#39;all&#39;) def on_move(self, event): if self.drawn: if trace: print(self.drawn) canvas = event.widget diffx, diffy = (event.x - self.start.x), (event.y - self.start.y) canvas.move(self.drawn, diffx, diffy) self.start = event if __name__ == &#39;__main__&#39;: CanvasEventDemo() mainloop() grid布局和pack布局实现自动扩展 # gui29.py # -*- coding: UTF-8 -*- from Tkinter import * colors = [&#39;red&#39;, &#39;green&#39;, &#39;orange&#39;, &#39;white&#39;, &#39;yellow&#39;, &#39;blue&#39;] def gridbox(root): Label(root, text=&#39;GRID&#39;).grid(columnspan=2) # 跨两列 row = 1 for color in colors: lab = Label(root, text=color, relief=RIDGE, width=25) ent = Entry(root, bg=color, relief=SUNKEN, width=50) lab.grid(row=row, column=0, sticky=NSEW) # 向4个方向扩展 ent.grid(row=row, column=1, sticky=NSEW) root.rowconfigure(row, weight=1) # 循环行自动扩展 row += 1 root.columnconfigure(0, weight=1) # 第一列自动扩展 root.columnconfigure(1, weight=1) # 第二列自动扩展 def packbox(root): Label(root, text=&#39;PACK&#39;).pack() for color in colors: row = Frame(root) lab = Label(row, text=color, relief=RIDGE, width=25) ent = Entry(row, bg=color, relief=SUNKEN, width=50) row.pack(side=TOP, expand=YES, fill=BOTH) lab.pack(side=LEFT, expand=YES, fill=BOTH) ent.pack(side=RIGHT, expand=YES, fill=BOTH) if __name__ == &#39;__main__&#39;: root = Tk() gridbox(Toplevel(root)) packbox(Toplevel(root)) Button(root, text=&#39;Quit&#39;, command=root.quit).pack() mainloop() PIL：Python Imaging Library 安装 sudo apt-get install python-imaging 或者 sudo easy_install PIL window系统选择 pip install Pillow 图像操作 import Image # 打开一个jpg图像文件，注意路径要改成你自己的: im = Image.open(&#39;/Users/michael/test.jpg&#39;) # 获得图像尺寸: w, h = im.size # 缩放到50%: im.thumbnail((w//2, h//2)) # 把缩放后的图像用jpeg格式保存: im.save(&#39;/Users/michael/thumbnail.jpg&#39;, &#39;jpeg&#39;) 模糊效果 import Image, ImageFilter im = Image.open(&#39;/Users/hanchang/test.jpg&#39;) im2 = im.filter(ImageFilter.BLUR) im2.save(&#39;/Users/hanchang/blur.jpg&#39;, &#39;jpeg&#39;) 自定义图像验证码 import Image, ImageDraw, ImageFont, ImageFilter import random # 随机字母: def rndChar(): return chr(random.randint(65, 90)) # 随机颜色1: def rndColor(): return (random.randint(64, 255), random.randint(64, 255), random.randint(64, 255)) # 随机颜色2: def rndColor2(): return (random.randint(32, 127), random.randint(32, 127), random.randint(32, 127)) # 240 x 60: width = 60 * 4 height = 60 image = Image.new(&#39;RGB&#39;, (width, height), (255, 255, 255)) # 创建Font对象: font = ImageFont.truetype(&#39;Arial.ttf&#39;, 36) # 创建Draw对象: draw = ImageDraw.Draw(image) # 填充每个像素: for x in range(width): for y in range(height): draw.point((x, y), fill=rndColor()) # 输出文字: for t in range(4): draw.text((60 * t + 10, 10), rndChar(), font=font, fill=rndColor2()) # 模糊: image = image.filter(ImageFilter.BLUR) image.save(&#39;code.jpg&#39;, &#39;jpeg&#39;); 自定义字符串生成图片 from PIL import Image,ImageDraw,ImageFont,ImageOps &lt;h1&gt;生成图片&lt;/h1&gt; def create\_image(str, line, name, dir): img\_size = (400, (line*20) + 10) img\_mode = 'RGB' img\_font = ImageFont.truetype('UbuntuMono-R.ttf', 14) img\_bg = '#FFF' img\_fg = '#000' img = Image.new(mode=img\_mode, size=img\_size, color=img\_bg) draw = ImageDraw.Draw(img) draw.text((10, 10), str, fill=img\_fg, font=img_font) img.save( dir + name + '.png', 'png')]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu14.04服务器基础配置]]></title>
    <url>%2F2016%2F11%2F10%2Fubuntu14.04%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[登陆ssh ssh root@ipaddress password: 首次登陆出现的错误 perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: # 安装 localepurge 管理语言文件 sudo apt-get install localepurge # 或者之后自行配置 sudo dpkg-reconfigure localepurge # 生成自己需要的语言 sudo locale-gen zh_CN.UTF-8 en_US.UTF-8 # 打印结果 locale # ssh连接时候指定语言 LC_ALL=en_US.UTF-8 ssh &lt;host&gt; 创建用户 adduser hanchang password: retry password: 将用户添加到sudo用户组 错误提示 username is not in the sudoers file. su - password： chmod u+w /etc/sudoers # 添加文件写权限 root ALL=(ALL) ALL 下面添加以下代码 hanchang ALL=(ALL) NOPASSWD: ALL :wq 退出 chmod u-w /etc/sudoers # 取消文件写权限 修改root密码 sudo passwd password: retry password: 禁止root用户远程登陆ssh cd /e tc/ssh/ sudo vim sshd_config PermitRootLogin yes改成PermitRootLogin no service sshd restart 或者 /etc/init.d/sshd restart（ssh服务器重启） 指定IP地址登陆 vim /etc/hosts.allow sshd:192.168.220.164:allow # 最后添加 vim /etc/hosts.deny sshd:ALL #最后添加 避免sshd连接超时 修改客户端 sudo vim /etc/ssh/ssh_config # 添加 ServerAliveInterval 30 # 每30秒向服务器发起心跳 ServerAliveCountMax 6 # 允许6次无响应 或者修改服务器端 # 打开 sudo vim /etc/ssh/sshd_config # 添加 ClientAliveInterval 30 ClientAliveCountMax 6 流量监控 # 安装监控软件 sudo apt-get install vnstat # 安装好后运行以下命令初始化数据库 # eth0可以通过ifconfig查看 sudo vnstat -u -i eth1 # 修改配置文件 sudo vim /etc/vnstat.conf Interface &quot;eth1&quot; #此处修改需要监控的网卡 # 启动守护进程 sudo /etc/init.d/vnstat start # 默认开机启动 sudo update-rc.d vnstat enable 查看是否安装iptables iptables: /sbin/iptables /usr/share/iptables /usr/share/man/man8/iptables.8.gz #表示已经安装iptables apt-get install iptables #如果默认没有安装，请运行此命令安装防火墙 编辑iptables配置文件 sudo vi /etc/iptables.rules *filter :INPUT DROP [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] :syn-flood - [0:0] -A INPUT -i lo -j ACCEPT -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 20 -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT -A INPUT -p icmp -m limit --limit 100/sec --limit-burst 100 -j ACCEPT -A INPUT -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood -A INPUT -j REJECT --reject-with icmp-host-prohibited -A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN -A syn-flood -j REJECT --reject-with icmp-port-unreachable COMMIT # sudo iptables-restore &lt; /etc/iptables.rules #使防火墙规则生效，重启主机执行此命令 # 重启主机会使以上配置失效，以下内容为如何配置开机自动启动防火墙 # vi /etc/network/if-pre-up.d/iptables #创建文件，添加以下内容，使防火墙开机启动 #!/bin/bash iptables-restore &lt; /etc/iptables.rules # chmod +x /etc/network/if-pre-up.d/iptables #添加执行权限 # sudo iptables -L -n查看规则是否生效. 挂载新的硬盘 fdisk -l 如果出现 Disk /dev/sdb doesn&#39;t contain a valid partition table 说明没有分区,需要处理 fdisk /dev/sdb Command (m for help): m为查看选项，这里我们输入n表示创建一个新的分区 选中默认，在分区大小中填写分区大小 +500G 第二步：使新创建的分区在系统中立即生效 root#partprobe 第三步：格式化新创建的分区 mkfs.ext3 /dev/hdb1 第四步：使新创建的分区挂载/mnt/ssd_one 目录下 mount /dev/hda1 /mnt/rhce01 查看已经挂载的信息 sudo vim /etc/mtab 第五步：开机自动挂载 sudo vim /etc/fstab # 底部添加 /dev/sdb1 /mnt/hdd_one ext3 defaults 0 0 查看现在的硬盘信息 root@m1095:~# df -hl Filesystem Size Used Avail Use% Mounted on udev 12G 4.0K 12G 1% /dev tmpfs 2.4G 632K 2.4G 1% /run /dev/sda2 71G 1.2G 66G 2% / none 4.0K 0 4.0K 0% /sys/fs/cgroup none 5.0M 0 5.0M 0% /run/lock none 12G 0 12G 0% /run/shm none 100M 0 100M 0% /run/user /dev/sda1 226M 35M 175M 17% /boot /dev/sdb1 493G 70M 467G 1% /mnt/hdd_one ftp服务器搭建 sudo apt-get install vsftpd 编辑配置文件 sudo vim /etc/vsftpd.conf anonymous_enable=NO # 禁止匿名用户 local_enable=YES # 允许本地用户 write_enable=YES # 允许写入 chroot_local_user=YES # 登陆用户被限制在自己的home目录下 allow_writeable_chroot=YES # 配合chroot_local_user=YES使用 # 当chroot_local_user=YES表示chroot_list为可以访问其他目录的用户 # 当chroot_local_user=NO表示chroot_list为不可以访问其他目录的用户， # chroot_list_enable=YES # chroot_list_file=/etc/vsftpd.chroot_list # 以下内容为添加内容 # 设置为YES表示开启用户登陆过滤，设置为NO表示不开启用户过滤，所有用户都可以访问 userlist_enable=YES # 在userlist_enable=YES的前提下，设置是否阻扯user_list文件中的用户登录FTP服务器 # YES表示user_list为黑名单，在文件中的用户不能访问，不在文件中的用户可以访问 # NO表示user_list 为白名单，在文件中的用户可以访问，不在文件中的用户不能访问 userlist_deny=YES sudo vim /etc/vsftpd.user_list 添加root到文件中 出现500 OOPS: vsftpd: refusing to run with writable root inside chroot()错误的时候 原因：chroot设置为yes的时候，需要取消ftp根目录的写权限 #### 在配置文件中添加此设置 allow_writeable_chroot=YES 开启防火墙后vsftpd连接错误处理 载入以下2个模块 sudo modprobe ip_nat_ftp sudo modprobe ip_conntrack_ftp sudo vi /etc/modules # Add these lines: ip_nat_ftp ip_conntrack_ftp 重启vsftpd服务 安装lamp服务 安装apache sudo apt-get install apache2 # 将用户添加到apache用户组中 sudo usermod -a -G www-data username # www-data 为apache用户组名，username为登陆用户名 # apache2安装rewrite sudo a2enmod rewrite sudo service apache2 restart # 删除显示的版本信息 ServerTokens Prod ServerSignature Off 配置虚拟主机 sudo vim /etc/apache.2/apache2.conf # 添加以下内容 &lt;Directory /home/zhc/www/&gt; Options FollowSymLinks # 不要加Index AllowOverride All Require all granted &lt;/Directory&gt; 安装mysql sudo apt-get install mysql-server php5-mysql ＃配置mysql sudo mysql_secure_installation 查看mysql是否开启慢查询日志 mysql&gt; show variables like &#39;%slow%&#39;; +---------------------------+---------------------------------------+ | Variable_name | Value | +---------------------------+---------------------------------------+ | log_slow_admin_statements | OFF | | log_slow_slave_statements | OFF | | slow_launch_time | 2 | | slow_query_log | OFF | | slow_query_log_file | /var/lib/mysql/NC-PH-1551-49-slow.log | +---------------------------+---------------------------------------+ 5 rows in set (0.00 sec) #开启慢查询 mysql&gt; set global log_slow_queries = &#39;ON&#39;; mysql&gt; show variables like &#39;%slow%&#39;; #开启常规查询 vim /etc/myql/mysql.conf.d/mysqld.conf general_log_file = /var/log/mysql/mysql.log general_log = 1 #开启错误查询 log_error = /var/log/mysql/error.log # 防止innodb ibdata1文件过大 innodb_file_per_table=1 安装php sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt #ubuntu16.04安装方法 # Add the PPA apt-get install software-properties-common #如果提示没有 add-apt-repository，需要执行此命令安装 sudo add-apt-repository ppa:ondrej/php # If you get add-apt-repository: command not found run the following command first : sudo apt-get install software-properties-common sudo apt-get update sudo apt-get install php5.6 sudo apt-get install php5.6-* 配置php vim /etc/php/5.6/apache/php.ini expose_php = Off # 隐藏php版本信息 静态文件同步 定时任务 crontab -e # 编辑当前用户的定时任务 crontab -u hanchang -e # 编辑指定用户的定时任务 # m h dom mon dow command # 分钟 小时 日期 月份 星期 命令 0 0 * * * /bin/sh /home/hanchang/www/scripts/rsyncHK.sh]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7服务器基础配置]]></title>
    <url>%2F2016%2F11%2F10%2Fcentos7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[查看当前版本 cat /proc/version cat /etc/redhat-release Centos Linux release 7.2.1511 (Core) 修改root密码 &gt; passwd root &gt; 输入密码 配置网络 centos网络配置地址 /etc/sysconfig/network Centos设置主机名和网络配置 /etc/sysconfig/network-scripts/ifcfg-eth0针对特定的网卡进行设置 /etc/resolv.conf设置DNS /etc/hosts设置指定的域名解析地址 当前使用的是虚拟机网桥模式 cd /etc/sysconfig/network-scripts/ vi ifcfg-enp0s23 # 最后添加内容 IPADDR=192.168.0.160 # ip地址 NETMASK=255.255.255.0 # 掩码 GATEWAY=192.168.0.1 # 网关地址 DNS1=202.103.24.68 # DNS地址 # 修改内容 ONBOOT=yes # 启动时网络接口有效 BOOTPROTO=none # dhcp改成none dhcp自动获取，static固定，none手动 # 启动网卡 sudo ifup eth0s23 sudo systemctl restart network 安装网络查看工具 yum install net-tools centos默认的命令是 ip addr 开机需要启动的5个服务 sshd远程登陆, network网络, rsyslog日志相关, crond定时任务, sysstat检测系统性能 创建用户 su # 输入密码 useradd test passwd test # 输入密码 # 确认密码 su test # 切换成普通用户 将test用户加入到sudoers用 #visudo命令 # 相当于直接编辑 /etc/sudoers,但用命令方式更安全,推荐 su cd /etc chmod 777 sudoers root ALL=(ALL) ALL test ALL=(ALL) ALL # 新添加的 chmod 440 sudoers # 权限改成440，必须，否则会报错 配置ssh 安装ssh yum -y install openssh* service sshd start ssh连接 ssh test@192.168.0.160 # 默认22端口 ssh -p 2222 test@192.168.0.160 # 修改端口后 禁止root用户远程ssh连接 vi /etc/ssh/sshd_congif # 最后添加 # 禁止root远程登陆 PermitRootLogin no 关闭SELINUX 修改/etc/selinux/config 文件 将SELINUX=enforcing改为SELINUX=disabled setenforce 0 ##设置SELinux 成为permissive模式,临时关闭或者及时起效 centos开启防火墙 systemctl mask firewalld systemctl stop firewalld yum install iptables-services # 如果下面命令报错，则需要安装 systemctl enable iptables systemctl start iptables systemctl enable ip6tables systemctl start ip6tables 防火墙开机启动 systemctl enable iptables systemctl disable iptables # 查看开机运行的服务 systemctl list-unit-files --type=service 防火墙是否放行ssh端口22 cd /etc/sysconfig/ vi iptables 在commit前添加以下内容，并注释文件开头信息 # sample configuration for iptables service # you can edit this manually or use system-config-firewall # please do not ask us to add additional ports/services to this default configuration *filter # :INPUT ACCEPT [0:0] # :FORWARD ACCEPT [0:0] # :OUTPUT ACCEPT [0:0] # -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT # -A INPUT -p icmp -j ACCEPT # -A INPUT -i lo -j ACCEPT # -A INPUT -j REJECT --reject-with icmp-host-prohibited # -A FORWARD -j REJECT --reject-with icmp-host-prohibited # 安全设置-防止扫描包 # NONE 包(所有标识bit都没有设置)主要是扫描类的数据包 -A INPUT -p tcp --tcp-flags ALL NONE -j DROP # 防止sync-flood 攻击 -A INPUT -p tcp ! --syn -m state --state NEW -j DROP # ALL包（所有的标注bit都被设置了）也是网络扫描的数据包 -A INPUT -p tcp --tcp-flags ALL ALL -j DROP # 开放对应端口 -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT # 缺省设置 :INPUT DROP [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] # 许所有从服务器端发起的连接，由此返回的响应数据应该是允许的,yum操作等 -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A INPUT -p icmp -j ACCEPT # 接受主机localhost的任意请求 -A INPUT -i lo -j ACCEPT -A INPUT -j REJECT --reject-with icmp-host-prohibited -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT ftp 安装及启动 yum install vsftpd systemctl start vsftpd systemctl enable vsftpd 更新防火墙，放行20， 21端口，如果用了代理上传，需要添加被动模式的端口号 修改配置项目 vi /etc/vsftpd/vsftpd.conf anonymous_enable=No # YES改成No,禁止匿名用户 listen=YES # No改成Yes 开启监听 # listen_ipv6=YES # 此行需要注释掉 tcp_wrappers=YES # 默认应该就是YES # 在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录； # 未在/etc/vsftpd/chroot_list文件中列出的用户，不能切换到其他目录。 # 需要创建/etc/vsftpd/chroot_list文件 chroot_local_user=YES chroot_list_enable=YES # (default follows) chroot_list_file=/etc/vsftpd/chroot_list # 防止500oops错误 allow_writeable_chroot=YES # 被动模式端口号 pasv_min_port=30000 pasv_max_port=31000 只允许指定ip登陆 vi /etc/hosts.allow 最后添加 vsftpd:192.168.0.19:allow vsftpd:all:deny 添加虚拟用户 useradd -g ftp -d /var/ftp/ftpuser -s /sbin/nologin ftpuser passwd ftpuser cd /etc/vsftpd/ touch chroot_list vi chroot_list ftpuser # 将用户名称添加到chroot_list里 LAMP安装 apache yum install httpd # 安装apache2 systemctl enable httpd.service systemctl enable httpd.service mysql5.6 # 安装rpm包 rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm # 查看可以安装的资源 yum repolist enabled | grep &quot;mysql.*-community.*&quot; # 安装 yum install mysql-community-server systemctl start mysqld systemctl enable mysqld mysql_secure_installation # 设置密码等 php5.4 yum install php yum install php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-mysql php-devel php5.6或者其他 yum -y install epel-release wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm wget https://centos7.iuscommunity.org/ius-release.rpm rpm -Uvh ius-release*.rpm yum -y update yum -y install php56u php56u-opcache php56u-xml php56u-mcrypt php56u-gd php56u-devel php56u-mysql php56u-intl php56u-mbstring php56u-bcmath LAMP配置 apache允许php脚本 vi /etc/httpd/conf/httpd.conf AddType application/x-compress .Z AddType application/x-gzip .gz .tgz AddType application/x-httpd-php .php # 新添加内容 apache虚拟主机 cd /etc/httpd/conf.d vi vhost.conf &lt;VirtualHost *:121&gt; ServerName phpmyadmin.com ServerAlias www.phpmyadmin.com DocumentRoot /var/www/html/phpMyAdmin/ ErrorLog /var/www/web_log/phpMyAdmin.www_error.log # 开启日志需要创建web_log文件夹，否则会报错 CustomLog /var/www/web_log/phpMyAdmin.www_access.log common &lt;/VirtualHost&gt; &lt;Directory &quot;/var/www/html/phpMyAdmin/&quot;&gt; Options FollowSymLinks AllowOverride All Require all granted &lt;/Directory&gt; &lt;VirtualHost *:108&gt; ServerName hkmain.com ServerAlias www.kmain.com DocumentRoot /var/www/html/NEW/ ErrorLog /var/www/web_log/NEW.www_error.log CustomLog /var/www/web_log/NEW.www_access.log common &lt;/VirtualHost&gt; &lt;Directory &quot;/var/www/html/NEW/&quot;&gt; Options FollowSymLinks AllowOverride All Require all granted &lt;/Directory&gt; apache加载的模块查看 apachectl -M | sort 网站目录权限配置 chown -R apache:apache WEB_FOLD chmod 750 WEB_FOLD cd WEB_FOLD find -type d -exec chmod 750 {} \; find -not -type d -exec chmod 640 {} \; find . -name &quot;Runtime&quot; -type d -exec chmod -R 770 {} \; LNMP安装与配置 参考链接 https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-centos-7 nginx安装(apache二选一) # 安装pcre库，使nginx支持rewrite sudo yum install pcre pcre-devel -y sudo yum install nginx sudo systemctl start nginx.service # 设置开机启动 sudo systemctl enable nginx.service mysql5.6 # 安装rpm包 rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm # 查看可以安装的资源 yum repolist enabled | grep &quot;mysql.*-community.*&quot; # 安装 yum install mysql-community-server systemctl start mysqld systemctl enable mysqld mysql_secure_installation # 设置密码等 php安装 yum -y install epel-release sudo yum install php php-mysql php-fpm sudo yum install php-pecl-memcache 配置 vim /etc/php.ini #cgi.fix_poathinfo=1改成 cgi.fix_pathinfo=0 vim /etc/php-php.d/www.conf # 第一处修改 listen = /var/run/php-fpm/php-fpm.sock # 第二处修改 listen.owner = nobody listen.group = nobody # 第三处修改 user = nginx group = nginx # 重启 sudo systemctl start php-fpm sudo systemctl enable php-fpm # 安装xcahe sudo yum -y install php-xcache xcache-admin # 如果失败请用下面的方法 # xcahe wget https://kojipkgs.fedoraproject.org//packages/php-xcache/3.1.1/1.el7/x86_64/php-xcache-3.1.1-1.el7.x86_64.rpm # 图形化管理 wget https://kojipkgs.fedoraproject.org//packages/php-xcache/3.1.1/1.el7/noarch/xcache-admin-3.1.1-1.el7.noarch.rpm #配置nginx sudo vi /etc/nginx/conf.d/default.conf server { listen 80; server_name server_domain_name_or_IP; # 注意位置，在括号外 root /usr/share/nginx/html; index index.php index.html index.htm; location / { try_files $uri $uri/ =404; } error_page 404 /404.html; error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } # 下面是配置fpm location ~ \.php$ { try_files $uri =404; fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; (这个值从php-fpm复制来) fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } } # 测试 sudo vi /usr/share/nginx/html/info.php &lt;?php echo phpinfo();&gt; sudo systemctl restart php-fpm sudo systemctl restart nginx 安装imagemagick yum install php-pear gcc yum install ImageMagick ImageMagick-devel ImageMagick-perl pecl install imagick # 直接回车 echo extension=imagick.so &gt;&gt; /etc/php.ini # 添加php扩展 systemctl restart httpd mysql主从复制主服务器配置 vi /etc/my.cnf [mysqld] server-id=1 # 配一个唯一的ID编号，1至32 log-bin=mysql-bin # 二进制文件存放路径 binlog-do-db=test1 # 需要同步的数据库名 binlog-ignore-db=test2 # 不需要同步的数据库名 其他参考mysql主从复制 rsycn数据同步 yum install rsync # 安装，默认端口873 systemctl start rsyncd systemctl enable rsyncd vim rsync.conf# 日志文件位置，启动rsync后自动产生这个文件，无需提前创建 log file = /var/log/rsyncd.log # pid文件的存放位置 pidfile = /var/run/rsyncd.pid # 支持max connections参数的锁文件 lock file = /var/run/rsync.lock # 用户认证配置文件，里面保存用户名称和密码，后面会创建这个文件 secrets file = /etc/rsync.pass # rsync启动时欢迎信息页面文件位置（文件内容自定义 # motd file = /etc/rsyncd.Motd # # 设置rsync运行权限为root # uid = root # 设置rsync运行权限为root # gid = root # 匿名用户 uid = 0 gid = 0 # 默认端口 port = 873 # 默认为true，修改为no，增加对目录文件软连接的备份 use chroot = no # 设置rsync服务端文件为读写权限 read only = yes # 不显示rsync服务端资源列表 list = no # 最大连接数 max connections = 200 # 设置超时时间 timeout = 600 # 不验证用户密码 strict modes = false # 执行数据同步的用户名，可以设置多个，用英文状态下逗号隔开 # auth users = test # 允许进行数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开 hosts allow = 192.168.0.206, 192.168.0.118 # 禁止数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开 # hosts deny = 192.168.21.254 # 自定义名称 [web] # rsync服务端数据目录路径 path = /var/www/html/HKMAIN_NEW/Upload/product/manual/cn/ # # 模块名称与自定义名称相同 comment = web [webe] path = /var/www/html/HKMAIN_NEW/Upload/product/manual/en/ comment = webe centos7.2安装nfs服务器端 # 服务器端安装及配置 # 安装命令 sudo yum install nfs-utils rpcbind # 查看是否安装成功 $ rpm -aq nfs-utils rpcbind rpcbind-0.2.0-38.el7.x86_64 nfs-utils-1.3.0-0.33.el7_3.x86_64 # 启动rpcbind sudo systemctl restart rpcbind # 查看状态 systemctl status rpcbind # 开机启动 sudo systemctl enable rpcbind # 查看是否开机启动 systemctl is-enabled rpcbind # enable表示开机启动，disable表示不开机启动 # 启动及开机启动nfs服务 sudo systemctl restart nfs sudo systemctl enable nfs #配置nfs服务 vim /etc/exports /readonly 192.168.0.160(insecure,ro,no_root_squash) # 指定ip地址，只读 /rwsync 192.168.0.0/24(insecure,rw,sync,no_root_squash) # 指定ip地址段，读写 # 加载配置文件 sudo exportfs -rv # 查看nfs服务器本地挂载情况 $ showmount -e localhost Export list for localhost: /rwsync 192.168.0.0/24 /readonly 192.168.0.160 # 重启服务 sudo systemctl restart nfs # 客户端安装配置 sudo yum install nfs-utils rpcbind # 只需启动rpc服务 sudo systemctl restart rpcbind sudo systemctl enable rpcbind # 查看可以挂载服务器端的目录 showmount -e 192.168.0.206 Export list for 192.168.0.206: /rwsync 192.168.0.0/24 /readonly 192.168.0.160 # 挂载 sudo mount -t nfs 192.168.0.206:/readonly /mnt/readonly sudo mount -t nfs 192.168.0.206:/rwsync /mnt/rwsync # 查看挂载结果 df -h centos7.2安装python3.5 # 安装编译环境 yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel # 下载文件 wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz # 解压 tar -zxvf Python-3.6.6.tgz # 编译安装 cd Python-3.5.1 ./configure --prefix=/usr/local/python3 make &amp;&amp; make install # 创建软连接 sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3 python3 --version sudo ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 pip3 --version # 添加pip源 vim ~/.pip/pip.conf [global] trusted-host = mirrors.aliyun.com index-url = https://mirrors.aliyun.com/pypi/simple ### 安装虚拟环境 sudo pip3 uninstall virtualenv sudo ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv ### 创建虚拟环境 virtualenv --no-site-packages -p python3 .env source ./.env/bin/activate centos7.2安装node8 # 参考文件 https://nodejs.org/en/download/package-manager/ On RHEL, CentOS or Fedora, for Node.js v8 LTS: curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash - Alternatively for Node.js 10: curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash - Then install: sudo yum -y install nodejs # 安装cnpm npm install -g cnpm --registry=https://registry.npm.taobao.org centos6.8安装nginx # 安装pcre库，使nginx支持rewrite yum install pcre pcre-devel -y # 安装openssl，https服务需要使用 yum install openssl openssl-devel -y # 安装 gzip 类库 yum -y install zlib zlib-devel # 安装编译程序 yum -y install make gcc gcc-c++ ncurses-devel # 创建用户 useradd nginx -s /sbin/nologin -M # 下载源码 wget -q https://nginx.org/download/nginx-1.6.3.tar.gz tar -zxvf nginx-1.6.3.tar.gz cd nginx-1.6.3 ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module --with-pcre make make install # 启动nginx /usr/local/nginx/sbin/nginx # 停止nginx /usr/local/nginx/sbin/nginx -s quit # 重新加载配置文件 /usr/local/nginx/sbin/nginx -s reload # 测试你的配置文件是否有误 /usr/local/nginx/sbin/nginx -t # 查看nginx对应的端口 lsof -i :80 centos6.8安装mysql5.7 # yum源直接安装的是mysql5.1版本，抛弃 # 先检查是否有旧版本 rpm -qa | grep mysql # 删除旧版本 sudo yum -y remove mysql-xx-xx wget https://dev.mysql.com/get/mysql57-community-release-el6-10.noarch.rpm sudo yum install mysql57-community-release-el6-10.noarch.rpm sudo yum install mysql-community-server centos7.2 源码安装nginx # 安装pcre库，使nginx支持rewrite yum install pcre pcre-devel -y # 安装openssl，https服务需要使用 yum install openssl openssl-devel -y # 安装 gzip 类库 yum -y install zlib zlib-devel # 安装编译程序 yum -y install make gcc gcc-c++ ncurses-devel # 创建用户 useradd nginx -s /sbin/nologin -M # 下载源码 wget -q https://nginx.org/download/nginx-1.12.1.tar.gz tar -zxvf nginx-1.12.1.tar.gz cd nginx-1.12.1 ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_gunzip_module --with-http_gzip_static_module --with-threads --with-file-aio --with-ipv6 --with-http_v2_module --with-cc-opt=&#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=native&#39; make make install # 创建链接 sudo ln -s /usr/local/nginx/bin/nginx /usr/bin/nginx # 启动nginx /usr/local/nginx/sbin/nginx # 停止nginx /usr/local/nginx/sbin/nginx -s quit # 重新加载配置文件 /usr/local/nginx/sbin/nginx -s reload # 测试你的配置文件是否有误 /usr/local/nginx/sbin/nginx -t # 查看nginx对应的端口 lsof -i :80 centos7.2安装php7 # 加源 sudo yum install epel-release yum-utils sudo yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm # 选择remi sudo yum-config-manager --enable remi-php70 sudo yum-config-manager --enable remi-php71 sudo yum-config-manager --enable remi-php72 # 安装相关扩展 sudo yum-config-manager --enable remi-php70 sudo yum install php php-common php-opcache php-mcrypt php-cli php-gd php-curl php-mysql # 安装 PHP FPM sudo yum install php-fpm sudo systemctl enable php-fpm sudo systemctl start php-fpm # 配置 sudo vim /etc/php-fpm.d/www.conf user = nginx group = nginx # 配置nginx虚拟server server { # . . . other code location ~ \.php$ { try_files $uri =404; # fastcgi_pass unix:/run/php-fpm/www.sock; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } } centos7.2安装redis $ sudo yum install redis $ sudo systemctl enable redis $ sudo systemctl start redis # 查看版本号 $ redis-server --version # 使用方法 http://www.zhuohc.com/articles/redis%E5%9F%BA%E7%A1%80/ centos7.2安装使用docker centos7.2安装使用sentry centos7.2安装使用rabbitMQ centos7.2安装使用postgresql centos7.2安装supervisor 安装 12345$ sudo yum install -y supervisor$ systemctl enable supervisord # 开机自启动$ systemctl start supervisord # 启动supervisord服务$ systemctl status supervisord # 查看supervisord服务状态$ ps -ef|grep supervisord # 查看是否存在supervisord进程 配置 1234567# 设置web访问[inet_http_server]port=*:9001 username=usernamepassword=password [include] │(.env-api) ➜ supervisord.d sudo vim doneself-api.ini files = supervisord.d/*.ini # 配置文件地址 12345678910$ vim xxx.ini[program:doneself-api-uwsgi]command = /home/doneself/code/web/.env-api/bin/uwsgi --ini /home/doneself/code/web/api/uwsgi.iniautostart = trueautorestart = truestopsignal= QUITuser= doneselfredirect_stderr=falsestdout_logfile = /home/doneself/code/web/api/log/uwsgi_stdout.logstderr_logfile = /home/doneself/code/web/api/log/uwsgi_stderr.log 其他信息]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript入门基础]]></title>
    <url>%2F2016%2F11%2F10%2Fjavascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[数据类型 object(包含Function，Array，Date等) number string boolean null undefined 类型检测 typeof 基本类型，function， null可以用===判断 typeof 100 // &quot;number&quot; typeof true // &quot;boolean&quot; typeof function // &quot;function&quot; typeof undefined // &quot;undefined&quot; typeof new Object() // &quot;object&quot; typeof [1, 2] // &quot;object&quot; typeof NaN // &quot;number&quot; typeof null // &quot;object&quot; instanceof // 不同window或iframe下返回false [1, 2] instanceof Array === true new Object instanceof Array === fasle Object.prototype.toString Object.prototype.toString.apply([1, 2, 3]) === &quot;[object Array]&quot;; Object.prototype.toString.apply(function(){}) === &quot;[object Function]&quot; Object.prototype.toString.apply(null) === &quot;[object Null]&quot; // ie678返回[object Object] Object.prototype.toString.apply(undefined) === &quot;[object Undefined]&quot; Object.prototype.toString.apply(12313) === &quot;[object Number]&quot; Object.prototype.toString.apply(&#39;12313&#39;) === &quot;[object String]&quot; constructor duck type 表达式 表达式是一种js短语，可使js解释器用来产生一个值 // 原始表达式 3.14, &quot;test&quot; // 常量，直接量 null, this, true // 关键字 i, j, k; // 变量 // 复合表达式 10 * 20; // 原始表达式+运算符+原始表达式 // 初始化表达式 [1, 2]; [1,,2]; {x: 1, y: 2}; // 函数表达式 var fe = function(){}; (function(){console.log(&#39;1111&#39;);}){}; // 属性访问表达式 var o = {x:1}; o.x; o[&#39;x&#39;]; // 调用表达式 func(); // 对象创建表达式 new Func(1, 2); new Object; 运算符 一元（+num） 二元（a + b） 三元（c：a：b） 赋值(x += 1) 比较(a == b) 算术（a - b） 位 （a | b） 逻辑 (exp1 &amp;&amp; exp2) 字符串("a" + "b") 特殊 特殊运算符 c? a:b var val = (1, 2, 3) // 逗号运算符 delete obj.x // 删除对象属性 'x' in window; // in 运算符 instanceof, typeof // 判断类型 new Foo(); // new 运算符 this // this运算符 void 0 // undefined 语句 块语句block 块语句是没有作用域的 { var str = &#39;hi&#39;; console.log(str); } 声明语句 var var a=1, b=1; 函数语句function // 函数声明语句 function fd() { return true; } // 函数表达式 var fe = function() { //do sth }; for in 语句 var p; var obj = {x:1, y:2}; for(p in obj) { // 顺序不确定 } swith语句 var val = 2; switch (val) { case 1: console.log(1); break; case 2: console.log(2); break; case 3: console.log(3); break; default: console.log(0); break; } 循环语句 while (isTrue) { // do sth } do { // do sth } while (isTrue) var i; for (i = 0; i &lt; n; i++) { // do sth } with语句 // 不使用 try catch语句 try { try { throw new Error(&#39;oops&#39;); } catch(ex) { console.error(&#39;inner catch&#39;, ex.message); throw ex; } finally { console.log(&#39;inner finally&#39;); } } catch(ex) { console.error(&#39;outer catch&#39;, ex.message); } finally { console.log(&#39;outer finally&#39;); } 结果 内部catch&gt;内部finally&gt;外部catch&gt;外部finally inner catch oops inner finally outer catch oops outer finally 严格模式(待补充） function func() { &#39;use strict&#39;; } 对象 对象创建 字面量创建 var obj = {x: 1}; console.log(obj); console.log(obj.y); Object.prototype.y = 2; console.log(obj); console.log(obj.y); obj.y = undefined; console.log(obj); console.log(obj.y); { x: 1 } undefined { x: 1 } 2 { x: 1, y: undefined } undefined new构造器创建 function foo() { this.color = &#39;red&#39;;} foo.prototype.background = &#39;#000&#39;; var redColor = new foo(); console.log(redColor); console.log(typeof redColor.toString); console.log(redColor.color); console.log(redColor.background); console.log(foo); console.log(foo.prototype); console.log(foo.prototype.prototype); console.log(&#39;background&#39; in redColor); redColor.background = &#39;#FFF&#39;; console.log(redColor.background); console.log(foo.prototype.background); foo { color: &#39;red&#39; } function red #000 [Function: foo] foo { background: &#39;#000&#39; } undefined true #FFF #000 Object.create()创建 function obj() { this.x = 1; } console.log(obj); var obj1 = new obj(); console.log(obj1); var obj2 = Object.create(obj); console.log(obj2); console.log(obj2.x); var obj3 = Object.create(obj1); console.log(obj3); console.log(obj3.x);; [Function: obj] obj { x: 1 } Function {} undefined obj {} 1 对象的内部原型(proto)和构造器的原型（prototype）的关系。 一、所有构造器/函数的proto都指向Function.prototype，它是一个空函数（Empty function） Number.__proto__ === Function.prototype // true Boolean.__proto__ === Function.prototype // true String.__proto__ === Function.prototype // true Object.__proto__ === Function.prototype // true Function.__proto__ === Function.prototype // true Array.__proto__ === Function.prototype // true RegExp.__proto__ === Function.prototype // true Error.__proto__ === Function.prototype // true Date.__proto__ === Function.prototype // true Math.__proto__ === Object.prototype // true JSON.__proto__ === Object.prototype // true // 函数声明 function Person() {} // 函数表达式 var Man = function() {} console.log(Person.__proto__ === Function.prototype) // true console.log(Man.__proto__ === Function.prototype) // true 所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身。所有构造器都继承了Function.prototype的属性及方法。如length、call、apply、bind（ES5） console.log(typeof Function.prototype) // function console.log(typeof Object.prototype) // object console.log(typeof Number.prototype) // object console.log(typeof Boolean.prototype) // object console.log(typeof String.prototype) // object console.log(typeof Array.prototype) // object console.log(typeof RegExp.prototype) // object console.log(typeof Error.prototype) // object console.log(typeof Date.prototype) // object console.log(typeof Object.prototype) // object console.log(Function.prototype.__proto__ === Object.prototype) // true Object.prototype.__proto__ === null // true 二、所有对象的proto都指向其构造器的prototype JavaScript引擎内置构造器 var obj = {name: &#39;jack&#39;} var arr = [1,2,3] var reg = /hello/g var date = new Date var err = new Error(&#39;exception&#39;) console.log(obj.__proto__ === Object.prototype) // true console.log(arr.__proto__ === Array.prototype) // true console.log(reg.__proto__ === RegExp.prototype) // true console.log(date.__proto__ === Date.prototype) // true console.log(err.__proto__ === Error.prototype) // true 自定义的构造器 function Person(name) { this.name = name } var p = new Person(&#39;jack&#39;) console.log(p.__proto__ === Person.prototype) // true 每个对象都有一个constructor属性，可以获取它的构造器 function Person(name) { this.name = name } var p = new Person(&#39;jack&#39;) console.log(p.__proto__ === p.constructor.prototype) // true 对象属性操作 属性读写 // 属性读写 var obj = {x1: 1, x2: 2}; var i = 1, n = 2; for(; i&lt;= n; i++) { console.log(obj[&#39;x&#39; + i]); } // 输出1，2 var p; for(p in obj) { console.log(obj[p]); } // 输出1，2 var obj = {x: 1}; // 读写异常 console.log(obj.y); // undefined var yz = obj.y.z; // TypeError: Cannot read property &#39;z&#39; of undefined obj.y.z = 2; //TypeError: Cannot set property &#39;z&#39; of undefined // 正确方式 var yz; if(obj.y) { yz = obj.y.z; } // 或者 var yz = obj &amp;&amp; obj.y &amp;&amp; obj.y.z // 这个会返回undefined 属性删除 var person = {age: 28, title: &#39;fe&#39;}; console.log(delete person.age); // true console.log(delete person[&#39;age&#39;]); // true console.log(person.age); // undefined console.log(delete person.age); // 注意这个也返回true 判断操作结束后该属性是否存在 // 有些属性是不能删除的 console.log(delete Object.prototype); // false // 原因 var descriptor = Object.getOwnPropertyDescriptor(Object, &#39;prototype&#39;); console.log(descriptor.configurable); // false // 变量及函数不可删除 var globalVal = 1; console.log(delete globalVal); // false (function() { var localVal = 1; console.log(delete localVal); }()); // false function fd() {} console.log(delete fd); // false (function() { function fd() {}; console.log(delete fd); }()); // false // 隐示定义的变量可以 ohNo = 1; console.log(delete ohNo); // true 对象属性检测 var cat = new Object(); cat.legs = 4; cat.name = &#39;Kitty&#39;; console.log(&#39;legs&#39; in cat); // true console.log(&#39;abc&#39; in cat); // false console.log(&#39;toString&#39; in cat); // true 继承属性 console.log(cat.hasOwnProperty(&#39;legs&#39;)); // true console.log(cat.hasOwnProperty(&#39;toString&#39;)); // false console.log(cat.propertyIsEnumerable(&#39;legs&#39;)); // true console.log(cat.propertyIsEnumerable(&#39;toString&#39;)); // false Object.defineProperty(cat, &#39;price&#39;, {enumerable: false, value: 1000}); // defineProperty是Object的方法，默认的标签enumerable值为false // Object.x创建属性，默认的标签值为true console.log(cat.propertyIsEnumerable(&#39;price&#39;)); // false console.log(cat.hasOwnProperty(&#39;price&#39;)); // true // 判断属性是否存在 if(cat &amp;&amp; cat.legs) { cat.legs *= 2; } if(cat.legs != undefined) { // !== undefined 或者 !== null } if(cat.legs !== undefined) { // !== undefined } 对象属性枚举 var o = {x: 1, y: 2, z: 3}; console.log(&#39;toString&#39; in o); // true o.propertyIsEnumerable(&#39;toString&#39;); // false var key; console.log(o.x); // 1 console.log(o.y); // 2 console.log(o.z); // 3 for(key in o) { console.log(key); // x, y, z console.log(o.key); // undefined console.log(o[key]); // 1, 2, 3 } var obj = Object.create(o); obj.a = 4; var key; for(key in obj) { console.log(key); // a, x, y, z } var key1; for (key1 in obj) { if(obj.hasOwnProperty(key1)) { console.log(key1); // a } } 对象属性的get/set方法 // 对象属性的get/set方法 var man = { name: &#39;Bug&#39;, weibo: &#39;Bug&#39;, get age() { return new Date().getFullYear() - 1988; }, set age(val) { console.log(&#39;cannot be set &#39; + val); }, }; console.log(man.age); // 调用age的get方法27 man.age = 100; // 调用age的set方法 cannot be set 100 console.log(man.age); // 27 var man = { weibo: &#39;Bug&#39;, $age: null, get age() { if(this.$age == undefined) { return new Date().getFullYear() - 1988; } else { return this.$age; } }, set age(val) { val = +val; // 转为数字 if(!isNaN(val) &amp;&amp; val &gt; 0 &amp;&amp; val &lt; 150) { this.$age = + val; } else { throw new Error(&#39;Incorrect val = &#39; + val ); } } } console.log(man.age); // 27 man.age = 100; console.log(man.age); // 100 //man.age = &#39;abc&#39;; // Error: Incorrect val = NaN // get/set方法与原型链 // 这是错误的定义对象属性get方法方式 function foo1() {} foo1.prototype.z = { get: function() { return 2; } }; var obj = new foo1(); console.log(obj.z); // 这个会被认为是对象 { get: [Function] } obj.z = 200; console.log(obj.z); // 200 // 正确定义方法 function foo() {} Object.defineProperty(foo.prototype, &#39;z&#39;, { get: function() { return 1; }, // configurable: true, // 开启此属于也不会被改变 // writable: true, // 此项不能配置writable/value get/set 二选一 }); var obj = new foo(); console.log(obj.z); // 1 obj.z = 100; console.log(obj.z); // 但是还是1 并没有被改变 Object.defineProperty(obj, &#39;z&#39;, { value: 100, configurable: true }); console.log(obj.z); // 100 delete obj.z; console.log(obj.z); // 返回到1 // 另外一个例子 var o = {}; Object.defineProperty(o, &#39;x&#39;, { value: 1 }); // 默认writable: false, configurable: false var obj = Object.create(o); console.log(obj.x); // 1 obj.x = 100; console.log(obj.x); // 还是1 Object.defineProperty(obj, &#39;x&#39;, { writable: true, configurable: true, value: 100 }); console.log(obj.x); // 100 obj.x = 200; console.log(obj.x); // 200 对象属性标签 person = {}; Object.defineProperty(person, &#39;type&#39;, { configurable: false, writable: true, enumerable: false, value: &#39;Object&#39;, }); console.log(Object.keys(person)); // [] 返回空数组，不能枚举 console.log(Object.getOwnPropertyDescriptor(person, &#39;type&#39;)); // { value: &#39;Object&#39;, writable: true, enumerable: false, configurable: false } // writable为true，可以通过赋值方法修改value值 [通过赋值修改属性值只和writable标签有关，和configurable无关] person.type = &#39;Object2&#39;; console.log(Object.getOwnPropertyDescriptor(person, &#39;type&#39;)); // { value: &#39;Object2&#39;, writable: true, enumerable: false, configurable: false } // configurable: false 无法使用delete删除属性， 无法使用get/set方法， 无法重新配置属性标签（除了将writable从true修改为false） console.log(delete person.type); // 返回false // 只有writable和configurable标签都为false时，不能修改value标签值，其他情况都可以修改value标签值 Object.defineProperty(person, &#39;type&#39;, { configurable: false, writable: true, enumerable: false, value: &#39;Object1&#39;, }); console.log(Object.getOwnPropertyDescriptor(person, &#39;type&#39;)); // { value: &#39;Object1&#39;, writable: true, enumerable: false, configurable: false } // 可以重新配置writable标签值(只能重true改为false) Object.defineProperty(person, &#39;type&#39;, { writable: false, }); console.log(Object.getOwnPropertyDescriptor(person, &#39;type&#39;)); // { value: &#39;Object1&#39;, writable: false, enumerable: false, configurable: false } // 无法将writable从false改为true Object.defineProperty(person, &#39;type&#39;, { writable: true, }); console.log(Object.getOwnPropertyDescriptor(person, &#39;type&#39;)); // TypeError: Cannot redefine property: type // 无法重新配置enumerable，configurable属性 Object.defineProperty(person, &#39;type&#39;, { enumerable: true, }); console.log(Object.getOwnPropertyDescriptor(person, &#39;type&#39;)); // TypeError: Cannot redefine property: type 对象标签 原型标签proto // 原型标签__proto__ function Person(name) { this.name = name; } var p = new Person(&#39;jack&#39;); console.log(p.__proto__ === Person.prototype); // true 类型标签 // 对象class标签，表示对象是哪个类型，没有直接的方法去修改或者获取 var toString = Object.prototype.toString; console.log(toString.call(null)); // [object Null] console.log(toString.call(undefined)); // [object Undefined] console.log(toString.call(1)); // [object Number] console.log(toString.call(new Number(1))); // [object Number] console.log(toString.call(true)); // [object Boolean] console.log(toString.call(new Boolean(true))); // [object Boolean] 可扩展标签 // extensible 可扩展标签，表示是否可以继续添加对象属性 var obj = {x: 1, y: 2}; console.log(Object.isExtensible(obj)); // true 对象可扩展 Object.preventExtensions(obj); // 配置对象不可扩展 console.log(Object.isExtensible(obj)); // false 对象不可扩展 obj.z =1; console.log(obj.z); // undefined 添加属性失败 console.log(Object.getOwnPropertyDescriptor(obj, &#39;x&#39;)); // // { value: 1, writable: true, enumerable: true, configurable: true } // Object.seal方法，对象的所有属性configurable值为false Object.seal(obj); console.log(Object.getOwnPropertyDescriptor(obj, &#39;x&#39;)); // { value: 1, writable: true, enumerable: true, configurable: false } console.log(Object.isSealed(obj)); // true // Object.freeze方法，对象的所有属性configurable，writable标签值为false Object.freeze(obj); console.log(Object.getOwnPropertyDescriptor(obj, &#39;x&#39;)); // // { value: 1, writable: false, enumerable: true, configurable: false } console.log(Object.isFrozen(obj)); // true JS对象与json格式转换 // 将js对象转为json格式JSON.stringify() var obj = {x: 1, y: true, z: [1, 2, 3], nullVal: null}; console.log(JSON.stringify(obj)); // {&quot;x&quot;:1,&quot;y&quot;:true,&quot;z&quot;:[1,2,3],&quot;nullVal&quot;:null} // undefined,NaN,Infinity等特殊属性值 var obj = {val: undefined, a: NaN, b: Infinity, c: new Date()}; console.log(JSON.stringify(obj)); // {&quot;a&quot;:null,&quot;b&quot;:null,&quot;c&quot;:&quot;2015-12-19T12:30:40.456Z&quot;} // 将json格式转为js对象JSON.parse var obj = JSON.parse(&#39;{&quot;x&quot;: 1}&#39;); console.log(obj.x); // 1 //toJSON方法 var obj = { x: 1, y: 2, o: { o1: 1, o2: 2, toJSON: function() { return this.o1 + this.o2; } }, }; console.log(JSON.stringify(obj)); // {&quot;x&quot;:1,&quot;y&quot;:2,&quot;o&quot;:3} ###toString valueOf方法 // 对象在作为操作数时，解释器总是优先调用valueOf()--(Date类型的对象在二元“+”运算时例外),而其他情况，解释器总是认为我们想要的是字符串，所以会优先调用toString()。 var obj = {x: 1, y: 2}; console.log(obj.toString()); // [object Object] console.log(+obj.toString()); // NaN console.log(3 + obj.toString()); // 3[object Object] 会被理解为字符串拼接 console.log(+obj.valueOf()); // NaN // 重写 obj.toString = function() { return this.x + this.y; }; console.log(+obj); // 3 obj.valueOf = function() { return this.x + this.y + 100; }; console.log(+obj); // 103 // 如果只重写了toString，对象转换时会无视valueOf的存在来进行转换。但是，如果只重写了valueOf方法，在要转换为字符串的时候会优先考虑valueOf方法。在不能调用toString的情况下，只能让valueOf上阵了。 var cc = { i: 10, valueOf: function() { console.log(&#39;valueOf&#39;); return this.i; } }; console.log(cc);// 10 { [Number: 10] i: 10, valueOf: [Function] } console.log(+cc); // 10 valueOf console.log(&#39;&#39;+cc); // 10 valueOf console.log(String(cc)); // [object Object] console.log(Number(cc)); // 10 valueOf console.log(cc == &#39;10&#39;); // true valueOf 数组 创建数组 // 字面量创建数组 数组的长度不能超过2^23 - 1 = 4,294,967,295 var BAT = [&#39;B&#39;, &#39;A&#39;, &#39;T&#39;]; var students = [{name: &#39;B&#39;, age: 27}, {name: &#39;A&#39;, age: 30}]; var arr = [&#39;T&#39;, 123, true, null, undefined]; var arrInArr = [[1, 2], [1, 2, 3]]; // 对象创建数组 new关键字可以省略 var arr = new Array(); // var = []; var arrWithLength = new Array(100); // undefined * 100 var arrLikesLiteral = new Array(true, false, null, 1, 2, &#39;hi&#39;); // [true, false, null, 1, 2, &#39;hi&#39;] 数组元素操作 // 数组元素读写 // 索引访问 var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; console.log(arr[1]); // b console.log(arr.length); // 5 arr[5] = &#39;f&#39;; console.log(arr); // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39; ] console.log(arr.length); // 6 // delete方法并不会改变数组长度,delete 和定义为undefined的区别 delete arr[0]; console.log(arr); // [ , &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39; ] console.log(arr.length); // 6 console.log(0 in arr); // 会返回false arr[1] = undefined; console.log(arr); // [ , undefined, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39; ] console.log(arr.length); // 6 console.log(1 in arr); // true // 数组是动态的，无需指定大小 // 指定索引位置，改变数组 var arr = []; arr[1] = &#39;b&#39;; console.log(arr.length); // 2 console.log(arr); // [ , &#39;b&#39; ] // push方法，在数组尾部添加元素,并返回新的数组长度 console.log(arr.push(&#39;c&#39;)); // 3 console.log(arr); // [ , &#39;b&#39;, &#39;c&#39; ] // 在数组尾部添加的另一种方法 arr[arr.length] = &#39;d&#39;; console.log(arr); // [ , &#39;b&#39;, &#39;c&#39;, &#39;d&#39; ] // unshift方法，在数组头部添加元素，并返回新的数组长度 console.log(arr.unshift(&#39;a&#39;)); // 5 console.log(arr); // [ &#39;a&#39;, , &#39;b&#39;, &#39;c&#39;, &#39;d&#39; ] // pop方法，删除数组尾部的元素并返回这个元素 console.log(arr.pop()); // &#39;d&#39; console.log(arr); // [ &#39;a&#39;, , &#39;b&#39;, &#39;c&#39; ] // 删除数组尾部元素的另个方法 arr.length -= 1; console.log(arr); // [ &#39;a&#39;, , &#39;b&#39; ] // shift方法，删除数组头部的元素并返回这个元素 console.log(arr.shift()); // &#39;a&#39; console.log(arr); // [ , &#39;b&#39; ] 数组迭代 // 数组迭代 var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;]; for(var i = 0; i &lt; arr.length; i++) { console.log(arr[i]); } // a b c d e f g for(i in arr) { console.log(arr[i]); } // a b c d e f g // for in 表达式的坑：会迭代原型的元素 Array.prototype.x = &#39;keng&#39;; for(i in arr) { console.log(arr[i]); } // a b c d e f g keng for(i in arr) { if(arr.hasOwnProperty(i)) { console.log(arr[i]); } } // a b c d e f g 特殊数组：二维数组和稀疏数组 // 特殊数组：二维数组，稀疏数组 // 二维数组 var arr = [[&#39;a&#39;, &#39;b&#39;], [&#39;c&#39;, &#39;d&#39;], [&#39;e&#39;, &#39;f&#39;]]; var i = 0, j = 0; var row; for(; i &lt; arr.length; i++) { row = arr[i]; console.log(&#39;row&#39; + i); for(j = 0; j &lt; row.length; j++) { console.log(row[j]); } } // row0 a b row1 c d row2 e f // 稀疏数组：并不含有从0开始的连续索引 var arr1 = [undefined]; var arr2 = new Array(1); console.log(0 in arr1); // true console.log(0 in arr2); // false 数组的方法 Array.prototype.join(separator) // Array.prototype.join(separator)方法：将数组拼接成字符串，返回字符串，不改变原数组 var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]; console.log(arr.join()); // a,b,c console.log(arr.join(&#39;_&#39;)); // a,b,c function repeatString(str, n) { return new Array(n + 1).join(str); } console.log(repeatString(&#39;a&#39;, 3)); // aaa console.log(repeatString(&#39;Hi&#39;, 5)); // HiHiHiHiHi Array.prototype.reverse() // Array.prototype.reverse() 将数组逆序，返回数组本身，会改变数组本身 var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]; var arr1 = arr; var arr2 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]; console.log(arr.reverse()); // [ &#39;c&#39;, &#39;b&#39;, &#39;a&#39; ] console.log(arr); // [ &#39;c&#39;, &#39;b&#39;, &#39;a&#39; ] console.log(arr1); // [ &#39;c&#39;, &#39;b&#39;, &#39;a&#39; ] console.log(arr2); // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ] Array.prototype.sort(sortby） // Array.prototype.sort(sortby)方法：接受一个函数参数(不传参数默认按字符编码顺序)，返回数组本身，会修改原数组 var arr = [&#39;f&#39;, &#39;b&#39;, &#39;d&#39;, &#39;e&#39;, &#39;a&#39;]; console.log(arr.sort()); // [ &#39;a&#39;, &#39;b&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39; ] console.log(arr); // [ &#39;a&#39;, &#39;b&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39; ] var arr = [13, 24, 51, 3]; console.log(arr.sort()); // [ 13, 24, 3, 51 ] // 传入参数：比较函数(a, b) // 若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。 // 若 a 等于 b，则返回 0。 // 若 a 大于 b，则返回一个大于 0 的值。 function sortNumber(a, b) { return a - b; } console.log(arr.sort(sortNumber)); // [ 3, 13, 24, 51 ] var arr = [{age: 25}, {age: 29}, {age: 40}]; console.log(arr.sort(function sortAge(a, b) { return a.age - b.age; })); // [ { age: 25 }, { age: 29 }, { age: 40 } ] Array.prototype.concat(arrayX, arrayY.....) // Array.prototype.concat(arrayX, arrayY.....)方法 连接多个数组，返回一个新的数组，不会改变原数组 var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]; console.log(arr.concat(&#39;d&#39;, &#39;e&#39;)); // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ] console.log(arr); // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ] console.log(arr.concat([&#39;d&#39;, &#39;e&#39;], &#39;f&#39;)); // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39; ] console.log(arr.concat([&#39;d&#39;, &#39;e&#39;], [&#39;f&#39;, &#39;g&#39;])); // &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39; ] console.log(arr.concat([[&#39;d&#39;, &#39;e&#39;], &#39;f&#39;])); // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, [ &#39;d&#39;, &#39;e&#39; ], &#39;f&#39; ] console.log(arr.concat([[[&#39;d&#39;, &#39;e&#39;], &#39;f&#39;], &#39;g&#39;])); // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, [ [ &#39;d&#39;, &#39;e&#39; ], &#39;f&#39; ], &#39;g&#39; ] Array.prototype.slice(start, end) // Array.prototype.slice(start, end)方法：左闭右开截取数组，返回一个新的数组，不改变原数组 var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; console.log(arr.slice(1, 3)); // [&#39;b&#39;, &#39;c&#39;] console.log(arr.slice(1)); // [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;] console.log(arr.slice(1, -1)); // [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;] console.log(arr.slice(-4, -3)); // [&#39;b&#39;] Array.prototype.splice(index, howmany, item1,....itemX) // Array.prototype.splice(index, howmany, item1,....itemX)方法： // 向/从数组中添加/删除项目，然后返回被删除的项目。会改变原数组 // index参数：必须，整数，添加或删除的位置，左闭合 // howmany参数：可选，设置为0，则不会删除 // item1,.....itemX：可选，向数组中添加的元素 var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; console.log(arr.splice(2)); // [ &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ] console.log(arr); // [ &#39;a&#39;, &#39;b&#39; ] var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; console.log(arr.splice(2, 1)); // [ &#39;c&#39; ] console.log(arr); // [ &#39;a&#39;, &#39;b&#39;, &#39;d&#39;, &#39;e&#39; ] var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; console.log(arr.splice(2, 0)); // [] console.log(arr); // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ] var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; console.log(arr.splice(2, 2, &#39;f&#39;, &#39;g&#39;, [&#39;h&#39;, &#39;i&#39;])); // [ &#39;c&#39;, &#39;d&#39; ] console.log(arr); // [ &#39;a&#39;, &#39;b&#39;, &#39;f&#39;, &#39;g&#39;, [ &#39;h&#39;, &#39;i&#39; ], &#39;e&#39; ] // 指定位置插入新的元素 var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; console.log(arr.splice(2, 0, &#39;f&#39;)); // [] console.log(arr); // [ &#39;a&#39;, &#39;b&#39;, &#39;f&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ] var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; console.log(arr.splice()); // [] console.log(arr); // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ] Array.prototype.forEach() // Array.prototype.forEach()方法(ES5)：接收函数参数 // 函数的3个参数x: 元素值，index：元素索引，a 数组本身 var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; arr.forEach(function(x, index, a) { console.log(x + &#39;_&#39; + index + &#39;_&#39; + a); }); // a_0_a,b,c,d,e b_1_a,b,c,d,e c_2_a,b,c,d,e d_3_a,b,c,d,e e_4_a,b,c,d,e Array.prototype.map() //Array.prototype.map()方法(ES5):接收函数参数,不会修改原数组 var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]; var arr1 = arr.map(function(x) { return x + &#39;like&#39;; }); console.log(arr); // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ] console.log(arr1); // [ &#39;alike&#39;, &#39;blike&#39;, &#39;clike&#39; ] Array.prototype.filter() // Array.prototype.filter()过滤方法(ES5):接收函数参数，不修改原数组 var arr = [1,2,3,4,5,6,7,8,9,10]; var arr1 = arr.filter(function(x, index) { return index % 3 === 0 || x &gt;= 8; }); console.log(arr1); // [ 1, 4, 7, 8, 9, 10 ] console.log(arr); // [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] Array.prototype.every() &amp; Array.prototype.some() // Array.prototype.every() &amp; Array.prototype.some()判断方法(ES5):接收函数参数，不修改原数组 // every 全部符合条件 some 只需一个符合条件 var arr = [1,2,3,4,5]; console.log(arr.every(function(x) { return x &lt; 10; })); // true console.log(arr.every(function(x) { return x &lt;= 3; })); // false console.log(arr.some(function(x) { return x === 3; })); // true console.log(arr.some(function(x) { return x === 100; })); // false Array.prototype.reduce(function, index) Array.prototype.reduceRight(function, index) // Array.prototype.reduce(function, index) Array.prototype.reduceRight(function, index)方法 // 接收一个函数参数和一个数组索引参数，并返回一个值，不修改原数组 // 函数参加接收2个参数分别代表2个索引 // 索引参数表示从第index个元素开始 var arr = [1, 2, 3]; var sum = arr.reduce(function(x, y) { return x + y; }, 0); console.log(sum); // 6 1+2返回3 3+3 返回6 var arr = [3, 9, 6]; var max = arr.reduce(function(x, y) { console.log(x + &#39;|&#39; + y); return x &gt; y ? x : y; }); // 3|9 // 9|6 console.log(max); // 9 var max = arr.reduceRight(function(x, y) { console.log(x + &#39;|&#39; + y); return x &gt; y ? x : y; }); // 6|9 // 9|3 console.log(max); // 9 Array.prototype.indexOf(value, index) Array.prototype.lastIndexOf(value, index) // Array.prototype.indexOf(value, index) Array.prototype.lastIndexOf(value, index)数字检索方法 // value参数表示要查找的元素值，index表示从第几个索引位置开始查找(闭合) var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;]; console.log(arr.indexOf(&#39;b&#39;)); // 1 在数组中查找是否有元素值为&#39;b&#39;，有则返回这个元素索引 console.log(arr.indexOf(&#39;f&#39;)); // -1 如果没有则返回-1 console.log(arr.indexOf(&#39;b&#39;, 1)); // 1 从第2个元素开始查找，返回索引1 console.log(arr.indexOf(&#39;b&#39;, 2)); // 3 console.log(arr.indexOf(&#39;b&#39;, -2)); // 3 console.log(arr.indexOf(&#39;b&#39;, -4)); // 1 console.log(arr.indexOf(&#39;b&#39;, -8)); // 1 console.log(arr.lastIndexOf(&#39;b&#39;)); // 3 Array.isArray() // Array.isArray() 判断是否为数组 console.log(Array.isArray([])); // true 创建函数 // 函数声明 function add(a, b) { a = +a; b = +b; if (isNaN(a) || isNaN(b)) { return; } return a + b; } // 函数表达式 var add = function(a, b) { // do sth }; // IEF(立即执行函数表达式) (function() { // do sth })(); // 函数表达式 return function () { // do sth }; // NFE(命名式函数表达式) var add = function foo(a, b) { // do sth }; 函数声明和函数表达式区别：函数声明会前置 var num = add(1, 2); console.log(num); function add(a, b) { a = +a; b = +b; if (isNaN(a) || isNaN(b)) { return; } return a + b; } // 结果为3 var num = add(1, 2); console.log(num); var add = function (a, b) { a = +a; b = +b; if (isNaN(a) || isNaN(b)) { return; } return a + b; }; // TypeError: add is not a function this 全局下的this // 全局下的this(浏览器下) console.log(this.window === document); // true console.log(this === window); // true this.a = 37; console.log(window.a); // 37 一般函数的this // 一般函数的this（浏览器下） function f1() { return this; } f1() === window; // true function f2() { &quot;use strict&quot;; // 严格模式下 return this } f2() === undefined; // true 作为对象方法的函数的this var o = { prop: 37, f: function() { return this.prop; } }; console.log(o.f()); // 37 var o = {prop: 37}; function independent() { return this.prop; } o.f = independent; console.log(o.f()); // 37 原型链上的this var o = { f: function() { return this.a + this.b; } }; var p = Object.create(o); // p为空对象，其原型会指向o p.a = 1; p.b = 4; console.log(p.f()) // 5 构造器中的this // 当new的函数构造器没有return返回值或者返回值不是对象时，new返回一个this指向构造器的prototype这样一个空对象 // 如果return返回的是对象 new返回的这是这个对象 function Myclass() { this.a = 37; } var o = new Myclass(); console.log(o.a); // 37 function C2() { this.a = 37; return {a: 38}; } o = new C2(); console.log(o.a); // 38 call和apply的this function add(c, d) { return this.a + this.b + c + d; } var o = {a: 1, b: 2}; add.call(o, 5, 6); // 1+3+5+7=16 add.apply(o, [10, 20]); //1+3+10+20=34 function bar() { console.log(Object.prototype.toString.call(this)); } bar.call(7); // [object Number] band和this //bind是es5后，ie9+使用 function f() { return this.a; } var g = f.bind({a: &#39;test&#39;}); console.log(g()); // test var o = { a: 37, f: f, g: g }; console.log(o.f(), o.g()); // 37, test 函数arguments属性 function foo(x, y, z) { arguments.length; // 2 实际传入的参数数量 arguments[0]; // 1 传入第一个参数值 arguments[0] = 10; x; // 10 将第一个参数值修改为10， 严格模式下任然是1 arguments[2] = 100; z; // undefined 由于第三个参数没有传入，不会绑定 arguments.callee === foo; // true 严格模式下不能使用 } foo(1, 2); foo.length; // 3 3个参数 foo.name; // &quot;foo&quot; 函数名 call和apply // apply和call方法（浏览器） // 第一个参数是作为this的对象，如果不是对象，会转换为对象 // call传入的是扁平传入参数 // apply第二个参数树数组 function foo(x, y) { console.log(x, y, this); } foo.call(100, 1, 2); // 1, 2, Number(100) foo.apply(true, [3, 4]); //3, 4, Boolean(true) foo.apply(null); // undefined, undefined, window foo.apply(undefined); // undefined, undefined, window bind bind方法：改变this // bind方法 this.x = 9; var module = { x: 81, getX: function() { return this.x; } }; module.getX(); // 81 this指向module var getX = module.getX; getX(); // 9 this指向全局变量 var boundGetX = getX.bind(module); boundGetX(); // 81 bind改变this指向 bind方法：科里化 // bind方法 function add(a, b, c) { return a+b+c; } var func = add.bind(undefined, 100); func(1, 2); // 103 undefined传给this， 100传给第一个参数a var func2 = func.bind(undefined, 200); func2(10); // 310 undefined传给this，200传给b bind与new // bind方法与new function foo() { this.b = 100; return this.a; } var func = foo.bind({a: 1}); func(); // 1 foo.bind后this指向{a: 1} return this.a = 1 new func(); // {b: 100} new调用将返回一个this，this会被初始化一个空对象，并且其原型是foo.prototype,空对象的b属性为100 闭包 闭包基本概念 // 闭包 var n = 999; function f1() { console.log(n); } f1(); // 999 函数内部可以访问全局变量 function f1() { var n = 999; } console.log(n); // error 函数外部无法访问函数内部局部变量 function f1() { n = 999; } console.log(n); // 999 因为没有使用var语句，相当于定义一个全局变量 // 简单的闭包原型 function f1() { var n = 999; function f2() { console.log(n); } return f2 } var result = f1(); result(); // 999 闭包案例 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; #div1 { background-color: rosybrown; } #div2 { background-color: aquamarine; } #div3 { background-color: yellowgreen; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; document.body.innerHTML = &#39;&lt;div id=&quot;div1&quot;&gt;aaa&lt;/div&gt;&lt;div id=&quot;div2&quot;&gt;bbb&lt;/div&gt;&lt;div id=&quot;div3&quot;&gt;ccc&lt;/div&gt;&#39;; for(var i = 1; i &lt; 4; i++) { alert(i); // 结果为1，2，3 document.getElementById(&#39;div&#39; + i). addEventListener(&#39;click&#39;, function() { alert(i); // 点击div1，div2，div3结果都是4,因为addEventListener的回调函数执行时i都为4 }); } &lt;/script&gt; &lt;/html&gt; 正确写法 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; #div1 { background-color: rosybrown; } #div2 { background-color: aquamarine; } #div3 { background-color: yellowgreen; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; document.body.innerHTML = &#39;&lt;div id=&quot;div1&quot;&gt;aaa&lt;/div&gt;&lt;div id=&quot;div2&quot;&gt;bbb&lt;/div&gt;&lt;div id=&quot;div3&quot;&gt;ccc&lt;/div&gt;&#39;; for(var i = 1; i &lt; 4; i++) { !function(i) { alert(i); // 1,2,3 document.getElementById(&#39;div&#39; + i). addEventListener(&#39;click&#39;, function() { alert(i); // 1, 2,3 }); }(i); } &lt;/script&gt; &lt;/html&gt; 闭包中的封装 (function() { var _userID = 23245; var _typeID = &#39;item&#39;; var exportID = {}; function converter(userID) { return +userID; } exportID.getUserID = function() { return converter(_userID); }; exportID.getTypeID = function() { return _typeID; }; global.exportID = exportID; }()); console.log(exportID.getUserID()); //23245 console.log(exportID._userID); // undefined 三种作用域 // 作用域： 全局作用域，函数作用域，eval作用域 var a = 10; (function() { var b = 20; })(); console.log(a); // 10 console.log(b); // error for(var item in {a: 1, b: 2}) { console.log(item); // a, b } console.log(item); // b ES3中的执行上下文 EC = Execution Context 执行上下文 变量对象（Variable Object 简写VO）是一个抽象概念，用于存储执行上下文中的变量，函数声明，函数参数 var a = 10; function test(x) { var b = 20; } test(30); 对应的上下文 // 整个js环境中的VO VO(globalContext) = { a: 10, test: &lt;ref to function&gt; }; // 执行test(30)的VO VO(test functionContext) = { x: 30, b: 20 }; 全局执行上下文 VO(globalContext) === [[global]] [[global]] = { Math : &lt;...&gt;, String : &lt;...&gt;, isNaN: function() {[Native Code]}, ... ... window: global }; String(10); //[[global]].String(10) window.a = 10; // [[global]].window.a = 10 this.b = 20; // [[global]].b = 20 变量初始化阶段 // 1, 函数参数（若没有传入，则其值为undefined） // 2, 函数声明（若函数声明和函数参数冲突，则函数声明会覆盖掉函数参数） // 3，变量声明（初始化变量值为undefined，若何函数参数，函数声明冲突，会被忽略掉） function test(a, b) { var c = 10; function d() {} var e = function _e() {}; (function x() {}); b = 20; } test(10); AO(test) = { a: 10, b: undefined, c: undefined, d: &lt;ref to func &#39;d&#39;&gt;, e: undefined, }; 变量初始化案例1 function foo(x, y, z) { function x() {} console.log(x); } foo(100); // [Function: x] // AO(foo) = { //x: 100, y: undefined, z: undefined, x: &lt;ref to func &#39;x&#39;&gt;, // 函数声明x会覆盖掉参数声明 } 变量初始化案例2 function foo(x, y, z) { function func() {} var func; console.log(func); } foo(100); // [Function: func] function foo(x, y, z) { function func() {} var func = 1; console.log(func); } foo(100); // 1 执行阶段会执行func = 1 这个语句 代码执行阶段 function test(a, b) { var c = 10; function d() {} var e = function _e() {}; (function x() {})(); b = 20; } // 初始化阶段 AO(test) = { a: 10, b: undefined, c: undefined, d: &lt;ref to func &#39;d&#39;&gt;, e: undefined }; // 代码执行阶段 AO(test) = { a: 10, b: 20, c: 10, d: &lt;reference to FunctionDeclaration &#39;d&#39;&gt;, e: function _e() }; 全局执行上下文案例 console.log(x); // [Function: x] var x = 10; // 初始化阶段x: 冲突，被忽略 console.log(x); // 10 x = 20; function x() {} // 初始化阶段x: &lt;ref to func &#39;x&#39;&gt; console.log(x); // 20 if (true) { var a = 1; // 初始化阶段a: undefined } else { var b = true; // 初始化阶段b: undefined } console.log(a); // 1 console.log(b); // undefined prototype prototype是函数对象上的预设的对象属性 原型是对象上的原型，通常都是构造器的prototype属性 实例 function Abc() { this.y = 2; var z = 3; } console.log(Abc); // [Function: Abc] console.log(Abc.prototype); // Abc {} console.log(typeof Abc.prototype); // object Abc.prototype.x = 1; console.log(Abc.prototype); // Abc { x: 1 } var obj1 = new Abc(); console.log(obj1.__proto__); // Abc { x: 1 } console.log(obj1.__proto__ === Abc.prototype); // true new构造器创建的对象的原型是构造器的prototype属性 console.log(obj1); // Abc { y: 2 } console.log(obj1.y); // 2 console.log(obj1.x); // 1 继承 实现继承的方法 // 实现继承的方法 function Person() { } function Student() { } Student.prototype = Person.prototype; // 错误，会影响被继承类的方法 Student.prototype = new Person(); // 错误，传参问题，因为Student是类，并不是实例 // 正确的方法 Student.prototype = Object.create(Person.prototype); Student.prototype.constructor = Student; // Object.create()是es5的方法，下面是fix方法 if(!Object.create) { Object.create = function(proto) { function F() {} F.prototype = proto; return new F; }; } 原型的继承方法 function Person(name, age) { this.name = name; this.age = age; this.sayNo = function() { console.log(this.name + &#39; say no&#39;); } } Person.prototype.hi = function() { console.log(&#39;Hi, my name is &#39; + this.name + &#39;,I\&#39;m &#39; + this.age + &#39; years old now&#39;); }; Person.prototype.LEGS_NUM = 2; Person.prototype.ARMS_NUM = 2; Person.prototype.walk = function() { console.log(this.name + &#39; is walking...&#39;); }; console.log(Person); // [Function: Person] console.log(Person.prototype); // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] } var Jack = new Person(); // Person构造器没有return对象，所以返回的是this Jack.sayNo(); // undefined say no Jack.hi(); // Hi, my name is undefined,I&#39;m undefined years old now Jack.walk(); // undefined is walking... console.log(Jack); // Person { name: undefined, age: undefined, sayNo: [Function] } console.log(Jack.__proto__); // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] } // 以下5行代码是js中对象继承的写法 function Student(name, age, className) { Person.call(this, name, age); // 使用call方法调用父构造器函数 this.className = className; } Student.prototype = Object.create(Person.prototype); // 这个如果直接使用Student.prototype = Person.prototype，改变Student对象方法会改变Person对象的方法，因为他们指向的是同一个对象 Student.prototype.constructor = Student; Student.prototype.hi = function() { console.log(&#39;Hi, my name is &#39; + this.name + &#39;, I\&#39;m&#39; + this.age + &#39; years old now, and from &#39; + this.className + &#39;.&#39;); }; Student.prototype.learn = function(subject) { console.log(this.name + &#39; is learning &#39; + subject + &#39; at &#39; + this.className + &#39;.&#39;); }; var Lussi = new Student(&#39;Lussi&#39;, 27, &#39;Class Tree&#39;); Lussi.sayNo(); // Lussi say no Lussi.hi(); // Hi, my name is Lussi, I&#39;m27 years old now, and from Class Tree. Lussi.walk(); // Lussi is walking... Lussi.learn(&#39;math&#39;); // Lussi is learning math at Class Tree. console.log(Lussi); // Student {name: &#39;Lussi&#39;, age: 27, sayNo: [Function], className: &#39;Class Tree&#39; } console.log(Lussi.__proto__); // Student {constructor: [Function: Student], hi: [Function], learn: [Function] } console.log(Lussi.__proto__.__proto__); // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] } console.log(Lussi.__proto__.__proto__.__proto__); // {} console.log(Lussi.__proto__.__proto__.__proto__.__proto__); // null // 改变prototype Student.prototype.x = 101; // 会影响已经创建实例的属性 console.log(Jack.x); // undefined console.log(Lussi.x); // 101 Student.prototype = {y: 2}; // 不会影响已经创建实例的属性，但会影响新创建的实例，并且重新修改prototype.y属性也不会改变 console.log(Jack.y); // undefined console.log(Lussi.y); // undefined var Lilei = new Student(&#39;Lilei&#39;, 24, &#39;Class three&#39;); console.log(Lilei.x); // undefined console.log(Lilei.y); // 2 Student.prototype.y = 100; console.log(Lilei.y); // 100 console.log(Lussi.y); // undefined Student.prototype.z = 30; console.log(Lilei.z); // 30 console.log(Lussi.z); // undefined Person.prototype.z = 40; console.log(Lilei.z); // 30 console.log(Lussi.z); // 40 console.log(Jack.z); // 40 instanceof // instanceof 左边是对象（如果不是，直接返回false），右边是构造器（如果不是，直接报错），判断构造器的prototype属性是否在对象的原型链上 console.log([1, 2] instanceof Array); // true console.log(1 instanceof Array); // false console.log(Array.prototype); // [] console.log(new Object() instanceof Array); //false console.log(Object.prototype); // {} console.log(new Object() instanceof Object); // true console.log(new Array() instanceof Object); // true 模拟重载 function Person() { var args = arguments; // 判断第一个传入的是不是对象，因为args[null]也返回object，所有需要判断是否为null if(typeof args[0] === &#39;object&#39; &amp;&amp; args[0]) { if(args[0].name) { this.name = args[0].name; } if(args[0].age) { this.age = args[0].age; } } else { if(args[0]) { this.name = args[0]; } if(args[1]) { this.age = args[1]; } } } Person.prototype.toString = function() { console.log(&#39;name=&#39; + this.name + &#39;, age=&#39; + this.age); }; var LiLei = new Person(&#39;LiLei&#39;, 23); var Hanmm = new Person({name: &#39;Hanmm&#39;, age: 21}); LiLei.toString(); // name=LiLei, age=23 Hanmm.toString(); // name=Hanmm, age=21 调用子类方法 function Person(name) { this.name = name; } function Student(name, className) { this.className = className; Person.call(this, name); } Person.prototype.init = function() { console.log(&#39;Person.init&#39;); }; Student.prototype.init = function() { console.log(&#39;Student.init&#39;); Person.prototype.init.apply(this, arguments); }; var LiLei = new Student(&#39;LiLei&#39;, &#39;Class four&#39;); console.log(LiLei); // Student { className: &#39;Class four&#39;, name: &#39;LiLei&#39; } LiLei.init(); // Student.init Person.init 实现链式调用 function ClassManager() { console.log(&#39;ClassManager&#39;); this.name = &#39;ClassName&#39;; } ClassManager.prototype.addClass = function(str) { console.log(&#39;class: &#39; + str + &#39; added.&#39;); console.log(this); return this; // this始终指向ClassManger类的实例 }; var manager = new ClassManager(); manager.addClass(&#39;A&#39;).addClass(&#39;B&#39;).addClass(&#39;C&#39;); //class: A added. ClassManager { name: &#39;ClassName&#39; } class: B added. ClassManager { name: &#39;ClassName&#39; } class: C added. ClassManager { name: &#39;ClassName&#39; }]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css兼容性汇总]]></title>
    <url>%2F2016%2F11%2F10%2Fcss%E5%85%BC%E5%AE%B9%E6%80%A7%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[ie6,ie7中overflow:hidden失效问题 在父元素中使用position:relative;可以hack iframe自适应高度 不建议使用iframe 首先在css里面设置一个min-height min-height: 100px; 主页面嵌入如下js代码 &lt;script&gt; function setIframeHeight(iframe) { if (iframe) { var iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow; if (iframeWin.document.body) { iframe.height = iframeWin.document.documentElement.scrollHeight || iframeWin.document.body.scrollHeight; } } }; window.onload = function () { setIframeHeight(document.getElementById(&#39;external-frame&#39;)); }; &lt;/script&gt; iframe标签里 &lt;iframe src=&quot;backtop.html&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; id=&quot;external-frame&quot; onload=&quot;setIframeHeight(this)&quot;&gt;&lt;/iframe&gt; css代码 ul { display: block; width: 100%; height: 100%; text-indent: 0; padding: 0; position: absolute; top: -100%; left: 0; } js代码 var defaultTopPosition = $(&#39;#indexCellcate&#39;).css(&#39;top&#39;); 浏览器差异 ie7，ie8 返回-205.422px 现代chrome，firefox -205.422px 但是ie9及以上会返回0px 如果将css中的top设置为-205.422px，则无差异。 但响应式布局要求百分百设置,我的解决思路: 获取对应元素的高度来替代top值 var defaultTopPosition = cellcate.children(&#39;li&#39;).height(); defaultTopPosition = -parseInt(defaultTopPosition);]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[windowsserver服务器基础设置]]></title>
    <url>%2F2016%2F11%2F09%2Fwindowsserver%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[远程连接 禁止administrators组远程连接 运行gpedit.msc 计算机配置-&gt;windows设置-&gt;安全设置-&gt;本地策略-&gt;用户权限分配-&gt;通过终端服务允许登录 将Administrators账号删除掉,保留Remote Desktop Users 创建新的用户 本地用户和组-&gt;用户右键-&gt;新用户-&gt;输入用户名，设置密码 添加Administrators组，Remote Desktop Users组 限制登陆次数 计算机配置-&gt;windows设置-&gt;安全设置-&gt;账户策略-&gt;账户锁定策略”，“账户锁定阈值”设置为 20后，系统会自动设置锁定时间和计数器 3389端口修改 修改注册表，是不是需要修改？ 超过2个远程连接处理办法及规避方法 mstsc /console /v:10.10.10.10:3389 开始－管理工具－终端服务配置－服务器配置－限制每个用户使用一个会话 防火墙 开启防火墙 控制面板&gt;防火墙&gt;开启 例外里勾选远程桌面,保证服务器可以正常连接 其他情况就在添加端口里添加即可 FTP 开启ftp 在控制面板的添加/删除程序——Windows组件向导——应用程序服务器——Internet信息服务(IIS)中选中“文件传输协议(FTP)服务”。 需要文件夹AMD64 设置一个ftp用户ftpuser 在ftp设置中关掉允许匿名连接 主目录中本地路径为E:\FTP 不要勾选写入权限 默认ftp站点新建虚拟目录ftpuser 路径E:\FTP\ftpuser 在防火墙上开启20，21端口 在ftp客户端选择port主动模式，主动模式不需要服务器开启其他端口]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[thinkphp入门基础]]></title>
    <url>%2F2016%2F11%2F09%2Fthinkphp%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[URL 配置URL伪静态 3.1版本默认支持.html,.shtml,.xml,.pdf伪静态 在配置文件中配置[是在项目下的配置文件./App/Conf/config.php] &#39;URL_HTML_SUFFIX&#39;=&gt;&#39;html|shmtl|xml&#39; // 多个用 | 分割 配置URL路由 基本规则 一、规则路由 格式1：'路由规则'=&gt;'[分组/模块/操作]?额外参数1=值1&amp;额外参数2=值2...' 格式2：'路由规则'=&gt;array('[分组/模块/操作]','额外参数1=值1&amp;额外参数2=值2...') 格式3：'路由规则'=&gt;'外部地址' 格式4：'路由规则'=&gt;array('外部地址','重定向代码') 注意事项： 路由规则中如果以“:”开头，表示动态变量，否则为静态地址 格式2的额外参数可以传入数组或者字符串 外部地址中如果要引用动态变量， 采用 :1、:2 的方式 路由规则支持变量的数字约束定义，例如：'news/:id\d'=&gt;'News/read' 规则路由可以支持 全动态和动静结合定义，例如':user/blog/:id'=&gt;'Home/Blog/user' 路由规则非数字变量支持排除，例如 'news/:cate^add|edit|delete'=&gt;'News/category' 路由规则中的静态地址部分不区分大小写 配置文件开启路由 &#39;URL_ROUTER_ON&#39; =&gt; true, //开启路由 &#39;URL_ROUTE_RULES&#39; =&gt; array( //定义路由规则 &#39;news/:year/:month/:day&#39; =&gt; array(&#39;News/archive&#39;, &#39;status=1&#39;), &#39;news/:id&#39; =&gt; &#39;News/read&#39;, &#39;news/read/:id&#39; =&gt; &#39;/news/:1&#39;, ), http://serverName/index.php/news/2012/01/08匹配第一条路由 也可以写成'news/:year/:month/:day/'=&gt;'News/archive?status=1', http://serverName/index.php/news/8匹配第二条路由 第三条用于url地址迁移，重定向使用 正则路由 正则路由可以实现更加复杂的路由定义，支持的定义格式如下： 格式1：'路由正则'=&gt;'[分组/模块/操作]?参数1=值1&amp;参数2=值2...' 格式2：'路由正则'=&gt;array('[分组/模块/操作]','参数1=值1&amp;参数2=值2...') 格式3：'路由正则'=&gt;'外部地址' 格式4：'路由正则'=&gt;array('外部地址','重定向代码') 注意事项： 正则路由规则必须以“/”开始和结束 格式2的参数可以传入数组或者字符串 参数值和外部地址中可以用动态变量 采用 :1、 :2 的方式 下面是正则路由的定义示例： &#39;URL_ROUTER_ON&#39; =&gt; true, //开启路由 &#39;URL_ROUTE_RULES&#39; =&gt; array( //定义路由规则 &#39;/^blog\/(\d+)$/&#39; =&gt; &#39;Blog/read?id=:1&#39;, &#39;/^blog\/(\d+)\/(\d+)$/&#39; =&gt; &#39;Blog/achive?year=:1&amp;month=:2&#39;, &#39;/^blog\/(\d+)_(\d+)$/&#39; =&gt; &#39;blog.php?id=:1&amp;page=:2&#39;, ), 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071 ### URL区分大小写 &apos;URL\_CASE\_INSENSITIVE&apos; =&gt;true, // 不区分 &apos;URL\_CASE\_INSENSITIVE&apos; =&gt;false, // 区分 ### 缓存 ### 静态缓存 开启静态缓存[是在分组下的配置文件./App/Moduels/Index/Conf/config.php] 和静态缓存相关的配置参数包括： HTML_CACHE_ON 是否开启静态缓存功能 HTML_FILE_SUFFIX 静态文件后缀 惯例配置的值是 .html HTML_CACHE_TIME 默认的静态缓存有效期 默认60秒 可以在静态规则定义覆盖 &apos;HTML\_CACHE\_ON&apos;=&gt;true, &apos;HTML\_CACHE\_RULES&apos;=&gt; array( &apos;ActionName&apos; =&gt; array(&apos;静态规则&apos;, &apos;静态缓存有效期&apos;, &apos;附加规则&apos;), &apos;ModuleName(小写)&apos; =&gt; array(&apos;静态规则&apos;, &apos;静态缓存有效期&apos;, &apos;附加规则&apos;), &apos;ModuleName(小写):ActionName&apos; =&gt; array(&apos;静态规则&apos;, &apos;静态缓存有效期&apos;, &apos;附加规则&apos;), &apos;*&apos; =&gt; array(&apos;静态规则&apos;, &apos;静态缓存有效期&apos;, &apos;附加规则&apos;), &apos;Show:index&apos; =&gt; array(&apos;&#123;:module&#125;_&#123;:action&#125;_&#123;id&#125;&apos;, 100), 所有控制器下read方法缓存，其中，&#123;id&#125; 表示取$_GET[&apos;id&apos;] 为静态缓存文件名，第二个参数表示缓存60秒 &apos;read&apos;=&gt;array(&apos;&#123;id&#125;&apos;,&apos;60&apos;) User控制器下所有方法缓存，其中，&#123;:action&#125; 表示当前的操作名称 &apos;user:&apos;=&gt;array(&apos;User/&#123;:action&#125;_&#123;id&#125;&apos;,&apos;600&apos;) Blog控制器下read方法缓存 &apos;blog:read&apos;=&gt;array(&apos;&#123;id&#125;&apos;,0) 全局缓存 &apos;*&apos;=&gt;array(&apos;&#123;$\_SERVER.REQUEST\_URI|md5&#125;&apos;), 静态规则 1. 使用系统变量 包括 _GET _REQUEST _SERVER _SESSION _COOKIE &gt; &#123;$_×××|function&#125; 2. 使用框架特定的变量 &gt; &#123;:app&#125;、&#123;:group&#125; 、&#123;:module&#125; 和&#123;:action&#125; 分别表示当前项目名、分组名、模块名和操作名 3. 使用_GET变量 &gt; &#123;var|function&#125; 也就是说 &#123;id&#125; 其实等效于 &#123;$_GET.id&#125; 4. 直接使用函数 &gt; &#123;|function&#125; 例如：&#123;|time&#125; 5. 支持混合定义 &gt; &apos;&#123;id&#125;,&#123;name|md5&#125;&apos; 在&#123;&#125;之外的字符作为字符串对待，如果包含有”/”，会自动创建目录。 例如，定义下面的静态规则： &#123;:module&#125;/&#123;:action&#125;_&#123;id&#125; 则会在静态目录下面创建模块名称的子目录，然后写入操作名_id.shtml 文件。 使用get中文参数乱码问题 ### 原因 中文浏览器中默认使用的是gbk2312编码 ### 解决方法 /\*\* \* 解决get参数中带中文的乱码问题 * @param $keywords 传入的关键字 * @return string */ function decodeToUtf($keywords) &#123; $keywords = mb\_convert\_encoding($keywords, &apos;UTF-8&apos;,&apos;GB2312,UTF-8&apos;); return $keywords; &#125; $keywords = I(&apos;keywords&apos;); $keywords = decodeToUtf($keywords); $page = new Page($count,self::$perPage); $page-&gt;parameter = &apos;keywords=&apos; . $keywords;]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows软件运行时错误429,ACTIVEX部件不能创建对象的解决方法]]></title>
    <url>%2F2016%2F11%2F09%2Fwindows%E8%BD%AF%E4%BB%B6%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF429%2CACTIVEX%E9%83%A8%E4%BB%B6%E4%B8%8D%E8%83%BD%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[安装软件出现“ACTIVEX部件不能创建对象” 提示错误 中文：“运行时错误429，ActiveX部件不能创建对象” 英文："Run-time error '429' ActiveX componnent can't create object" 新建文件，将下面代码复制粘贴，文件另存为xxx.bat 运行xxx.bat，重启电脑，OK. echo 正在修复，这个过程可能需要几分钟，请稍候…… rundll32.exe advpack.dll /DelNodeRunDLL32 %systemroot%\System32\dacui.dll rundll32.exe advpack.dll /DelNodeRunDLL32 %systemroot%\Catroot\icatalog.mdb regsvr32 /s comcat.dll regsvr32 /s asctrls.ocx regsvr32 /s oleaut32.dll regsvr32 /s shdocvw.dll /I regsvr32 /s shdocvw.dll regsvr32 /s browseui.dll regsvr32 /s browseui.dll /I regsvr32 /s msrating.dll regsvr32 /s mlang.dll regsvr32 /s hlink.dll regsvr32 /s mshtml.dll regsvr32 /s mshtmled.dll regsvr32 /s urlmon.dll regsvr32 /s plugin.ocx regsvr32 /s sendmail.dll regsvr32 /s mshtml.dll /i regsvr32 /s scrobj.dll regsvr32 /s corpol.dll regsvr32 /s jscrīpt.dll regsvr32 /s msxml.dll regsvr32 /s imgutil.dll regsvr32 /s cryptext.dll regsvr32 /s inseng.dll regsvr32 /s iesetup.dll /i regsvr32 /s cryptdlg.dll regsvr32 /s actxprxy.dll regsvr32 /s dispex.dll regsvr32 /s occache.dll regsvr32 /s iepeers.dll regsvr32 /s urlmon.dll /i regsvr32 /s cdfview.dll regsvr32 /s webcheck.dll regsvr32 /s mobsync.dll regsvr32 /s pngfilt.dll regsvr32 /s licmgr10.dll regsvr32 /s hhctrl.ocx regsvr32 /s inetcfg.dll regsvr32 /s trialoc.dll regsvr32 /s tdc.ocx regsvr32 /s MSR2C.DLL regsvr32 /s msident.dll regsvr32 /s msieftp.dll regsvr32 /s xmsconf.ocx regsvr32 /s ils.dll regsvr32 /s msoeacct.dll regsvr32 /s wab32.dll regsvr32 /s wabimp.dll regsvr32 /s wabfind.dll regsvr32 /s oemiglib.dll regsvr32 /s directdb.dll regsvr32 /s inetcomm.dll regsvr32 /s msoe.dll regsvr32 /s oeimport.dll regsvr32 /s msdxm.ocx regsvr32 /s dxmasf.dll regsvr32 /s laprxy.dll regsvr32 /s l3codecx.ax regsvr32 /s acelpdec.ax regsvr32 /s mpg4ds32.ax regsvr32 /s danim.dll regsvr32 /s Daxctle.ocx regsvr32 /s lmrt.dll regsvr32 /s datime.dll regsvr32 /s dxtrans.dll regsvr32 /s dxtmsft.dll regsvr32 /s wshom.ocx regsvr32 /s wshext.dll regsvr32 /s vbscrīpt.dll regsvr32 /s scrrun.dll mstinit.exe /setup regsvr32 /s msnsspc.dll /SspcCreateSspiReg regsvr32 /s msapsspc.dll /SspcCreateSspiReg echo. echo. echo 修复成功！任意键退出！ pause&gt;nul]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[sublime入门基础]]></title>
    <url>%2F2016%2F11%2F09%2Fsublime%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[下载地址 http://www.sublimetext.com/3 Ubuntu下载 sudo add-apt-repository ppa:webupd8team/sublime-text-3 sudo apt-get update sudo apt-get install sublime-text-installer 插件下载地址 https://packagecontrol.io/ 注册码 ----- BEGIN LICENSE ---- Andrew Weber Single User License EA7E-855605 813A03DD 5E4AD9E6 6C0EEB94 BC99798F 942194A6 02396E98 E62C9979 4BB979FE 91424C9D A45400BF F6747D88 2FB88078 90F5CC94 1CDC92DC 8457107A F151657B 1D22E383 A997F016 42397640 33F41CFC E1D0AE85 A0BBD039 0E9C8D55 E1B89D5D 5CDB7036 E56DE1C0 EFCC0840 650CD3A6 B98FC99C 8FAC73EE D2B95564 DF450523 ------ END LICENSE ------ 安装Package Control import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read()) 安装模板Material Theme 配置方法 Package Control Messages ======================== Material Theme -------------- Material Theme for Sublime Text 3 For more information on the Material Theme: https://github.com/equinusocio/material-theme ********************************************************************************************** If installing manually (not through Package Control), add the following to your Settings - User file and restart Sublime Text after: { &quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;, &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme.tmTheme&quot;, } ********************************************************************************************** This theme includes a Darker and Lighter version: Darker version: { &quot;theme&quot;: &quot;Material-Theme-Darker.sublime-theme&quot;, &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme-Darker.tmTheme&quot;, } Lighter version: { &quot;theme&quot;: &quot;Material-Theme-Lighter.sublime-theme&quot;, &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme-Lighter.tmTheme&quot;, } ********************************************************************************************** Recommended UI and font settings for a better experience: { &quot;overlay_scroll_bars&quot;: &quot;enabled&quot;, &quot;line_padding_top&quot;: 3, &quot;line_padding_bottom&quot;: 3, &quot;always_show_minimap_viewport&quot;: true, &quot;bold_folder_labels&quot;: true, &quot;indent_guide_options&quot;: [ &quot;draw_normal&quot;, &quot;draw_active&quot; ] // Highlight active indent &quot;font_options&quot;: [ &quot;gray_antialias&quot; ], // For retina Mac } ********************************************************************************************** Other available theme options: &quot;material_theme_small_tab&quot;: true, // Set small tabs &quot;material_theme_disable_fileicons&quot;: true, // Hide siderbar file type icons &quot;material_theme_disable_folder_animation&quot;: true, // Disable folder animation &quot;material_theme_small_statusbar&quot;: true, // Set small status bar &quot;material_theme_disable_tree_indicator&quot;: true, // Disable sidebar file indicator &quot;material_theme_bold_tab&quot;: true, // Make the tab labels bolder &quot;material_theme_tabs_separator&quot;: true, // Show tabs separator &quot;material_theme_accent_lime&quot;: true, // set green lime accent color &quot;material_theme_accent_purple&quot;: true, // set purple accent color &quot;material_theme_accent_red&quot;: true, // set pale red accent color &quot;material_theme_accent_orange&quot;: true, // set orange accent color &quot;material_theme_accent_yellow&quot;: true, // set yellow accent color &quot;material_theme_panel_separator&quot;: true, // show bottom panel separator &quot;material_theme_tabs_autowidth&quot;: true, // Enable autowidth for tabs &quot;material_theme_contrast_mode&quot;: true, // Enable sidebar and panels contrast mode 设置空格缩进 { &quot;tab_size&quot;: 4, &quot;translate_tabs_to_spaces&quot;: true } 设置行间距 { &quot;line_padding_bottom&quot;: 3, &quot;line_padding_top&quot;: 3, } 插件安装 Emmet(懂的) ConvertToUtf8(编码转换) Sublime​Linter(代码检查工具，需要配合各语言插件包检查) SideBarEnhancements（侧边栏右键增强） Bracket​Highlighter（显示标签块？？） SublimeCodeIntel(跳转到自定义函数) For Windows: Jump to definition = Alt+Click Jump to definition = Control+Windows+Alt+Up Go back = Control+Windows+Alt+Left Manual Code Intelligence = Control+Shift+space 需要自己设置执行路径 &quot;PHP&quot;: { &quot;php&quot;: &quot;D:\\PHP\\php.exe&quot;, &quot;codeintel_scan_extra_dir&quot;: [], &quot;codeintel_scan_files_in_project&quot;: true, &quot;codeintel_max_recursive_dir_depth&quot;: 15, &quot;codeintel_scan_exclude_dir&quot;:[&quot;D:\\PHP&quot;] } HTML5(html5的snippets) Alignment(自动对齐插件) SFTP(ftp上传)需要配置对应的ftp路径等信息 git jquery(jquery snippets) SaSS(可以支持sass) DocBlockr（块状注释） ubuntu安装中文输入法 安装 git clone https://github.com/lyfeyaj/sublime-text-imfix.git 复制文件 cd ~/sublime-text-imfix sudo cp ./lib/libsublime-imfix.so /opt/sublime_text/ sudo cp ./src/subl /usr/bin/ 测试 终端输入 LD_PRELOAD=./libsublime-imfix.so subl 建立快捷方式 新建文件sublime放在/home目录下，脚本内容： #!/bin/bash LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so subl 测试 终端输入 bash ~/sublime 快捷方式修改 将[Desktop Entry]中的字符串 Exec=/opt/sublime_text/sublime_text %F 修改为 Exec=bash -c "LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text %F" 将[Desktop Action Window]中的字符串 Exec=/opt/sublime_text/sublime_text -n 修改为 Exec=bash -c "LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text -n" 将[Desktop Action Document]中的字符串 Exec=/opt/sublime_text/sublime_text --command new_file 修改为 Exec=bash -c "LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text --command new_file" 注意： 修改时请注意双引号"",否则会导致不能打开带有空格文件名的文件。]]></content>
      <categories>
        <category>办公</category>
      </categories>
      <tags>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git入门基础]]></title>
    <url>%2F2016%2F11%2F09%2Fgit%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[配置 12345# 设置代理$ git config --global http.proxy 'socks5://127.0.0.1:1080'$ git config --global https.proxy 'socks5://127.0.0.1:1080'# 查看配置项$ git config --list 创建项目 git init 查看分支 E:\HKMAIN (master) λ git branch * master v1.1 v1.2 λ git branch -v * master bf0d2bf 蛋白模板修改USAGE:Reconstitute in sterile ddH2O. v1.1 b48a782 试剂盒现货列表添加样本信息一栏 v1.2 acbf4f1 c1.2 删除分支 查看未合并的分支 λ git branch --no-merged 删除分支 git branch -d v1.1 如果是未合并的分支，使用大写的-D E:\HKMAIN (master) λ git branch -d v1.1 Deleted branch v1.1 (was b48a782). E:\HKMAIN (master) λ git branch -v * master bf0d2bf 蛋白模板修改USAGE:Reconstitute in sterile ddH2O. v1.2 acbf4f1 c1.2 创建分支 git branch v2.0 E:\HKMAIN (master) λ git branch Vmysql E:\HKMAIN (master) λ git branch Vmysql * master v1.2 E:\HKMAIN (master) λ git checkout Vmysql Switched to branch &#39;Vmysql&#39; E:\HKMAIN (Vmysql) λ 或者直接使用git checkout -b v3.0 E:\HKMAIN (Vmysql) λ git checkout -b Vsqlserver Switched to a new branch &#39;Vsqlserver&#39; E:\HKMAIN (Vsqlserver) λ git branch Vmysql * Vsqlserver master v1.2 git查看远程仓库 # git查看远程仓库 git remote -v # git添加远程仓库 git remote add xxx git@gitlab.xxx.com:xxx/xxx # 删除远程分值 git remote rm xxx git stash 使用git stash命令先把当前进度保存起来，然后切换到另一个分支去修改bug，修改完提交后，再切回dev分支，使用git stash pop来恢复之前的进度继续开发新功能。 # 保存当前进度 git stash # 查看现有的存储 git stash list # 恢复最新的进度到工作区 git stash pop git stash save your-file-name]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Excel入门基础]]></title>
    <url>%2F2016%2F11%2F09%2Fexcel%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[返回最后一个值、倒数第二个值 =LOOKUP(1,0/(A2:J2&lt;&gt;&quot;&quot;),A2:J2) =LOOKUP(1,0/(B2:J2&lt;&gt;&quot;&quot;),A2:J2) 返回时间差 =DATEDIF(--TEXT(F2,&quot;00-00-00&quot;),TODAY(),&quot;D&quot;) VLOOKUP 逆向检索 http://zhidao.baidu.com/link?url=-1b12Kx36WQ4vf05DIDhZmxCOtvC6Zdhc62kve1QRoF-hV_Hbl3cZDuBZOYgGRjEo513fDk9-UL6gfUnMI9Jna =VLOOKUP(C2,IF({1,0},Sheet2!$D$2:$D$5,Sheet2!$A$2:$A$5),2,FALSE) =INDEX(Sheet2!A:A,MATCH(Sheet1!C2,Sheet2!D:D,0)) 多条件统计求和 COUNTIFS 统计每个部门人数 {=SUM(IFERROR(1/(COUNTIFS(Sheet2!L$2:Sheet2!L$250,B5,Sheet2!N$2:Sheet2!N$250,Sheet2!N$2:Sheet2!N$250)*(Sheet2!L$2:Sheet2!L$250=B5)),))}]]></content>
      <categories>
        <category>办公</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[wireshark抓包基础]]></title>
    <url>%2F2016%2F11%2F09%2Fwireshark%E6%8A%93%E5%8C%85%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[nmap安装 sudo apt-get install nmap Zenmap图形GUI安装 sudo apt-get install Zenmap 扫描主机 nmap -T4 -A -v 192.168.1.3/16 其中-A选项用于使用进攻性（Aggressive）方式扫描；-T4指定扫描过程使用的时序（Timing），总有6个级别（0-5），级别越高，扫描速度越快，但也容易被防火墙或IDS检测并屏蔽掉，在网络通讯状况良好的情况推荐使用T4；-v表示显示冗余（verbosity）信息，在扫描过程中显示扫描的细节，从而让用户了解当前的扫描状态。 /32 表示扫描 192.168.1.3 /24 表示扫描 192.168.1.0-192.168.1.255 /16 表示扫描 192.168.0.0-192.168.255.255 /8 /1 参考cird Nmap所识别的6个端口状态。 open(开放的) 应用程序正在该端口接收TCP 连接或者UDP报文。发现这一点常常是端口扫描 的主要目标。安全意识强的人们知道每个开放的端口 都是攻击的入口。攻击者或者入侵测试者想要发现开放的端口。 而管理员则试图关闭它们或者用防火墙保护它们以免妨碍了合法用户。 非安全扫描可能对开放的端口也感兴趣，因为它们显示了网络上那些服务可供使用。 closed(关闭的) 关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听。 它们可以显示该IP地址上(主机发现，或者ping扫描)的主机正在运行up 也对部分操作系统探测有所帮助。 因为关闭的关口是可访问的，也许过会儿值得再扫描一下，可能一些又开放了。 系统管理员可能会考虑用防火墙封锁这样的端口。 那样他们就会被显示为被过滤的状态，下面讨论。 filtered(被过滤的) 由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由器规则 或者主机上的软件防火墙。这样的端口让攻击者感觉很挫折，因为它们几乎不提供 任何信息。有时候它们响应ICMP错误消息如类型3代码13 (无法到达目标: 通信被管理员禁止)，但更普遍的是过滤器只是丢弃探测帧， 不做任何响应。 这迫使Nmap重试若干次以访万一探测包是由于网络阻塞丢弃的。 这使得扫描速度明显变慢。 unfiltered(未被过滤的) 未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭。 只有用于映射防火墙规则集的ACK扫描才会把端口分类到这种状态。 用其它类型的扫描如窗口扫描，SYN扫描，或者FIN扫描来扫描未被过滤的端口可以帮助确定 端口是否开放。 open|filtered(开放或者被过滤的) 当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成 这种状态。开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃 了探测报文或者它引发的任何响应。因此Nmap无法确定该端口是开放的还是被过滤的。 UDP，IP协议， FIN，Null，和Xmas扫描可能把端口归入此类。 closed|filtered(关闭或者被过滤的) 该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID Idle扫描中。 监视指定网络接口的数据包tcpdump 如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0， tcpdump -i eth0 路由追踪traceroute linux sudo apt-get install traceroute traceroute hostname window tracert hostname ubuntu开启和关闭混杂模式 ``` ifconfig eth0 promisc # 设置eth0为混杂模式。 ifconfig eth0 -promisc # 取消它的混杂模式 ifconfig参数详解 字段含义说明： eth0/eth1： 分别表示第一块网卡和第二块网卡； lo： 表示回环测试接口，注意，这个虚拟的interface一定要存在！ usb0： 表示USB接口的网卡； Linkencap： 表示位于OSI物理层的名称，即连接类型Ethernet（以太网） HWaddr： 表示网卡的硬件地址，即MAC地址 inetaddr ： 表示网卡IP； Bcast： 表示广播(broadcast ) 的地址； Mask： 表示子网掩码； UP： 表示网卡开启状态； BROADCAST： 表示支持广播； MULTICAST： 表示网卡混杂模式； RUNNING： 表示网卡的网线被接上； MULTICAST： 表示支持组播； MTU： 表示MaximumTrasmission Unit 最大传输单元(字节)，即此接口一次所能传输的最大封包； Metric： 表示路由度量值，缺省值是0； RX： 表示网络由激活到目前为止接收的数据包； TX： 表示网络由激活到目前为止发送的数据包； collisions： 表示网络信号冲突的情况； txqueuelen： 表示传输缓冲区长度大小； Memory： 表示占用内存范围。 ### 安装wireshark sudo apt-get install wireshark wireshark捕获过滤器 src 192.168.0.10 &amp;&amp; port 80 源地址192.168.0.10和端口为80相关 host 192.160.0.1 和主机192.168.0.1相关 src host 192.168.0.1 port 8080 !port 8080 dst port 80 icmp !ip6 wireshark显示过滤器 !tcp ip.addr == 192.168.0.1 frame.len &lt;= 128 tcp.port == 23 || tcp.port == 21 smtp || pop || imap ip.addr == 192.168.0.1 or ip.addr == 192.168.0.2 操作符 ==, !=, &gt;, &lt;, &gt;=. &lt;= 操作符 and, or, xor(有且仅有1个满足), not]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[jetbrains使用配置]]></title>
    <url>%2F2016%2F11%2F09%2Fjetbrains%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[需要新的license 选择server license 添加 http://idea.lanyus.com/ 点击 "ok" 成功添加 phpstorm10.03开始使用http://idea.qinxi1992.cn/ pycharm 43B4A73YYJ-eyJsaWNlbnNlSWQiOiI0M0I0QTczWVlKIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9XSwiaGFzaCI6IjMzOTgyOTkvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-keaxIkRgXPKE4BR/ZTs7s7UkP92LBxRe57HvWamu1EHVXTcV1B4f/KNQIrpOpN6dgpjig5eMVMPmo7yMPl+bmwQ8pTZaCGFuLqCHD1ngo6ywHKIQy0nR249sAUVaCl2wGJwaO4JeOh1opUx8chzSBVRZBMz0/MGyygi7duYAff9JQqfH3p/BhDTNM8eKl6z5tnneZ8ZG5bG1XvqFTqWk4FhGsEWdK7B+He44hPjBxKQl2gmZAodb6g9YxfTHhVRKQY5hQ7KPXNvh3ikerHkoaL5apgsVBZJOTDE2KdYTnGLmqxghFx6L0ofqKI6hMr48ergMyflDk6wLNGWJvYHLWw==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog== 输入法问题 升级到ubuntu16.04后，输入无法使用 去安装目录bin文件夹下找到启动idea.sh,用编辑器打开，添加 XMODIFIERS=&quot;@im=fcitx&quot; export XMODIFIERS 在 # --------------------------------------------------------------------- # Run the IDE. # --------------------------------------------------------------------- 上面即可！ ubuntu安装 下载并压缩到/opt/目录下,并在/usr/share/appliactions/下创建快捷方式的文件，命名为phpstorm.desktop,编辑如下代码，保存 [Desktop Entry] Categories=Development; Comment[zh_CN]= Comment= Exec=/opt/phpstorm/bin/phpstorm.sh GenericName[zh_CN]=IDE GenericName=IDE Icon=/opt/phpstorm/bin/webide.png Name[zh_CN]=phpStorm Name=phpStorm Path= StartupNotify=true Terminal=false Type=Application X-DBUS-ServiceName= X-DBUS-StartupType= X-KDE-SubstituteUID=false X-KDE-Username=Learn Programming 界面样式 theme 背景修改，含theme 界面配置 显示行号 Editor-&gt;General-&gt;Appearance-&gt;Show line number 关闭自动保存 Appearance&amp;Behavior-&gt;System settings-&gt;save files on frame deactivation 关闭 Editor-&gt;General-&gt;Editor tabs-&gt;Mark modified tabs with asterisk 勾选 theme安装 安装模板下载http://phpstorm-themes.com/ ubuntu安装地址~/.pycharm/config/colors/ ###快捷键 Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/…/ ） Shift+F6 重构-重命名 Ctrl+X 删除行 Ctrl+D 复制行 Ctrl+G 查找行 Ctrl+Shift+Up/Down 代码向上/下移动。 F2 或Shift+F2 高亮错误或警告快速定位 写代码，按Tab 生成代码 选中文本，按Ctrl+Shift+F7 高亮显示所有该文本，按Esc高亮消失。(因为这个功能我就可以发放心的放弃sublime了) Ctrl+B或Ctrl+鼠标左键单击 快速打开光标处的类或方法，（NB的功能） Ctrl + Alt + B Go to implementation(s) 跳转方法实现处 Ctrl + Shift + I Open quick definition lookup 打开定义快速查找 Alt + Up/Down Go to previous/next method 跳转到上一个/下一个方法 Ctrl+E 最近打开的文件 Alt+F1 查找代码所在位置 Ctrl+Alt+L 格式化代码 Ctrl+R 替换文本 Ctrl+F 查找文本 Ctrl+P 方法参数提示 F3 查找下一个 Shift+F3 查找上一个 alt+Shift+F 将当前文件加入收藏夹 ctrl+alt+s 打开配置窗口 ctrl+Shift+N 通过文件名快速查找工程内的文件（必记） ctrl+Shift+alt+N 通过一个字符快速查找位置（必记） Shift+enter 重新开始一行（无论光标在哪个位置） Ctrl + Alt + T with…（if, else, try, catch, for, etc）用 * 来围绕选中的代码行，（ * 包括 if 、 while 、 try catch 等） Ctrl + Shift + U Toggle case for word at caret or selected block 光标所在位置大小写 Ctrl + Delete Delete to word end 删除文字结束 Ctrl + Backspace Delete to word start 删除文字开始 Ctrl + E Recent files popup 弹出最近打开的文件 F11 Toggle bookmark 切换标记，我觉得叫书签更好，就是sublime text 的F2 Ctrl + Shift + F12 Toggle maximizing editor 切换最大化编辑器 Alt + Shift + F Add to Favorites 添至收藏夹]]></content>
      <categories>
        <category>办公</category>
      </categories>
      <tags>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Apache入门基础]]></title>
    <url>%2F2016%2F11%2F09%2Fapache%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[查看apache加载的模块 apachectl -t -D DUMP_MODULES 禁用和启用模块 sudo a2dismod python sudo a2enmod python 查看版本号 apachectl -v 赋予权限 2.2.x以下版本 Order deny,allow Allow from all 2.4.x以上版本 Require all granted]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[django入门基础]]></title>
    <url>%2F2016%2F11%2F09%2Fdjango%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[2017.11.10号重新更新基本安装和线上部署 环境：python3.5 django1.11 # 安装环境 $ sudo apt-get update $ sudo apt-get install python3-pip apache2 libapache2-mod-wsgi-py3 $ sudo pip3 install virtualenv # 安装项目目录 $ cd ~/www/html/ $ virtualenv --no-site-packages -p /usr/bin/python3.5 CCO $ cd CCO $ source ./bin/activate (CCO) $ pip3 install ipython (CCO) $ pip3 install Django==1.11.7 # 查看django是否安装成功 (CCO) $ ipython &gt; import django &gt; django.VERSION # 打印出django版本表示成功 # 开始创建项目 (CCO) $ django-admin.py startproject CCO_WEB # 创建应用 (CCO) $ cd CCO_WEB (CCO) $ django-admin.py startapp polls # 修改文件内容 (CCO) $ vim CCO_WEB/CCO_WEB/setting.py ALLOWED_HOSTS = [&#39;127.0.0.1&#39;, &#39;localhost&#39;] # 修改 STATIC_URL = &#39;/static/&#39; # 原始 STATIC_ROOT = os.path.join(BASE_DIR, &#39;static/&#39;) # 添加 # 创建数据库和超级管理员 (CCO) $ ./manage.py makemigrations (CCO) $ ./manage.py migrate (CCO) $ ./manage.py createsuperuser # 创建超级管理员 (CCO) $ ./manage.py collectstatic # 收集静态文件 ### 用django自带服务器运行 (CCO) $ sudo ufw allow 8000 # 关闭防火墙 (CCO) $ ./manage.py runserver 0.0.0.0:8000 # 成功表示django开发环境配置完成 ### 线上部署 apache虚拟主机配置 $ sudo vim /etc/apache2/sites-available/www.cco.com.conf &lt;VirtualHost *:80&gt; ServerName www.example.com ServerAdmin webmaster@localhost # 这里指明静态文件存放的地方 Alias /static /home/hanchang/www/html/CCO/CCO_WEB/static # 给文件夹分配权限 &lt;Directory /home/hanchang/www/html/CCO/CCO_WEB/static&gt; Require all granted &lt;/Directory&gt; #接下来，我们将授予访问存储Django代码的二级项目目录中的wsgi.py文件的权限。 &lt;Directory /home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB&gt; &lt;Files wsgi.py&gt; Require all granted &lt;/Files&gt; &lt;/Directory&gt; WSGIDaemonProcess CCO_WEB python-home=/home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB python-path=/home/hanchang/www/html/CCO WSGIProcessGroup CCO_WEB WSGIScriptAlias / /home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB/wsgi.py ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined &lt;/VirtualHost&gt; ### 线上 sudo a2ensite www.cco.com sudo service apache2 restart http://127.0.0.1 查看 原文查看 https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-apache-and-mod_wsgi-on-ubuntu-16-04 数据库安装 $ sudo apt-get install python-setuptools $ sudo apt-get install libmysqld-dev $ sudo apt-get install libmysqlclient-dev $ sudo apt-get install python-dev $ sudo easy_install mysql-python $ pip3 install mysqlclient 安装 # 需要先安装虚拟环境 (Novel) pip isntall django==1.8.2 # 不能加sudo 查看是否安装成功及版本号 python import django django.VERSION 安装MysqlDb ubuntu # ubuntu安装步骤： sudo apt-get install python-setuptools sudo apt-get install libmysqld-dev sudo apt-get install libmysqlclient-dev sudo apt-get install python-dev sudo easy_install mysql-python windows下https://pypi.python.org/pypi/MySQL-python/1.2.5 下载.exe一键安装 创建项目 django-admin.py startproject Novel 创建APP python manage.py startapp Heros /Novel/settings.py INSTALLED_APPS = ( ... &#39;Heroes&#39;, #这里填写的是app的名称 ) 命令行调试模式 python manage.py shell 运行开发服务器 cd mysite python manage.py runserver 或者 python manage.py runserver 0.0.0.0:8000 运行shell脚本方式 python manager.py shell # 启动脚本环境 from testapp.models import * # 导入数据库 部署线上环境 安装apache模块 # Python 2 sudo apt-get install libapache2-mod-wsgi # Python 3 sudo apt-get install libapache2-mod-wsgi-py3 Novel/Novel/wsgi.py import os import sys sys.path.append(&#39;/var/www/html/Novel/&#39;) sys.path.append(&#39;/var/www/html/Novel/Novel/&#39;) sys.path.append(&#39;/var/www/html/Novel/lib/python2.7/site-packages&#39;) # 虚拟环境需要添加 from django.core.wsgi import get_wsgi_application os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;Novel.settings&quot;) application = get_wsgi_application() /etc/apache2/sites-enable/novel.conf &lt;VirtualHost *:1200&gt; ServerAdmin webmaster@localhost DocumentRoot /var/www/html/Novel/Novel/Novel ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined # 静态文件设置 Alias /static/ /var/www/html/Novel/Novel/Novel/static/ &lt;Directory /var/www/html/Novel/Novel/Novel/static/&gt; Require all granted &lt;/Directory&gt; WSGIScriptAlias / /var/www/html/Novel/Novel/Novel/wsgi.py &lt;Directory /var/www/html/Novel/Novel/Novel/&gt; Require all granted &lt;Files wsgi.py&gt; Require all granted &lt;/Files&gt; &lt;/Directory&gt; &lt;/VirtualHost&gt; 视图与路由绑定 /Heroes/views.py from django.http import HttpResponse, Http404 # Create your views here. def hello(request): return HttpResponse(&quot;Hello World&quot;) /Novel/urls.py from django.conf.urls import include, url from Heroes.views import * urlpatterns = [ url(r&#39;^hello/$&#39;, hello), url(r&#39;^time/plus/(\d{1,2})/$&#39;, hours_ahead) ] 视图与模板 /Novel/settings.py设置模板路径 TEMPLATES = [ { # ..... &#39;DIRS&#39;: [ os.path.join(os.path.dirname(__file__), &#39;templates&#39;).replace(&#39;\\&#39;,&#39;/&#39;), ], # .... }, ] /Novel/Heroes/views.py修改视图 from django.shortcuts import render_to_response from django.http import HttpResponse, Http404 import datetime # Create your views here. def current_datetime(request): now = datetime.datetime.now() # html = &#39;&lt;html&gt;&lt;body&gt;It is %s.&lt;/body&gt;&lt;/html&gt;&#39; % now return render_to_response(&#39;Heroes/current_datetime.html&#39;, {&#39;current_time&#39;: now}) /Novel目录下创建templates/Heroes/current_datetime.html &lt;!doctype html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;{ { current_time }}&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; 数据库配置 /Novel/settings.py DATABASES = { &#39;default&#39;: { &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;, &#39;NAME&#39;: &#39;Novel&#39;, &#39;USER&#39;: &#39;root&#39;, &#39;PASSWORD&#39;: &#39;password&#39;, &#39;HOST&#39;: &#39;127.0.0.1&#39;, &#39;PORT&#39;: &#39;3306&#39; } } 测试是否成功 python manage.py shell &gt;&gt;&gt; from django.db import connection &gt;&gt;&gt; cursor = connection.cursor() 视图返回json数据格式 views.py from django.http import HttpResponse, Http404 from json import dumps def login_handle(request): if request.method != &#39;POST&#39;: raise Http404() inputs = request.POST json_str = dumps(inputs) return HttpResponse(json_str, content_type=&#39;application/json&#39;) ### 静态文件 settings.py 线上模式静态地址 STATIC_URL 12345开发模式静态地址========STATICFILES_DIRS = (os.path.join(os.path.dirname(**file**), &apos;static&apos;).replace(&apos;\\&apos;,&apos;/&apos;),)]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql主从复制]]></title>
    <url>%2F2016%2F11%2F09%2Fmysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%2F</url>
    <content type="text"><![CDATA[测试环境 主服务器 192.168.0.160 mysql 5.6.17 win2008R2 从服务器 192.168.0.206 mysql 5.6.12 win2003 主服务器创建数据库test1, test2 mysql&gt;CREATE DATABASE `test1` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; mysql&gt;USE test1 mysql&gt;CREATE TABLE `test1`.`user` ( `id` INT(10) NOT NULL AUTO_INCREMENT , `name` VARCHAR(100) NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM; mysql&gt;INSERT INTO `user` (`id`, `name`) VALUES (NULL, &#39;user1&#39;), (NULL, &#39;user2&#39;) mysql&gt;CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; mysql&gt;USE test2 mysql&gt;CREATE TABLE `test2`.`user` ( `id` INT(10) NOT NULL AUTO_INCREMENT , `name` VARCHAR(100) NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM; mysql&gt;INSERT INTO `user` (`id`, `name`) VALUES (NULL, &#39;user1&#39;), (NULL, &#39;user2&#39;) 将test1,test2 复制到从服务器上 mysql&gt;CREATE DATABASE `test1` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; mysql&gt;USE test1 mysql&gt;set names utf8; mysql&gt;source c:/test1.sql; mysql&gt;CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; mysql&gt;USE test2 mysql&gt;set names utf8; mysql&gt;source c:/test2.sql; 主服务器配置 编辑配置文件my.ini [mysqld] server-id=1 # 配一个唯一的ID编号，1至32 log-bin=mysql-bin # 二进制文件存放路径 binlog-do-db=test1 # 需要同步的数据库名 binlog-ignore-db=test2 # 不需要同步的数据库名 重启mysql并重新登陆，创建授权用户 mysql&gt;grant REPLICATION SLAVE,RELOAD,SUPER on *.* to slave@192.168.0.206 identified by &#39;123456&#39; ; mysql&gt;grant REPLICATION SLAVE,RELOAD,SUPER on *.* to slave1@192.168.0.118 identified by &#39;123456&#39; ; # 如果是多从 mysql&gt;flush privileges; mysql&gt;show master status; # 找到File 和 Position 的值记录下来 从服务器配置192.168.0.206 编辑配置文件my.ini添加 [mysqld] server-id=2 #唯一 replicate-do-db=test1 replicate-ignore-db=test2 重启数据库并重新登陆 mysql&gt;mysql -uroot -p mysql&gt;change master to master_host=&#39;192.168.0.160&#39;,master_user=&#39;slave&#39;,master_password=&#39;123456&#39;, master_log_file=&#39;mysql-bin.000001&#39;,master_log_pos=199; mysql&gt;start slave; mysql&gt;show slave status\G 结果出现一下内容表示成功 Slave_IO_Running: Yes Slave_SQL_Running: Yes 多从，另一个从服务器配置192.168.0.118 编辑配置文件my.ini添加 [mysqld] server-id=3 #唯一，注意和其他的从服务器不一致 replicate-do-db=test1 replicate-ignore-db=test2 重启mysql并重新登陆，创建授权用户 mysql&gt;change master to master_host=&#39;192.168.0.160&#39;,master_user=&#39;slave1&#39;,master_password=&#39;123456&#39;, master_log_file=&#39;mysql-bin.000001&#39;,master_log_pos=199; mysql&gt;start slave; mysql&gt;show slave status\G 最后测试 在主服务器添加表和数据，可以看到从服务器数据库已经修改。 重启主从数据库，依然可以正常同步。 错误处理办法 连接不上master： 1，密码是否正确，是否给予权限 2，防火墙是否开启3306端口 配置的时候注意锁表 LOCK TABLES UNLOCK TABLES; 错误提示 Got fatal error 1236 from master when reading data from binary log: 'Slave can not handle replication events with the checksum that master is configured to log; the first event 'mysql-bin.000002' at 120, the last event read from './mysql-bin.000002' at 120, the last byte read from './mysql-bin.000002' at 120 由于主库是5.6, 从库是5.5. 5.6的版本中加入了replication event checksum，主从复制时间校验功能，所以需要把这个关掉才能正常同步到5.5的slave 修改主库 sudo vim /etc/my.cnf binlog_checksum=none 重新配置主从即可]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql入门基础]]></title>
    <url>%2F2016%2F11%2F09%2Fmysql%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[安装mysql 1234// ubuntu16.04sudo apt-get install mysql-serversudo apt install mysql-client # 服务器端不需要mysql_secure_installation 查看mysql版本信息 12mysql --version mysql&gt; show variables like '%version_%'; 数据库创建备份导入命令 12345678910111213141516171819202122// 创建数据库 CREATE DATABASE `test` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; // 删除数据库 DROP DATABASE IF EXISTS `test`; // 创建表 CREATE TABLE test(name varchar(32) not null,password varchar(64) not null)DEFAULT charset=utf8; ### 重置自增字段ALTER TABLE `tableName` AUTO_INCREMENT = 1; 或者truncate tableName; // 删除表DROP TABLE test; // 删除表内容，保留表结构 mysql&gt; TRUNCATE TABLE `tabel_name`; // 删除表并重置主键，不会留下日志，相当于删除表并重建 TRUNCATE TABLE `animal_cell_attribute` 123456789101112131415// 导出一个数据库 mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名.sql mysqldump -u root -p uscnerp &gt; uscnerp.sql Enter password: // 导出一张表mysqldump -u 用户名 -p 数据库名 表名 &gt; 导出的文件名.sql mysqldump -u root -p animal animal_service &gt; animal_service.sqlEnter password: ********** // 导出多个数据库mysqldump -uroot -p --databases test mysql #空格分隔 // 导出到excel表格mysql -uroot -p -e "select * from test.table2 " &gt; d:a.xsl 12345// 导入数据库 mysql&gt;use 数据库 mysql&gt;set names utf8; （先确认编码，如果不设置可能会出现乱码，注意不是UTF-8） mysql&gt;source d:\wcnc_db.sql 查看表 12// 查看表结构show create table 表名; 配置用户权限 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# 重置root密码并查看所有用户权限 mysql&gt; use mysql;Database changedmysql&gt; UPDATE user SET Password = PASSWORD('newpassword') WHERE user = 'root';Query OK, 3 rows affected (0.02 sec)Rows matched: 3 Changed: 3 Warnings: 0mysql&gt; SELECT Host,User,Password FROM mysql.user;+-----------+--------+-------------------------------------------+| Host | User | Password |+-----------+--------+-------------------------------------------+| localhost | root | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 || 127.0.0.1 | root | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 || ::1 | root | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 || localhost | | || localhost | animal | *CC87B1E39E699B64E0B80741B5D1991BC5BE57AC |+-----------+--------+-------------------------------------------+5 rows in set (0.00 sec)// 查看全部用户SELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user; // 创建用户CREATE USER username@localhost IDENTIFIED BY 'password';&gt; username:用户名 &gt; @localhost：表示用户只能在本地访问 &gt; password:密码// 配置权限GRANT SELECT,INSERT,UPDATE ON database.* TO username@localhost IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON *.* TO user;@localhost // GRANT 权限名称 ON 数据库.数据表 TO 用户名@访问地址 IDENTIFIED BY '密码'; // 刷新权限列表flush privileges; // 配置备份用户权限CREATE USER 'backuper'@'localhost' IDENTIFIED BY 'PASSWORD';GRANT SELECT, RELOAD, PROCESS, SHOW DATABASES, SUPER, LOCK TABLES, REPLICATION CLIENT, SHOW VIEW, EVENT ON *.* TO 'backuper'@'localhost';FLUSH PRIVILEGES;// 开启慢查询日志```bash sudo vim /etc/my.cnf# slow_query_logslow_query_log=onslow-query-log-file=/var/log/mysql/slow.log # 保证此文件属于mysql用户，mysql组，并可写权限long_query_time=1 # 超过1秒写入慢查询日志log-queries-not-using-indexes // 查看是否开启mysql慢查询日志&gt;mysql show variables like "slow_query_log";// 设置密码过期时间SET GLOBAL default_password_lifetime = 0; // 全局用户永不过期ALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER; // 单个用户用户过期ALTER USER 'root'@'localhost' PASSWORD EXPIRE INTERVAL 90 DAY; // 单个用户 window服务器下自动备份 编写脚本 1234567rem *******************************Code Start*****************************@echo off set "Ymd=%date:~,4%%date:~5,2%%date:~8,2%"mysqldump --opt -u root --password=abcdefg database &gt; F:\FTP\BackupMysql\database_%Ymd%.sql@echo onrem *******************************Code End***************************** 定时任务 注意在操作中填写脚本并在起始于写入脚本所在盘符E: 删除mysql 在服务里找到mysql服务，停止使用 控制面板中卸载mysql 注册表文件删除： HKEY_LOCAL_MACHINE/SYSTEM/ControlSet001/Services/Eventlog/Application/MySQL 目录删除; HKEY_LOCAL_MACHINE/SYSTEM/ControlSet002/Services/Eventlog/Application/MySQL 目录删除; HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Services/Eventlog/Application/MySQL 目录删除; 在硬盘和注册表中搜索mysql并删除掉]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rsync同步web服务器]]></title>
    <url>%2F2016%2F11%2F09%2Frsync%E5%90%8C%E6%AD%A5web%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[测试环境 服务端安装 WIN2008R2 ip:192.168.0.160 客户端安装 WIN2003 ip:192.168.0.206 程序下载 新版已经开始收费，这里使用旧版4.0.5,百度网盘下载http://pan.baidu.com/s/1kTNyk1h 服务端安装 一路直接下一步，这里会创建一个用户，创建的默认密码可以不需要修改，直接下一步。 创建的用户 创建的服务改为自动启动 客户端安装 一路下一步直到完成。 配置服务端 use chroot = false # 不验证用户密码 strict modes = false lock file = rsyncd.lock hosts allow = 192.168.0.206 max connections = 5 # 默认端口 port = 873 # 指定匿名访问 uid = 0 gid = 0 log file = rsyncd.log # Module definitions # Remember cygwin naming conventions : c:\work becomes /cygdrive/c/work [web] path = /cygdrive/C/WEB # 下面两行是配置用户名密码的 # auth users = dbbackuper # secrets file = /cygdrive/e/Setting/Rsync/rsync_db.ps # 只允许客户端下载，不允许客户端上传 read only = true transfer logging = yes 防火墙设置允许配置的端口通过 查看端口配置是否错误 telnet 192.168.0.160 873 @RSYNCD: 30.0 服务器端配置测试文件目录 其中targetDir为联接文件 C:\&gt;mklink /J WEB\targetDir\ source\ 为 WEB\targetDir\ &lt;&lt;===&gt;&gt; source\ 创建的联接 配置客户端 在安装目录下使用如下命令 C:\Program Files\cwRsync\bin&gt;rsync --port=873 -vzrtopg --progress --delete 192.168.0.160::web /cygdrive/C/WEB receiving incremental file list skipping non-regular file &quot;targetDir&quot; ./ TEST4/ test3/ sent 39 bytes received 163 bytes 134.67 bytes/sec total size is 19 speedup is 0.09 查看客户端文件目录 test3 TEST4 提示skipping non-regular file 'targetDir'忽略软链接解决办法 参数-L:--copy-links 像对待常规文件一样处理软链结 C:\Program Files\cwRsync\bin&gt;rsync --port=873 -vzrtopgL --progress --delete 192. 168.0.160::web /cygdrive/C/WEB receiving incremental file list deleting test5/adda.txt deleting test5/ ./ TEST4/ targetDir/ targetDir/HAFA/ targetDir/pdf/ targetDir/pdf/TARGE.txt 0 100% 0.00kB/s 0:00:00 (xfer#1, to-check=1/8) test3/ sent 70 bytes received 272 bytes 97.71 bytes/sec total size is 0 speedup is 0.00 实现客户端定时任务 1，要添加环境变量到系统中 2，上传脚本文件到客户端sync_client.bat rsync --port=873 -vzrtopgL --progress --delete 192.168.0.160::web /cygdrive/C/WEB 3,在系统中添加定时任务，并指定更新时间 具体参数详解 rsync参数的具体解释如下： -v, --verbose 详细模式输出 -q, --quiet 精简输出模式 -c, --checksum 打开校验开关，强制对文件传输进行校验 -a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD -r, --recursive 对子目录以递归模式处理 -R, --relative 使用相对路径信息 -b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。 --backup-dir 将备份文件(如~filename)存放在在目录下。 -suffix=SUFFIX 定义备份文件前缀 -u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件) -l, --links 保留软链结 -L, --copy-links 想对待常规文件一样处理软链结 --copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结 --safe-links 忽略指向SRC路径目录树以外的链结 -H, --hard-links 保留硬链结 -p, --perms 保持文件权限 -o, --owner 保持文件属主信息 -g, --group 保持文件属组信息 -D, --devices 保持设备文件信息 -t, --times 保持文件时间信息 -S, --sparse 对稀疏文件进行特殊处理以节省DST的空间 -n, --dry-run现实哪些文件将被传输 -W, --whole-file 拷贝文件，不进行增量检测 -x, --one-file-system 不要跨越文件系统边界 -B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节 -e, --rsh=COMMAND 指定使用rsh、ssh方式进行数据同步 --rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息 -C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件 --existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件 --delete 删除那些DST中SRC没有的文件 --delete-excluded 同样删除接收端那些被该选项指定排除的文件 --delete-after 传输结束以后再删除 --ignore-errors 及时出现IO错误也进行删除 --max-delete=NUM 最多删除NUM个文件 --partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输 --force 强制删除目录，即使不为空 --numeric-ids 不将数字的用户和组ID匹配为用户名和组名 --timeout=TIME IP超时时间，单位为秒 -I, --ignore-times 不跳过那些有同样的时间和长度的文件 --size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间 --modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0 -T --temp-dir=DIR 在DIR中创建临时文件 --compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份 -P 等同于 --partial --progress 显示备份过程 -z, --compress 对备份的文件在传输时进行压缩处理 --exclude=PATTERN 指定排除不需要传输的文件模式 --include=PATTERN 指定不排除而需要传输的文件模式 --exclude-from=FILE 排除FILE中指定模式的文件 --include-from=FILE 不排除FILE指定模式匹配的文件 --version 打印版本信息 --address 绑定到特定的地址 --config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件 --port=PORT 指定其他的rsync服务端口 --blocking-io 对远程shell使用阻塞IO -stats 给出某些文件的传输状态 --progress 在传输时现实传输过程 --log-format=formAT 指定日志文件格式 --password-file=FILE 从FILE中得到密码 --bwlimit=KBPS 限制I/O带宽，KBytes per second -h, --help 显示帮助信息 部分错误的解决办法 1.'rsync' 不是内部或外部命令，也不是可运行的程序或批处理文件。 加环境变量 path = C:\Program Files (x86)\cwRsync\bin 2.rsync: failed to connect to 192.168.1.82: Connection timed out (116) rsync error: error in socket IO (code 10) at clientserver.c(122) [Receiver=3.0.7] 网络通畅，服务器端允许访问端口 873 3.@ERROR: invalid uid nobody rsync error: error starting client-server protocol (code 5) at main.c(1506) [Receiver=3.0.7] 指定uid gid uid = 0 gid = 0 4.@ERROR: chdir failed rsync error: error starting client-server protocol (code 5) at main.c(1506) [Receiver=3.0.7] path目录配置的正确，得存在 解决：服务器端同步目录没有权限，cwrsync默认用户是Svcwrsync。为同步目录添加用户Svcwrsync权限。 也可以通过 菜单--cwRsyncServer--02. Prep a Dir for Upload 配置目录权限 除完全控制和特殊权限外的所有权限 5.@ERROR: auth failed on module test rsync error: error starting client-server protocol (code 5) at main.c(1506) [Receiver=3.0.7] 客户端设置 a.在命令上要指定好用户名 b.密码文件只写密码 rsyncd.secrets文件 rsyncpass c.用户名密码都要正确 6.Unexpected local arg: /cygdrive/d/rsyncBackup If arg is a remote file/dir, prefix it with a colon (:). rsync error: syntax or usage error (code 1) at main.c(1218) [Receiver=3.0.7] 不一定是这个路径有问题，可能是--password-file路径中有空格，服务器端没问题，客户端好像不行 7.password file must be owned by root when running as root continuing without password file Password: 设置密码访问权限chown.exe可从服务器端拷贝过来 chmod -c 600 /cygdrive/c/etc/rsyncd.secrets chown administrator /cygdrive/c/etc/rsyncd.secrets 服务器端不设也可以 8.当出现rsync: chown “” failed: Invalid argument (22)错误时，是因为参数中有o，即保留文件的owner信息，而window服务端无法完成chown操作，解决办法是去掉参数o。另外有些可能还会出现rsync: chgrp “” failed: Invalid argument (22)，原因类似，只要去掉参数中的g即可。]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux开发环境常用软件]]></title>
    <url>%2F2016%2F11%2F09%2Flinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[显示电脑硬件信息 $ sudo add-apt-repository ppa:dawidd0811/neofetch $ sudo apt-get update $ sudo apt-get install neofetch neofetch 安装独立显卡驱动 https://blog.csdn.net/ghw15221836342/article/details/79571559 # 驱动版本查询 https://www.nvidia.com/Download/index.aspx?lang=en-us # 安装 sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt-get update sudo apt-get install nvidia-390 #此处要根据上面查询到的版本适当更改 sudo apt-get install mesa-common-dev sudo apt-get install freeglut3-de # 测试 nvidia-smi #若出现电脑GPU列表，即安装成功 或者 nvidia-settings #显示你的显卡信息 123456789101112131415161718192021222324252627282930313233 #### Chrome浏览器 下载地址 [百度云盘](http://pan.baidu.com/s/1hq0Nom4) #### 配置SS 安装==apt-get install python-pip pip install s\_h\_a\_d\_o\_w\_s\_o\_c\_k\_s启动==sslocal -s server\_ip -p server\_port -l 1080 -k password -t 600 -m aes-256-cfb简写==sslocal -s ip -p port -k &quot;password&quot; 开机启动配置 在/home下新建文件ss.sh脚本 #!/bin/bash #文件名:ss.sh sslocal -s ip -p port -k &quot;password&quot; 编辑开机启动文件 sudo vim /etc/rc.local # 最后加入以下内容 nohup bash /home/ss.sh&gt;/home/ss.txt &amp; 代理设置 service： 127.0.0.1 port ： 1080 type： socks5 配置proxychains # 安装 sudo apt install proxychains sudo vim /etc/proxychains.conf ~ socks5 127.0.0.1 1080 # 最后一行加入socks代理 # 测试 proxychains wget https://www.google.com wine qq（现在推荐docker安装qq） 安装wine1.7以上版本 安装WineQQ7.8-20151109-Longene.deb版本 下载网盘 elinks 纯文本浏览器 sudo apt-get install elinks # 安装 elinks www.zhuohc.com # 使用 unzip / zip 解决中文乱码 unzip -O CP936 xxx.zip 解压到指定目录 unzip -O xxx.zip -d xxx/ 压缩文件 zip -r yasuo.zip abc.txt dir1 wps office办公 显示字体确实错误 下载字体 将字体复制到linux字体中 sudo cp * /usr/share/fonts 生成字体索引信息 sudo mkfontscale sudo mkfontdir 更新字体缓存 sudo fc-cache 中文无法输入 $ vi /usr/bin/wps # word文档 #!/bin/bash export XMODIFIERS=&quot;@im=fcitx&quot; # 添加的内容 export QT_IM_MODULE=&quot;fcitx&quot; # 添加的内容 gOpt= #gOptExt=-multiply gTemplateExt=(&quot;wpt&quot; &quot;dot&quot; &quot;dotx&quot;) $ vi /usr/bin/et # excel表格 #!/bin/bash export XMODIFIERS=&quot;@im=fcitx&quot; # 添加的内容 export QT_IM_MODULE=&quot;fcitx&quot; # 添加的内容 gOpt= #gOptExt=-multiply 输入法 系统自带或者sougou输入法 ， 倬彼昊天系列皮肤 截屏 系统设置&gt;键盘&gt;自定义快捷键&gt;+&gt; 名称填screenshot 命令 gnome-screenshot -a 在disabled修改快捷键 下载 安装uget sudo add-apt-repository ppa:plushuang-tw/uget-stable sudo apt-get update sudo apt-get install uget 安装aria2 sudo add-apt-repository ppa:t-tujikawa/ppa sudo apt-get update sudo apt-get install aria2 在uget gui里编辑插件，选择aria2 美化监视工具 sudo apt-get install conky sudo add-apt-repository ppa:teejee2008/ppa sudo apt-get update sudo apt-get install conky-manager 12显示桌面会自动隐藏conky的bug解决办法: 编辑配置文件 # own_window_type normal own_window_type desktop #### 快速搜索文件 sudo add-apt-repository ppa:synapse-core/testing sudo apt-get update sudo apt-get install synapse 卸载synapse sudo apt-get remove synapse 移除PPA sudo apt-get install ppa-purge sudo ppa-purge ppa:synapse-core/testing 安装oh-my-zsh # https://github.com/robbyrussell/oh-my-zsh $ sudo apt-get install git $ sudo apt-get install zsh $ sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; $ chsh -s /bin/zsh # 更改默认bash //或: $ chsh -s `which zsh` $ sudo reboot terminator 终端管理软件 安装 sudo add-apt-repository ppa:gnome-terminator sudo apt-get update sudo apt-get install terminator 基本设置方法 右键点击终端任意区域，选择首选项 设置solarized配色（参考） cd ~/.config/terminator vim config 覆盖以下内容 [global_config] title_transmit_bg_color = &quot;#d30102&quot; focus = system suppress_multiple_term_dialog = True [keybindings] [profiles] [[default]] palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot; copy_on_selection = True background_image = None background_darkness = 0.95 background_type = transparent use_system_font = False cursor_color = &quot;#eee8d5&quot; foreground_color = &quot;#839496&quot; show_titlebar = False font = Monospace 11 background_color = &quot;#002b36&quot; [[solarized-dark]] palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot; background_color = &quot;#002b36&quot; background_image = None cursor_color = &quot;#eee8d5&quot; foreground_color = &quot;#839496&quot; [[solarized-light]] palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot; background_color = &quot;#fdf6e3&quot; background_image = None cursor_color = &quot;#002b36&quot; foreground_color = &quot;#657b83&quot; [layouts] [[default]] [[[child1]]] type = Terminal parent = window0 profile = default [[[window0]]] type = Window parent = &quot;&quot; [plugins] 以上配置后会修改配色方案，但是没有bright色 dircolors-solarized项目提供了适合于solarized的dircolors配色方案，只要选择合适的方案使用就可以了。 curl https://raw.github.com/seebi/dircolors-solarized/master/dircolors.ansi-dark &gt; ~/.dircolors 然后在~/.bashrc中加入如下配置： # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors &amp;&amp; eval &quot;$(dircolors -b ~/.dircolors)&quot; || eval &quot;$(dircolors -b)&quot; alias ls=&#39;ls --color=auto&#39; #alias dir=&#39;dir --color=auto&#39; #alias vdir=&#39;vdir --color=auto&#39; alias grep=&#39;grep --color=auto&#39; alias fgrep=&#39;fgrep --color=auto&#39; alias egrep=&#39;egrep --color=auto&#39; fi # some more ls aliases alias ll=&#39;ls -alF&#39; alias la=&#39;ls -A&#39; alias l=&#39;ls -CF&#39; 执行 source ~/.bashrc tmux配合terminator使用 安装 sudo apt-get install tmux 配置 touch .tmux.conf 配置内容和使用方法 # 设置前缀为Ctrl + x set -g prefix C-x # 解除Ctrl+b 与前缀的对应关系 unbind C-b # 将r 设置为加载配置文件，并显示&quot;reloaded!&quot;信息 bind r source-file ~/.tmux.conf \; display &quot;Reloaded!&quot; # copy-mode 将快捷键设置为vi 模式 setw -g mode-keys vi # tmux-powerline设置 set-option -g status on set-option -g status-interval 2 set-option -g status-utf8 on set-option -g status-justify &quot;centre&quot; set-option -g status-left-length 60 set-option -g status-right-length 90 set-option -g status-left &quot;#(~/.tmux/tmux-powerline/powerline.sh left)&quot; set-option -g status-right &quot;#(~/.tmux/tmux-powerline/powerline.sh right)&quot; # 将窗口列表换成 powerline的风格 set-window-option -g window-status-current-format &quot;#[fg=colour235, bg=colour27]⮀#[fg=colour255, bg=colour27] #I ⮁ #W #[fg=colour27, bg=colour235]⮀&quot; # 设置默认bash set-option -g default-shell /bin/zsh ########## 复制模式 ########## # copy mode 复制模式 # &#39;prefix + [ &#39;进入复制模式 # 按space 开始复制 # Enter退出复制模式 需要安装powerline插件 https://github.com/erikw/tmux-powerline 显示日期的星期 vim data_day.sh # date +&quot;%a&quot;改成大写 date +&quot;%A&quot; powerline字体安装查看 http://powerline.readthedocs.io/en/latest/installation/linux.html 在terminator配置自动启动turm 首选项-&gt;配置&gt;命令&gt;自定义命令 ([[ -f &quot;$TMUX&quot; ]] &amp;&amp; tmux -2 -S $TMUX) || (TMUX=&quot;&quot; tmux -2) 自动部署多窗口任务 touch ~/development.start chmod +x development.start tmux has-session -t development if [ $? != 0 ] then tmux new-session -s development -n editor -d tmux send-keys -t development &#39;vim&#39; C-m tmux split-window -v -t development tmux select-layout -t development main-horizontal tmux new-window -n bash -t development tmux new-window -n ssh -t development tmux new-window -n mysql -t development tmux new-window -n front-end -t development tmux select-window -t development:1 fi tmux attach -t development 执行文件 ~/development.start Visual Studio Code 通过官方PPA来安装Ubuntu Make sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make sudo apt-get update sudo apt-get install ubuntu-make 安装Ubuntu Make完后，接着使用下列命令安装Visual Studio Code umake web visual-studio-code 卸载命令 umake web visual-studio-code --remove wine 卸载wineqq sudo dpkg -l | grep qq # 找到安装包名称 sudo dpkg -r wine-qq7.8-longeneteam # 卸载 curl http请求 curl &quot;http://www.baidu.com&quot; # 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地 curl -i &quot;http://www.baidu.com&quot; # 显示全部信息 curl -l &quot;http://www.baidu.com&quot; # 只显示头部信息 curl -v &quot;http://www.baidu.com&quot; # 显示get请求全过程解析 curl -d &quot;param1=value1¶m2=value2&quot; &quot;http://www.baidu.com&quot; # post请求 安卓虚拟机genymotion 前提必须安装virtualBox 下载地址: https://www.genymotion.com/download/ 需要先注册,下载后执行 chmod +x genymotion-2.2.2_x64.bin ./genymotion-2.2.2_x64.bin -d /home/user 执行home/user/genymotion/genymotion 安装为知笔记 简易版本 http://ppa.launchpad.net/wiznote-team/ppa/ubuntu/pool/main/w/wiznote/ 编译安装 http://www.wiz.cn/compile-client.html chrome安装扩展 https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab/related?hl=zh-CN 安装系统状态指示器 sudo add-apt-repository ppa:indicator-multiload/stable-daily sudo apt-get update sudo apt-get install indicator-multiload 安装albert搜索框 sudo add-apt-repository ppa:noobslab/macbuntu sudo apt-get update sudo apt-get install albert 设置快捷键Ctrl+/ 样式NUMIX 下载特殊文件 sudo apt-get install ktorrent sudo apt-get install amule]]></content>
      <categories>
        <category>办公</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python入门基础]]></title>
    <url>%2F2016%2F11%2F09%2Fpython%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[1. linux源码安装（适合生产环境） 安装python3.x.x 123456789101112# 以centos系统安装python3.6.6为例$ sudo yum groupinstall &quot;Development tools&quot;$ sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel$ wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tar.xz$ tar -xJf Python-3.6.6.tar.xz$ cd Python-3.6.6$ ./configure --prefix=/usr/local/python3 # 编译配置$ sudo make$ sudo make install# 创建软链接$ ln -s /usr/local/python3/bin/python3 /usr/bin/python3$ ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 安装虚拟环境 1sudo yum install python-virtualenv # centos 创建项目 123$ virtualenv --no-site-packages -p /usr/bin/python3 .env-project$ source.env-project/bin/active # 进入虚拟环境(.env-project) deactive # 退出虚拟环境 2. pyenv安装(适合开发环境) 安装pyenv 1curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash 设置环境变量 1$ vim ~/.zshrc # 具体文件看自己的终端工具 123export PATH=$HOME/.pyenv/bin:$PATHeval &quot;$(pyenv init -)&quot;eval &quot;$(pyenv virtualenv-init -)&quot; 1$ source ~/.zshrc 检查环境 1$ pyenv doctor # 如有错误，根据自己的环境解决 安装python3.x.x 1$ pyenv install 3.6.6 如果pyenv下载文件缓慢，可以先下载文件到缓存中 123$ cd ~/.pyenv/cache # 没有则创建文件$ wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tar.xz$ pyenv install 3.6.6 依次安装python3.7.3 python2.7.10 查看当前系统所有python版本 12345$ pyenv versions* system (set by /home/zhc/.pyenv/version) 2.7.10 3.6.6 3.7.3 pyenv系统级别global切换版本&lt;pyenv目录级别local切换版本&lt;pyenv当前shell级别切换版本 12345678910$ pyenv global 3.6.6 $ pyenv version 3.6.6 (set by /home/zhc/.pyenv/version) $ pyenv global 3.7.3$ pyenv version3.7.3 (set by /home/zhc/.pyenv/version)$ pyenv shell 3.6.6$ pyenv version3.6.6 (set by PYENV_VERSION environment variable) $ pyenv local 3.6.6 # 会在当前文件夹下创建.python-version文件，存储虚拟环境名称 pyenv安装虚拟环境 12pyenv virtualenv 3.6.6 test-3.6.6pyenv virtualenv 3.7.3 test-3.7.3 pyenv删除虚拟环境 1pyenv uninstall test-3.6.6 pyenv查看全部虚拟环境 12345➜ ~ pyenv virtualenvs 3.6.6/envs/test-3.6.6 (created from /home/zhc/.pyenv/versions/3.6.6) 3.7.3/envs/test-3.7.3 (created from /home/zhc/.pyenv/versions/3.7.3) test-3.6.6 (created from /home/zhc/.pyenv/versions/3.6.6) test-3.7.3 (created from /home/zhc/.pyenv/versions/3.7.3) 切换虚拟环境 123$ pyenv activate test-3.6.6$ pyenv local test-3.6.6$ source deactivate pyenv重建环境变量 1pyenv rehash 源码安装python2.7.9 $ sudo apt-get install -y openssl $ sudo apt-get install -y libssl-dev # 即 openssl-devel $ sudo apt-get install -y libffi-dev # 即 libffi-devel $ sudo apt-get install -y python-openssl $ sudo apt-get install libbz2-dev $ sudo apt-get install libxml2-dev $ sudo apt-get install libxslt1-dev $ sudo apt-get install sqlite3 libsqlite3-dev $ sudo apt-get install libmysqlclient-dev wget -c https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz tar -xzvf Python-2.7.9.tgz cd Python-2.7.9/ 修改源码，支持ssl vim Modules/Setup.dist # Socket module helper for SSL support; you must comment out the other # socket line above, and possibly edit the SSL variable: #SSL=/usr/local/ssl #_ssl _ssl.c \ # -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \ # -L$(SSL)/lib -lssl -lcrypto 改成 # Socket module helper for SSL support; you must comment out the other # socket line above, and possibly edit the SSL variable: SSL=/usr/local/ssl _ssl _ssl.c \ -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \ -L$(SSL)/lib -lssl -lcrypto LDFLAGS=&quot;-L/usr/lib/x86_64-linux-gnu&quot; ./configure make sudo make install 虚拟环境搭建 安装 sudo apt-get install python-virtualenv 创建虚拟环境 cd ~/var/www virtualenv --no-site-packages -p /usr/local/bin/python Novel # 参数表示不安装系统已经安装的第三方包, -p表示用哪个版本的python 启用虚拟环境 cd /var/www/Novel source ./bin/activate 虚拟环境安装包 (Novel) pip isntall django==1.8.2 # 不能加sudo 退出虚拟环境，进入正常环境 deactivate 虚拟环境复制 pip freeze &gt; requirements.txt pip install -r requirements.txt pip安装超时 pip --default-timeout=100 install -U pip 安装python-mysql sudo apt-get install python-setuptools sudo apt-get install libmysqld-dev sudo apt-get install libmysqlclient-dev sudo apt-get install python-dev sudo easy_install mysql-python 在终端输入以下内容,不报错则表示成功 import MySQLdb 获取文件修改时间 import time filemt= time.localtime(os.stat(filename).st_mtime) #文件修改时间 filect = time.localtime(os.stat(filename).st_ctime) #文件创建 print time.strftime(&quot;%Y-%m-%d&quot;,filemt) print time.strftime(&quot;%Y-%m-%d&quot;,filect) 获取多少天以前的时间 import datetime # 30天以前的日期 date_time = (datetime.datetime.now() - datetime.timedelta(days=30)).strftime(&quot;%Y-%m-%d&quot;) print date_time 去除列表重复项内容 # 如果列表里面内容为字典 f = lambda x,y:x if y in x else x + [y] products = reduce(f, [[], ] + products_query) print products # 如果列表里面内容为字符串 l1 = [&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;b&#39;,&#39;c&#39;,&#39;a&#39;,&#39;a&#39;] l2 = list(set(l1)) print l2 # 保持原来的顺序 l1 = [&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;b&#39;,&#39;c&#39;,&#39;a&#39;,&#39;a&#39;] l2 = sorted(set(l1),key=l1.index) print l2 md5，hash加密 import hashlib data = &#39;This a md5 test!&#39; hash_md5 = hashlib.md5(data) # md5 hash_md5.hexdigest() hashlib.sha1(&#39;This is a sha1 test!&#39;).hexdigest() # sha1 打印输出对象 from pprint import pprint pprint(vars(object)) windows安装python相关环境 安装虚拟环境 # 安装包 pip install virtualenv # 创建虚拟环境env virtualenv.exe env # 开启虚拟环境 ./scripts/active # 退出虚拟环境 deactivate]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos安装s_h_a_d_o_w_s_o_c_k_s服务]]></title>
    <url>%2F2016%2F11%2F09%2Fcentos%E5%AE%89%E8%A3%85s_h_a_d_o_w_s_o_c_k_s%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[Python版本 python –version CentOS6.5默认安装的Python版本是2.6.6，返回值为：Python 2.6.6 安装setuptools yum install -y python-setuptools 安装完毕后，easy_install命令就可以使用了。 安装pip easy_install pip 通过easy_install安装pip是最为简单的方法。pip默认安装到/usr/bin目录下。 安装s_h_a_d_o_w_s_o_c_k_s pip install shadowsocks s_h_a_d_o_w_s_o_c_k_s的配置和使用 至于s_h_a_d_o_w_s_o_c_k_s可以拿来做什么，这里就毋须赘述了。直接开始吧。 创建s_h_a_d_o_w_s_o_c_k_ss的配置文件： CentOS下通过vim创建该配置，运行命令： vi /etc/shadowsocks.json { &quot;server&quot;:&quot;your_server_ip&quot;, &quot;server_port&quot;:8989, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;yourpassword&quot;, &quot;timeout&quot;:600, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false, &quot;workers&quot;: 1 } 各字段的含义： server：服务器 IP (IPv4/IPv6)，注意这也将是服务端监听的 IP 地址 server_port：监听的服务器端口 local_address：本地监听的 IP 地址 local_port：本地端端口 password：用来加密的密码 timeout：超时时间（秒） method：加密方法，可选择 “bf-cfb”, “aes-256-cfb”, “des-cfb”, “rc4″, 等等。默认是一种不安全的加密，推荐用 “aes-256-cfb” fast_open：true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。开启方法： echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen 开启之后，将 fast_open 的配置设置为 true 即可。 works：works数量，默认为 1 安装M2Crypto 默认加密方法 table 速度很快，但很不安全。推荐使用 “aes-256-cfb” 或者 “bf-cfb”。请不要使用 “rc4″，它不安全。如果选择 “table” 之外的加密，需要安装 M2Crypto。 先安装依赖包： yum install -y openssl-devel gcc swig python-devel autoconf libtool 安装setuptools wget --no-check-certificate https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py python ez_setup.py install 再通过pip安装M2Crypto： pip install M2Crypto 安装 gevent 安装 gevent可以提高 Shadowsocks 的性能。CentOS下安装gevent依赖libevent和greenlet。 安装libevent yum install -y libevent greenlet： pip install greenlet ###安装gevent： pip install gevent 命令行参数（服务器端启动命令） ssserver -c /etc/shadowsocks.json 如果想在后台一直运行Shadowsocks，启动命令如下： nohup ssserver -c /etc/shadowsocks.json &gt; /dev/null 2&gt;&amp;1 &amp; 备注：关于nohup，是可以让程序在后台运行的命令。 同时可以用命令行参数覆盖 /etc/shadowsocks.json 里的设置： sslocal -s 服务器地址 -p 服务器端口 -l 本地端端口 -k 密码 -m 加密方法 ssserver -p 服务器端口 -k 密码 -m 加密方法 备注：sslocal是客户端程序；ssserver是服务端程序。 防火墙设置（如有） 编辑防火墙配置文件/etc/sysconfig/iptables，将服务器端口（server_port）放行。 新增一条防火墙规则： iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 8989 -j ACCEPT 先要保存下: service iptables save 重启防火墙iptables： service iptables restart 至此，服务器端的 Shadowsocks 安装和配置完毕。 配置多个用户 { &quot;timeout&quot;: 600, &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;port_password&quot;: { &quot;40001&quot;: &quot;password1&quot;, &quot;40002&quot;: &quot;password2&quot;, &quot;40003&quot;: &quot;password3&quot; }, &quot;_comment&quot;: { &quot;40001&quot;: &quot;xiaoming&quot;, &quot;40002&quot;: &quot;lilei&quot;, &quot;40003&quot;: &quot;mike&quot; } }]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python将office word 转为html 并提取相关图片信息]]></title>
    <url>%2F2016%2F11%2F09%2Fpython%E5%B0%86office%20word%20%E8%BD%AC%E4%B8%BAhtml%20%E5%B9%B6%E6%8F%90%E5%8F%96%E7%9B%B8%E5%85%B3%E5%9B%BE%E7%89%87%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[需求 工作需要将2000多格word文档中的图片提取出来，并改名为word文档名 思路1 More exactly, a .docx document is a Zip archive in OpenXML format: you have first to uncompress it. I downloaded a sample (Google: some search term filetype:docx) and after unzipping I found some folders. The word folder contains the document itself, in file document.xml. 于是使用unzip模块 import zipfile 但是报错 BadZipfile: File is not a zip file 检查发现同事提供的office word文件结尾为.doc, 于是使用7-zip进行提取发现确实报错 文件末端错误 尝试用本机office2013打开并另存为word文档.docx 再次使用7-zip进行提取，成功，会生成以下一个文件夹 _rels文件夹 docProps文件夹 word文件夹 [Content_Types].xml文件 其中\word\media文件夹下就有我需要的图片信息 既然需要更改文件后缀，那么就有另一个思路。 思路2 通过win32com.clientm将文件改为html文件，会生成类似的文件夹 核心代码 # -*- encoding: utf8 -*- import win32com from win32com.client import constants # 打开初始化word文档 w = win32com.client.Dispatch(&#39;Word.Application&#39;) w.Visible = 0 w.DisplayAlerts = 0 doc = w.Documents.Open(source_file) # 打开文件 doc.SaveAs(target_fold + &#39;/&#39; + file_number + &#39;.htm&#39;, 8) # 更名为htm文件 doc.Close() w.Quit() 另存为其他规格只需要将参数8修改即可 wdFormatDocument = 0 wdFormatDocument97 = 0 wdFormatDocumentDefault = 16 wdFormatDOSText = 4 wdFormatDOSTextLineBreaks = 5 wdFormatEncodedText = 7 wdFormatFilteredHTML = 10 wdFormatFlatXML = 19 wdFormatFlatXMLMacroEnabled = 20 wdFormatFlatXMLTemplate = 21 wdFormatFlatXMLTemplateMacroEnabled = 22 wdFormatHTML = 8 wdFormatPDF = 17 wdFormatRTF = 6 wdFormatTemplate = 1 wdFormatTemplate97 = 1 wdFormatText = 2 wdFormatTextLineBreaks = 3 wdFormatUnicodeText = 7 wdFormatWebArchive = 9 wdFormatXML = 11 wdFormatXMLDocument = 12 wdFormatXMLDocumentMacroEnabled = 13 wdFormatXMLTemplate = 14 wdFormatXMLTemplateMacroEnabled = 15 wdFormatXPS = 18 最后脚本 # -*- encoding: utf8 -*- import win32com import os import xlrd import shutil from win32com.client import constants # 从excel表格中导入数据并组成字典 XlsFile = &#39;default.xlsx&#39; # 需要的数据 data = xlrd.open_workbook(XlsFile) table = data.sheets()[0] nrows = table.nrows # 获取文件名列表 number_list = [] for i in range(1, nrows): number_list.append(table.row_values(i)[0]) # 打开初始化word文档 w = win32com.client.Dispatch(&#39;Word.Application&#39;) w.Visible = 0 w.DisplayAlerts = 0 # 遍历文件夹并将文件剪贴到新的文件夹中 source_fold = os.path.split(os.path.realpath(__file__))[0] + &#39;/&#39; + &#39;WordFile&#39; target_fold = os.path.split(os.path.realpath(__file__))[0] + &#39;/&#39; + &#39;NewFile&#39; img_fold = os.path.split(os.path.realpath(__file__))[0] + &#39;/&#39; + &#39;Img&#39; word_list = os.listdir(source_fold) for file_name in word_list: # 根据货号在列表中查找 try: file_number = file_name[0:10] if file_number in number_list: print(file_name + &#39;是需要的文件.&#39;) source_file = source_fold + &#39;/&#39; + file_name doc = w.Documents.Open(source_file) # 打开文件 doc.SaveAs(target_fold + &#39;/&#39; + file_number + &#39;.htm&#39;, 8) # 更名为htm文件 doc.Close() od_img = target_fold + &#39;/&#39; + file_number + &#39;.files&#39; + &#39;/&#39; + &#39;image003.jpg&#39; shutil.copyfile(od_img, img_fold + &#39;/&#39; + file_number + &#39;.jpg&#39;) # 复制新的文件 number_list.remove(file_number) # 从excel列表中删除此元素防止重复选取 except Exception, e: print(file_name) print e w.Quit() try: f = open(&quot;php.json&quot;, &quot;w&quot;) print &gt;&gt;f, number_list # 最后将剩下的元素打印到文件中 except Exception, e: print &#39;写入php.json失败&#39;]]></content>
      <categories>
        <category>办公</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python从excel导出数据并批量替换word文档内容]]></title>
    <url>%2F2016%2F11%2F09%2Fpython%E4%BB%8Eexcel%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E5%B9%B6%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2word%E6%96%87%E6%A1%A3%E5%86%85%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[老外的代码 第一个是操作word，第二个是操作excel from win32com.client import constants, Dispatch import pythoncom wdStory = 6 class WordDocument(object): &quot;&quot;&quot; Some convenience methods for Word documents accessed through COM. &quot;&quot;&quot; def __init__(self, visible=False): self.app = Dispatch(&quot;Word.Application&quot;) self.app.Visible = visible def new(self, filename=None): &quot;&quot;&quot; Create a new Word document. If &#39;filename&#39; specified, use the file as a template. &quot;&quot;&quot; self.app.Documents.Add(filename) def open(self, filename): &quot;&quot;&quot; Open an existing Word document for editing. &quot;&quot;&quot; self.app.Documents.Open(filename) def save(self, filename=None): &quot;&quot;&quot; Save the active document. If &#39;filename&#39; is given, do a Save As. &quot;&quot;&quot; if filename: self.app.ActiveDocument.SaveAs(filename) else: self.app.ActiveDocument.Save() def save_as(self, filename): return self.save(filename) def print_out(self): &quot;&quot;&quot; Print the active document. &quot;&quot;&quot; self.app.Application.PrintOut() def close(self): &quot;&quot;&quot; Close the active document. &quot;&quot;&quot; self.app.ActiveDocument.Close() def quit(self): &quot;&quot;&quot; Quit Word. &quot;&quot;&quot; return self.app.Quit() def find_and_replace(self, find_str, replace_str): &quot;&quot;&quot; Find all occurances of &#39;find_str&#39; and replace with &#39;replace_str&#39; in the active document. &quot;&quot;&quot; self.app.Selection.HomeKey(Unit=wdStory) find = self.app.Selection.Find find.Text = find_str while self.app.Selection.Find.Execute(): self.app.Selection.TypeText(Text=replace_str) from win32com.client import constants, Dispatch import pythoncom import os borderTop = 3 borderBottom = 4 borderLeft = 1 borderRight = 2 borderSolid = 1 borderDashed = 2 borderDotted = 3 colorBlack = 1 directionUp = -4162 directionDown = -4121 directionLeft = -4131 directionRight = -4152 class ExcelDocument(object): &quot;&quot;&quot; Some convenience methods for Excel documents accessed through COM. &quot;&quot;&quot; def __init__(self, visible=False): self.app = Dispatch(&quot;Excel.Application&quot;) self.app.Visible = visible self.sheet = 1 def new(self, filename=None): &quot;&quot;&quot; Create a new Excel workbook. If &#39;filename&#39; specified, use the file as a template. &quot;&quot;&quot; self.app.Workbooks.Add(filename) def open(self, filename): &quot;&quot;&quot; Open an existing Excel workbook for editing. &quot;&quot;&quot; self.app.Workbooks.Open(filename) def set_sheet(self, sheet): &quot;&quot;&quot; Set the active worksheet. &quot;&quot;&quot; self.sheet = sheet def get_range(self, range): &quot;&quot;&quot; Get a range object for the specified range or single cell. &quot;&quot;&quot; return self.app.ActiveWorkbook.Sheets(self.sheet).Range(range) def set_value(self, cell, value=&#39;&#39;): &quot;&quot;&quot; Set the value of &#39;cell&#39; to &#39;value&#39;. &quot;&quot;&quot; self.get_range(cell).Value = value def get_value(self, cell): &quot;&quot;&quot; Get the value of &#39;cell&#39;. &quot;&quot;&quot; value = self.get_range(cell).Value if isinstance(value, tuple): value = [v[0] for v in value] return value def set_border(self, range, side, line_style=borderSolid, color=colorBlack): &quot;&quot;&quot; Set a border on the specified range of cells or single cell. &#39;range&#39; = range of cells or single cell &#39;side&#39; = one of borderTop, borderBottom, borderLeft, borderRight &#39;line_style&#39; = one of borderSolid, borderDashed, borderDotted, others? &#39;color&#39; = one of colorBlack, others? &quot;&quot;&quot; range = self.get_range(range).Borders(side) range.LineStyle = line_style range.Color = color def sort(self, range, key_cell): &quot;&quot;&quot; Sort the specified &#39;range&#39; of the activeworksheet by the specified &#39;key_cell&#39;. &quot;&quot;&quot; range.Sort(Key1=self.get_range(key_cell), Order1=1, Header=0, OrderCustom=1, MatchCase=False, Orientation=1) def hide_row(self, row, hide=True): &quot;&quot;&quot; Hide the specified &#39;row&#39;. Specify hide=False to show the row. &quot;&quot;&quot; self.get_range(&#39;a%s&#39; % row).EntireRow.Hidden = hide def hide_column(self, column, hide=True): &quot;&quot;&quot; Hide the specified &#39;column&#39;. Specify hide=False to show the column. &quot;&quot;&quot; self.get_range(&#39;%s1&#39; % column).EntireColumn.Hidden = hide def delete_row(self, row, shift=directionUp): &quot;&quot;&quot; Delete the entire &#39;row&#39;. &quot;&quot;&quot; self.get_range(&#39;a%s&#39; % row).EntireRow.Delete(Shift=shift) def delete_column(self, column, shift=directionLeft): &quot;&quot;&quot; Delete the entire &#39;column&#39;. &quot;&quot;&quot; self.get_range(&#39;%s1&#39; % column).EntireColumn.Delete(Shift=shift) def fit_column(self, column): &quot;&quot;&quot; Resize the specified &#39;column&#39; to fit all its contents. &quot;&quot;&quot; self.get_range(&#39;%s1&#39; % column).EntireColumn.AutoFit() def save(self): &quot;&quot;&quot; Save the active workbook. &quot;&quot;&quot; self.app.ActiveWorkbook.Save() def save_as(self, filename, delete_existing=False): &quot;&quot;&quot; Save the active workbook as a different filename. If &#39;delete_existing&#39; is specified and the file already exists, it will be deleted before saving. &quot;&quot;&quot; if delete_existing and os.path.exists(filename): os.remove(filename) self.app.ActiveWorkbook.SaveAs(filename) def print_out(self): &quot;&quot;&quot; Print the active workbook. &quot;&quot;&quot; self.app.Application.PrintOut() def close(self): &quot;&quot;&quot; Close the active workbook. &quot;&quot;&quot; self.app.ActiveWorkbook.Close() def quit(self): &quot;&quot;&quot; Quit Excel. &quot;&quot;&quot; return self.app.Quit() 基本使用方法 # -*- encoding: utf8 -*- # 配置项 import os import shutil import re import time import win32com from win32com.client import constants import xlrd XlsFile = &#39;default.xls&#39; # 需要的数据 OldStrs = [&#39;#CatalogNumber#&#39;, &#39;#ProductName#&#39;, &#39;#OSpecies#&#39;, &#39;#Short#&#39;, &#39;#Organism#&#39;, &#39;#Fragment#&#39;, &#39;#PROTEIN#&#39;, &#39;#Tag#&#39; ] # 确认模板类型 DefaultFile = raw_input(&#39;Want to use ihc.jpg,input \&#39;Y\&#39;,or input \&#39;N\&#39;:\n&#39;) if DefaultFile == &#39;N&#39;: DocFile = os.path.abspath(&#39;default_noihc.doc&#39;) print DocFile elif DefaultFile == &#39;Y&#39;: DocFile = os.path.abspath(&#39;default.doc&#39;) print DocFile else: raise filepath = &#39;D:/Py/CreateAntibodyWord/NewFile&#39; # 生成文件目录 # 获取括号内容的正则表达式 patt = re.compile(r&quot;\((.*?)\)&quot;, re.I | re.X) # 打开初始化word文档 w = win32com.client.Dispatch(&#39;Word.Application&#39;) w.Visible = 0 w.DisplayAlerts = 0 # 从excel表格中导入数据 data = xlrd.open_workbook(XlsFile) table = data.sheets()[0] nrows = table.nrows # 循环表格中的内容 for i in range(1, nrows): try: # 获取新的数据 CatalogNumber = table.row_values(i)[0] ProductName = table.row_values(i)[1] OrganismSpecies = table.row_values(i)[2] Tag = table.row_values(i)[3] Fragment = table.row_values(i)[4] Short = patt.findall(ProductName)[0] # 获取对应蛋白的货号 ProteinNumber = re.sub(r&#39;^PA&#39;, r&#39;RP&#39;, CatalogNumber) # Ge多物种没有缩写，用General替代 Organism = patt.findall(OrganismSpecies) if len(Organism) &gt; 0: Organism = Organism[0] else: Organism = &#39;General&#39; # 没有氨基酸片段信息的用原始值替代 Fragment = patt.findall(Fragment) if len(Fragment) &gt; 0: Fragment = Fragment[0] else: Fragment = &#39;#Fragment#&#39; NewStrs = [CatalogNumber, ProductName, OrganismSpecies, Short, Organism, Fragment, ProteinNumber, Tag ] # 打开复制的文件 NewFileName = CatalogNumber + &#39;-e.doc&#39; # 命名新的文件 shutil.copyfile(DocFile, filepath + &#39;/&#39; + NewFileName) # 复制新的文件 CopyFile = os.path.abspath(filepath + &#39;/&#39; + NewFileName) # 新的文件目录 doc = w.Documents.Open(FileName=CopyFile) # 打开文件 # 文本框处理 canvas = doc.Shapes[2] canvas.TextFrame.TextRange.Find.Execute(OldStrs[3], False, False, False, False, False, True, 1, True, NewStrs[3], 2) canvas.TextFrame.TextRange.Find.Execute(OldStrs[4], False, False, False, False, False, True, 1, True, NewStrs[4], 2) # 正文文字处理 w.Selection.Find.ClearFormatting() w.Selection.Find.Replacement.ClearFormatting() for j in range(len(NewStrs)): w.Selection.Find.Execute(OldStrs[j], False, False, False, False, False, True, 1, True, NewStrs[j], 2) # 获取属性信息并修改,参考https://msdn.microsoft.com/en-us/library/microsoft.office.tools.excel.workbook.builtindocumentproperties(v=vs.120).aspx?cs-save-lang=1&amp;cs-lang=vb#code-snippet-1 doc.BuiltInDocumentProperties(&#39;Title&#39;).Value = ProductName doc.BuiltInDocumentProperties(&#39;Subject&#39;).Value = &#39;Instruction manual (Catalog No.&#39; + CatalogNumber + &#39;)&#39; doc.BuiltInDocumentProperties(&#39;Keywords&#39;).Value = ProductName doc.BuiltInDocumentProperties(&#39;Category&#39;).Value = OrganismSpecies # 保存文件并关闭 doc.Save() doc.Close() print CatalogNumber + &#39; create word success!&#39; # 捕获异常并写入log文件中 except Exception, e: print CatalogNumber + &#39; create word error!&#39; print e errorfile = open(filepath + &#39;/errorlog.txt&#39;, &#39;a&#39;) try: errorfile.write(CatalogNumber + &#39; create word error! &#39; + time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;) + &#39;\n&#39;) except Exception, e: doc.Close() w.Quit() raise e finally: errorfile.close() w.Quit() 替换Word文档属性里的详细信息 doc.BuiltInDocumentProperties(&#39;Title&#39;).Value = ProductName doc.BuiltInDocumentProperties(&#39;Subject&#39;).Value = &#39;Instruction manual (Catalog No.&#39; + CatalogNumber + &#39;)&#39; doc.BuiltInDocumentProperties(&#39;Keywords&#39;).Value = ProductName doc.BuiltInDocumentProperties(&#39;Category&#39;).Value = Ospecies 参考微软官方说明 替换Word长文本 使用以下语句替换长文本会报错"字符串过长" w.Selection.Find.Execute(OldStrs[j], False, False, False, False, False, True, 1, True, NewStrs[j], 2) 使用以下语句 find = w.Selection.Find find.Text = &#39;#SEQUENCE#&#39; while w.Selection.Find.Execute(): w.Selection.TypeText(Text=SEQUENCE) 替换Word文本框内容 参考以下代码 http://stackoverflow.com/ import win32com.client word = win32com.client.Dispatch(&quot;Word.Application&quot;) canvas = word.ActiveDocument.Shapes[0] for item in canvas.CanvasItems: print item.TextFrame.TextRange.Text 或者 find = shp.TextFrame.TextRange.Find find.Text = source find.Replacement.Text = target find.Execute(Replace=1, Forward=True)]]></content>
      <categories>
        <category>办公</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[局域网部分电脑不能连接网络,局域网共享文件夹,打印机等情况]]></title>
    <url>%2F2016%2F11%2F09%2F%E5%B1%80%E5%9F%9F%E7%BD%91%E9%83%A8%E5%88%86%E7%94%B5%E8%84%91%E4%B8%8D%E8%83%BD%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C%2C%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%2C%E6%89%93%E5%8D%B0%E6%9C%BA%E7%AD%89%E6%83%85%E5%86%B5%2F</url>
    <content type="text"><![CDATA[问题反应 今天公司出现网络故障，有2个部门全部不能连接网络。 正常问题 一台电脑不能上网，找该台电脑的问题 一部门电脑不能上网，找该部门交换机 多部门电脑不能上网，找主交换机问题 全部不能上网，拿电脑直连路由 问题分析 公司主交换机A 部门分交换机B 测试电脑C 部门不能上网故障，正常情况应该是A模块出现问题。于是重启A，仍然有一个部门故障。 重启B，不能解决问题。 将C与B直连的线路连接到C，C正常。 A,B问题都排除，那么问题在哪？ 继续尝试，B上只连接C，正常。B上连接该部门全部电脑，故障。 找到那条会导致故障的线路，换掉网线，OK. 确认问题原因居然是网线！ 结论 子交换机上的网线问题会影响主交换。 共享打印机安装出现0x00000709 解决办法：重启打印机服务器的Print Spooler服务，重启本地计算机 账号密码问题 局域网有xp电脑可以正常访问共享电脑，排序账号密码问题。 共享设置问题 xp系统访问正常，win7系统访问显示“帐号密码错误”。于是想到共享设置问题。 开始=&gt; 运行=&gt; gpedit.msc=&gt; 本地计算机策略=&gt; 计算机配置=&gt; Windows设置=&gt; 安全设置=&gt; 本地策略=&gt; 安全选项=&gt; 网络安全：LAN管理器身份验证级别=&gt; 发送LM &amp; NTLM响应 但是之前win7是可以正常访问的，所以该项设置是正确的。 时间设置问题 于是询问是什么时候不能访问的，告之电脑蓝屏重启后。那么原因自然是蓝屏导致共享电脑设置的时间出现错误。 如果win7的系统时间和访问的共享文件夹的创建时间间隔太长的话，会出现此现象。这是win7的安全机制造成的。 将共享电脑时间设置为当前时间即可]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[window常用软件]]></title>
    <url>%2F2016%2F11%2F08%2Fwindow%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[压缩软件7-zip 终端命令(需要将安装目录添加到环境变量) 7z a file.zip filefold #添加文件压缩 7z e file.zip filefold #释放文件解压 电脑清理ccleaner 电脑清理工具：清理注册表，系统垃圾文件 下载地址 http://pan.baidu.com/s/1c0G34re 断网后注册，可用注册码 注册名： R J. van der Linden 注册码：CBEW-ZZJA-84DT-VZQG-SRJC 注册名：Registered User 注册码：CBB4-FJN4-EPC6-G5P6-QT4C 卸载软件Total Uninstall 电脑清理工具：卸载软件 破解版v6.16.0下载地址http://pan.baidu.com/s/1mgwAta4 驱动管理工具DriverDownloader 下载地址 http://pan.baidu.com/s/1qW9tPF2 需要使用代理更新驱动，在Settings设置(前提是设置了代理上网) proxy 127.0.0.1 port 1080 注册码 DF12-2RM2-JDPE-1009 如果提示its usage limit 将1009改成逐渐+1，改成1010，1011等等等等 下载工具IDM(Internet Download Manager)6.25版 下载地址 官网 官网下载版 破解版 注册码(断网注册) DBNJC-D4R59-YPAGA-T3S1Q #已经失效 F9TZ9-P6IGF-SME74-2WP21 CJA0S-K6CO4-R4NPJ-EKNRK F9TZ9-P6IGF-SME74-2WP21 CJA0S-K6CO4-R4NPJ-EKNRK N0Z90-KJTTW-7TZO4-I27A1 629U7-XLT5H-6SCGJ-2CENZ XONF7-PMUOL-HU7P4-D1QQX N0Z90-KJTTW-7TZO4-I27A1 L67GT-CE6TR-DFT1D-XWVCM 或者使用host修改办法 host文件添加 127.0.0.1 registeridm.com 127.0.0.1 www.registeridm.com 127.0.0.1 www.internetdownloadmanager.com 打开IDM，注册，注册码如下： OS5HG-K90NH-SXOGT-7JYEZ R2C1T-O0KQO-JAVU2-4MMYP M2A16-47AAW-6NLYP-V1E0J IZO7M-360FW-QY1XP-AWLPN 46YFS-S9G7H-QZFWI-QQBQB TUTR2-I2NHO-GQBC6-ZECWH 终端管理工具Cmder 下载地址官方 文件图片批量处理软件 Bulk Rename Utility 下载地址官方云盘 文件资源管理器Total Commander 破解版下载 快捷键 F3——查看文件 F4——编辑文件 F5——拷贝文件 F6——重命名、移动文件 F7——新建文件夹 F8——删除文件、文件夹 F10——菜单条激活开关 ALT Alt+F1——改变左边窗口的驱动器 Alt+F2——改变右边窗口的驱动器 Alt+Shift+F3——使用内部查看程序浏览文件 Alt+F5——压缩文件/文件夹 Alt+Shift+F5——压缩文件/文件夹，并删除原文件/文件夹 Alt+F7——查找文件/文件夹 Alt+F9——文件解压缩 Alt+left/right——切换至上次进入的前一个/后一个文件夹 Alt+down——显示历史访问地址列表 SHIFT Shift+F4——用外部编辑器（UltraEdit）创建新文件 Shift+F5——复制（重命名）文件/文件夹到当前文件夹 Shift+Ctrl+F5——创建所选对象的快捷方式 Shift+F6——重命名文件/文件夹 Shift+ESC——Total Commander最小化 NUM NUM + ——选择属性相同的一组文件 NUM — ——清除所选文件中属性相同的一组文件 NUM * ——反向选择 NUM / ——恢复选择 CTRL+NUM + ——全部选择 CTRL+NUM - ——清除全部选择 Alt+NUM + ——选择与当前光标选中的文件扩展名相同的一组文件 CTRL Ctrl+PgUP——回上一级目录 Ctrl+left/right——在左边/右边文件窗口中显示当前文件夹列表 CTRL+/——返回根目录 CTRL+SHIFT+F1——缩略图视图（图片预览） CTRL+F2——显示文件/文件夹详细资料 CTRL+F3——以名称排序 CTRL+F4——以扩展名排序 CTRL+F5——以文件的创建时间排序 CTRL+F6——以文件的大小排序 CTRL+F8——显示目录结构 CTRL+F9——打印当前光标处的文件 CTRL+F10——显示所有文件 CTRL+F11——显示所有可执行文件/隐藏非执行文件 CTRL+ENTER——将当前文件名复制到TC的命令行 CTRL+SHIFT+ENTER——将当前完整路径及文件名复制到TC的命令行 CTRL+D——打开常用文件夹列表（可作书签用） CTRL+F——连接到FTP服务器 CTRL+SHIFT+F——断开与FTP服务器的连接 CTRL+Q——打开/关闭快速查看 CTRL+U——切换左右文件窗口显示内容 CTRL+W——关闭当前目录标签 CTRL+SHIFT+W——关闭所有目录标签 CTRL+Y——清空命令行输入框并置光标于命令行 ESC——清空命令行输入框并置光标于文件窗口 INSERT——选择文件/目录 SPACE——选择文件/目录 SHIFT+ENTER—— 1.当命令行输入框有字符串命令：运行命令行的字符串命令 2.当光标位于压缩文件用相应的压缩工具打开压缩文件 3.位于压缩文件内：将所选中的文件解到临时文件目录，并试图将其做压缩文件的解压处理 ALT+ENTER——显示所选文件属性 Total Commander常用快捷键 显示编辑文件： F3：这个恐怕是使用程度最高的快捷键了，专门用来查看文件。需要说明的是，默认安装的TC 5.5版只能查看文本及一些关联的影像文件，图片只支持BMP等很少的种类。如需要查看更多类型的文件，还需要安装插件。 Ctrl + Q：快速预览。 F4：主要用来编辑文本文件。可以设置外部程序来编辑文本(我设置的是Editplus)。 Shift + F4： 新建文本文件，调用记事本编辑（自定义编辑器）。 Ctrl + Z： 编辑文件/文件夹的说明。 Ctlt + Enter：查看文件或文件夹属性。 空格键：选择或取消选择文件，如在文件夹按下，则计算该文件夹占用空间。 Shift + 空格： 选中光标所在，不计算文件夹的容量。 Alt + Shift + Enter：计算当前窗格下所有文件夹的占用空间，设置后再点击顶栏的“大小”可使文件夹参与排序，迅速找到占用空间最大的文件夹。 Ctrl+Shift+Enter获取光标所在处文件/文件夹的绝对路径并显示在命令行里。 操作复制文件 F5：复制文件，这个也是最常用的快捷键之一。TC分为左、右两个窗口，我们把光标选中的文件拷贝到另一个窗口。另外，TC也支持以鼠标拖拽方式复制文件，两者哪个更方便完全由你的个人喜好决定。 Shift + F5： 同目录复制 F6：移动文件，将光标选中的文件移动到另一个窗口。 shift+Ins TC中的块拷贝 SHIFT + F6 重命名文件（F2修改版） Ctrl + M： 批量更改文件名。 空格 选择文件/文件夹(如同 INSERT)。如果光标处文件夹还未选中，按空格键后，计算其占用空间（含子文件夹）并用字节数代替 （详细资料显示方式下）。通过 '配置' - '选项' - '操作' - '用空格键选择' 可禁用该特性。 右键长按 在NC风格下这是调用 Windows 风格下的右键菜单 Shift + F10——显示关联试菜单，类似于鼠标右键的效果 新建 SHIFT + F4 新建文本文件，加载到编辑器(自定义） F7：新建一个或多层文件夹。可以像DOS那样新建多层的目录，比如c:/file/a/b/c 删除 F8 / Del：删除文件。与Windows一样，按住Shift + Delete，则直接删除而不放到回收站中。 搜索定位 Alt + Ctrl + 任意字母 或 Alt+任意字母 或 任意字母 ：快速定位文件 [菜单：配置--选项--快速搜索 中设置] Alt + F7：搜索。有了TC之后，我再没用过Windows系统自带的搜索。TC的搜索简单，而且速度快，功能全，非常好用。 Ctrl + D：常用文件夹列表。按下会弹出浮动窗口，能够快速跳转到设定好的文件夹中。(非常好用） ctrl + s: 快速搜索只显示所选文件 Alt + ↓：历史文件夹列表，可以快速回溯到你曾经到过的某个文件夹。 Alt + ← 或 →：快速后退或前进历史目录。 Tab： 左右窗口间切换。 Alt + Tab： 窗口标签间切换。 空格键：选择或取消选择文件，如在文件夹按下，则计算该文件夹占用空间。 (小键盘星号键)：反向选择。 +(小键盘加号键)：选择全部或指定类型的文件。 -(小键盘加号键)：取消选择全部或指定类型的文件。 Ctrl + A：全选当前窗口所有文件。与Windows资源管理器不同，按下此快捷键并不选中文件夹。 Shift + ↓ 和 Shift + ↑：选择或取消选择文件或文件夹。 Ctrl+↑： 在当前窗口的新标签中打开光标处文件夹 Ctrl+↓： 在对面窗口的新标签中打开光标处文件夹 Ctrl + ←/→：如果光标在窗格顶部，将左/右窗格的显示内容调整为一样的；如果光标所在处是一个文件夹，在左/右窗格打开此文件夹；如果光标所在处是一个压缩文件，在左/右窗格打开此文件。 Ctrl + num 锁定/解锁当前标签。 ALT+F1 改变左侧窗口的驱动器 ALT+F2 改变右侧窗口的驱动器 压缩文件 Alt + F5：压缩选中的文件。按下回车，生成后的压缩包将会出现另一个目的窗口中。 Alt + F6 解压缩文件 显示方式 Ctrl + B： 显示当前文件夹及子文件夹下的所有文件。 Ctrl + R： 刷新 Ctrl + F1-8、10-12 不同方式在窗口显示文件列表 翻译软件 灵格斯 下载地址http://www.lingoes.cn/ CorelDRAWX7破解版 下载地址[百度网盘]（http://pan.baidu.com/s/1ntVwlgH） 断网注册 XMIND7破解版 下载地址百度网盘]]></content>
      <categories>
        <category>办公</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[硬链接软链接方式]]></title>
    <url>%2F2016%2F11%2F08%2F%E7%A1%AC%E9%93%BE%E6%8E%A5%E8%BD%AF%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[硬链结和符号链接的区别 硬连接记录的是目标的 inode,符号连接记录的是目标的 path。 软连接就像是快捷方式,而硬连接就像是备份!符号连接可以做跨分区的 link；而 硬连接由于 inode 的缘故，只能在本分区中做 link.所以,符号连接的使用频率要高的多。 软链接文件 软链接又叫符号链接，这个文件包含了另一个文件的路径名。可以是任意文件或目录，可以链接不同文件系统的文件。和win下的快捷方式差不多。链接文件甚至可以链接不存在的文件，这就产生一般称之为"断链"的问题(或曰“现象")，链接文件甚至可以循环链接自己。类似于编程语言中的递归。 命令格式： ln [-s] source_path target_path 硬链接文件 info ln 命令告诉您，硬链接是已存在文件的另一个名字，硬连接的命令是 ln -d existfile newfile 硬链接文件有两个限制 1、不允许给目录创建硬链接； 2、只有在同一文件系统中的文件之间才能创建链接。 对硬链接文件进行读写和删除操作时候，结果和软链接相同。但如果我们删除硬链接文件的源文件，硬链接文件仍然存在，而且保留了愿有的内容。这时，系统就“忘记”了它曾经是硬链接文件。而把他当成一个普通文件。修改其中一个，与其连接的文件同时被修改 Windows 下创建硬链接，只能适用于 NTFS 文件系统 fsutil hardlink create NewFileName ExistingFileName Windows 下创建软链接 NTFS只支持对目录的软链接，微软把它称作 junction。但是对于文件的软链接，微软也有提供解决方案，那就是快捷方式(Shortcut，.lnk 文件)。不过软链接和快捷方式不是一个层次上的东西，前者是底层文件系统的功能，后者是应用层的功能。Windows 下目录的快捷方式用 dir 看起来是个文件。 命令方式 junction LinkDirectory ExistingDirectory 例如 junction d:\link c:\winnt 将为c:\winnt 建立一个链接目录 d:\link，C和D分区都要是 NTFS 格式，在资源管理器和 dir 列示中 d:\link 都以目录的面目存在的。d:\link 就像是 c:\winnt 的一个引用一般，删除 d:\link 目录中的内容也就是删除了 c:\winnt 中的内容，但删除 d:\link 本身是不会影响到 c:\winnt 的。 win7可以使用mklink命令 λ mklink /? 创建符号链接。 MKLINK [[/D] | [/H] | [/J]] Link Target /D 创建目录符号链接。默认为文件 符号链接。 /H 创建硬链接而非符号链接。 /J 创建目录联接。 Link 指定新的符号链接名称。 Target 指定新链接引用的路径 (相对或绝对)。 其中\D \J区别如下 E:\ λ mkdir SourceDir E:\ λ mklink /D DTargetDir\ SourceDir\ 为 DTargetDir\ &lt;&lt;===&gt;&gt; SourceDir\ 创建的符号链接 E:\ λ mklink /J JTargetDir\ SourceDir\ 为 JTargetDir\ &lt;&lt;===&gt;&gt; SourceDir\ 创建的联接 SourceDir,JTargetDir,DTargetDir 3个文件夹内部修改/增加/删除都会互相影响。 复制JTargetDir, 不会出现新的目录，文件夹文件内部复制 这样复制会影响DTargetDir和SourceDir，慎用！ 复制DTargetDir文件夹会生成一个全新的文件夹，不会被其他文件夹影响，也不能影响其他文件夹。 复制JTargetDir的父级目录不会影响该目录，复制生成的目录下JTargetDir目录会变成独立的文件夹且文件夹内为空 ![][0.048387699760496616] [0.048387699760496616]: http://7xq3ry.com1.z0.glb.clouddn.com/20160127132633.png 删除JTargetDir,DTargetDir均不影响SourceDir 删除SorceDir,会使得JTargetDir和DTargetDir失效 使用mklink /D时需要保证源目录和目标目录在同一个目录下，否则创建成功但不能正常访问 linux服务器的软硬件链接 软链接可以跨文件系统，硬链接不可以 ln source target # 硬链接 ln -s source target # 软链接 软链接如果跨文件夹，必须使用绝对路径,否则会出现软链接无法访问的情况 ln -s /var/www/html/Upload/product/manual/en/ /var/www/html/manual]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php将pdf转为jpg，png图片]]></title>
    <url>%2F2016%2F11%2F08%2Fphp%E5%B0%86pdf%E8%BD%AC%E4%B8%BAjpg%EF%BC%8Cpng%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[环境 WINDOW,PHP5.2 安装 安装ImageMagick并添加环境变量 官网 安装php扩展php_imagick.dll,并在php.ini开启 官网 查看是否载入扩展 phpinfo(); 安装Ghostscript并添加环境变量 官网 下载地址 百度网盘 测试是否可以正常运行 λ convert.exe SEZ588Hu.pdf SEZ588Hu.png php代码 生成jpg文件 12345&lt;?php $im = new imagick('A.pdf[0]'); $im-&gt;setImageFormat('jpg'); $im-&gt;writeImages('A.jpg', true);?&gt; 或者直接输出到浏览器 &lt;?php $im = new imagick(&#39;file.pdf[0]&#39;); $im-&gt;setImageFormat(&#39;jpg&#39;); header(&#39;Content-Type: image/jpeg&#39;); echo $im; ?&gt; 错误处理 1，将Ghostscript64位卸载，安装32位 2，将php.ini里的upload_tmp_dir对应目录权限修改为IISUER可读写]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oracle virtualbox入门基础]]></title>
    <url>%2F2016%2F11%2F08%2Foracle%20virtualbox%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[安装和主机共享 点击设备，安装增强功能 共享剪贴板 点击设备，共享剪贴板，双向 快捷键 显示客户机菜单 右Ctrl+C 全屏快捷键 右Ctrl+F 4中网络连接形式(以下内容来自网络) 第一种 NAT模式 解释： NAT模式是最简单的实现虚拟机上网的方式，你可以这样理解：Vhost访问网络的所有数据都是由主机提供的，vhost并不真实存在于网络中，主机与网络中的任何机器都不能查看和访问到Vhost的存在。 虚拟机与主机关系： 只能单向访问，虚拟机可以通过网络访问到主机，主机无法通过网络访问到虚拟机。 虚拟机与网络中其他主机的关系： 只能单向访问，虚拟机可以访问到网络中其他主机，其他主机不能通过网络访问到虚拟机。 虚拟机与虚拟机之间的关系： 相互不能访问，虚拟机与虚拟机各自完全独立，相互间无法通过网络访问彼此。 IP:10.0.2.15 网关：10.0.2.2 DNS：10.0.2.3 一台虚拟机的多个网卡可以被设定使用 NAT， 第一个网卡连接了到专用网 10.0.2.0，第二个网卡连接到专用网络 10.0.3.0，等等。默认得到的客户端ip（IP Address）是10.0.2.15，网关（Gateway）是10.0.2.2，域名服务器（DNS）是10.0.2.3，可以手动参考这个进行修改。 NAT方案优缺点： 笔记本已插网线时： 虚拟机可以访问主机，虚拟机可以访问互联网，在做了端口映射后（最后有说明），主机可以访问虚拟机上的服务（如数据库）。 笔记本没插网线时： 主机的“本地连接”有红叉的，虚拟机可以访问主机，虚拟机不可以访问互联网，在做了端口映射后，主机可以访问虚拟机上的服务（如数据库）。 第二种 Bridged Adapter模式 解释： 网桥模式是我最喜欢的用的一种模式，同时，模拟度也是相当完美。你可以这样理解，它是通过主机网卡，架设了一条桥，直接连入到网络中了。因此，它使得虚拟机能被分配到一个网络中独立的IP，所有网络功能完全和在网络中的真实机器一样。 虚拟机与主机关系： 可以相互访问，因为虚拟机在真实网络段中有独立IP，主机与虚拟机处于同一网络段中，彼此可以通过各自IP相互访问。 虚拟机于网络中其他主机关系： 可以相互访问，同样因为虚拟机在真实网络段中有独立IP，虚拟机与所有网络其他主机处于同一网络段中，彼此可以通过各自IP相互访问。 虚拟机于虚拟机关系： 可以相互访问，原因同上。 IP：一般是DHCP分配的，与主机的“本地连接”的IP 是同一网段的。虚拟机就能与主机互相通信。 笔记本已插网线时：（若网络中有DHCP服务器）主机与虚拟机会通过DHCP分别得到一个IP，这两个IP在同一网段。 主机与虚拟机可以ping通，虚拟机可以上互联网。 笔记本没插网线时：主机与虚拟机不能通信。主机的“本地连接”有红叉，就不能手工指定IP。虚拟机也不能通过DHCP得到IP地址，手工指定IP后，也无法与主机通信，因为主机无IP。 这时主机的VirtualBox Host-Only Network 网卡是有ip的，192.168.56.1。虚拟机就算手工指定了IP 192.168.56.，也ping不能主机。 第三种 Internal模式 解释： 内网模式，顾名思义就是内部网络模式，虚拟机与外网完全断开，只实现虚拟机于虚拟机之间的内部网络模式。 虚拟机与主机关系： 不能相互访问，彼此不属于同一个网络，无法相互访问。 虚拟机与网络中其他主机关系： 不能相互访问，理由同上。 虚拟机与虚拟机关系： 可以相互访问，前提是在设置网络时，两台虚拟机设置同一网络名称。如上配置图中，名称为intnet。 IP: VirtualBox的DHCP服务器会为它分配IP ，一般得到的是192.168.56.101，因为是从101起分的，也可手工指定192.168.56.。 笔记本已插网线时：虚拟机可以与主机的VirtualBox Host-Only Network 网卡通信 这种方案不受主机本地连接（网卡）是否有红叉的影响。 第四种 Host-only Adapter模式 解释： 主机模式，这是一种比较复杂的模式，需要有比较扎实的网络基础知识才能玩转。可以说前面几种模式所实现的功能，在这种模式下，通过虚拟机及网卡的设置都可以被实现。 我们可以理解为Vbox在主机中模拟出一张专供虚拟机使用的网卡，所有虚拟机都是连接到该网卡上的，我们可以通过设置这张网卡来实现上网及其他很多功能，比如（网卡共享、网卡桥接等）。 虚拟机与主机关系 默认不能相互访问，双方不属于同一IP段，host-only网卡默认IP段为192.168.56.X 子网掩码为255.255.255.0，后面的虚拟机被分配到的也都是这个网段。通过网卡共享、网卡桥接等，可以实现虚拟机于主机相互访问。 虚拟机与网络主机关系 默认不能相互访问，原因同上，通过设置，可以实现相互访问。 虚拟机与虚拟机关系 默认可以相互访问，都是同处于一个网段。 虚拟机访问主机 用的是主机的VirtualBox Host-Only Network网卡的IP：192.168.56.1 ，不管主机“本地连接”有无红叉，永远通。 主机访问虚拟机，用是的虚拟机的网卡3的IP： 192.168.56.101 ，不管主机“本地连接”有无红叉，永远通。 虚拟机访问互联网，用的是自己的网卡2， 这时主机要能通过“本地连接”有线上网，（无线网卡不行） 通过对以上几种网络模式的了解，我们就可以灵活运用，模拟组建出我们所想要的任何一种网络环境了。 比如我想模拟出来一个一台主机，监控一个局域网上网情况的网络环境。 首先我开启了两台虚拟机vhost1与vhost2，当然如果硬件允许，我同样可以再增加vhost3、vhost4… 所有的vhost我都设置成internat内网模式，网络名称为intnal，网关为192.168.56.100，意思就是通过 192.168.56.100网卡上网。其中有一台vhost1我设置为双网卡，一张为内网模式（192.168.56.100），一张为网桥模式 （192.168.1.101）。两张网卡设置双网卡共享上网 虚拟机之间为局域网，其中有一台虚拟机vhost1通过与外网相连，所有局域网中的虚拟机又通过vhost1来实现上外网。这样vhost1就可以监控整个虚拟机局域网上网情况了。 xp下全屏 安装增强包后再全局设置里设置成本机的分辨率 Ubuntu全屏 首先，安装增强包，点击Run Software 重启虚拟机 点击设备-&gt;分配光驱-&gt;移除虚拟盘 点击 右Ctrl+F全屏快捷键 Ubuntu设置桥接网卡 在设置-&gt;网络-&gt;连接方式-&gt;桥接网卡 sudo vim /etc/network/interfaces 修改配置文件,对应的信息要和主机的一致，保证虚拟机和主机在同一IP段 # The primary network interface auto eth0 iface eth0 inet static address 192.168.2.1 gateway 192.168.2.254 netmask 255.255.255.0 #network 192.168.2.0 #broadcast 192.168.2.255 重启 sudo /etc/init.d/networking restart 在主机中设置上级路由器，放行虚拟机的MAC地址保证虚拟机可以访问外网。]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
</search>
